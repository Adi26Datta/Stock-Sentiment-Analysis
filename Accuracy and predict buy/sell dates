{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "266cfa86",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-04T11:58:04.103645Z",
     "iopub.status.busy": "2025-07-04T11:58:04.102844Z",
     "iopub.status.idle": "2025-07-04T11:58:05.674732Z",
     "shell.execute_reply": "2025-07-04T11:58:05.673855Z"
    },
    "papermill": {
     "duration": 1.580684,
     "end_time": "2025-07-04T11:58:05.676233",
     "exception": false,
     "start_time": "2025-07-04T11:58:04.095549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/stocks/merged.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aa9fd757",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T11:58:05.688997Z",
     "iopub.status.busy": "2025-07-04T11:58:05.688627Z",
     "iopub.status.idle": "2025-07-04T11:58:16.487681Z",
     "shell.execute_reply": "2025-07-04T11:58:16.486990Z"
    },
    "papermill": {
     "duration": 10.807366,
     "end_time": "2025-07-04T11:58:16.489239",
     "exception": false,
     "start_time": "2025-07-04T11:58:05.681873",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import yfinance as yf\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "import re\n",
    "import string\n",
    "import spacy\n",
    "import numpy as np\n",
    "#nltk.download('vader_lexicon')\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "from textblob import TextBlob\n",
    "from sklearn.decomposition import LatentDirichletAllocation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f102ce90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T11:58:16.501440Z",
     "iopub.status.busy": "2025-07-04T11:58:16.500551Z",
     "iopub.status.idle": "2025-07-04T11:58:17.111677Z",
     "shell.execute_reply": "2025-07-04T11:58:17.110877Z"
    },
    "papermill": {
     "duration": 0.61829,
     "end_time": "2025-07-04T11:58:17.112953",
     "exception": false,
     "start_time": "2025-07-04T11:58:16.494663",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Date</th>\n",
       "      <th>Close</th>\n",
       "      <th>sentiment_scores</th>\n",
       "      <th>Subjectivity</th>\n",
       "      <th>Polarity</th>\n",
       "      <th>neg</th>\n",
       "      <th>pos</th>\n",
       "      <th>neu</th>\n",
       "      <th>label</th>\n",
       "      <th>...</th>\n",
       "      <th>embedding_290</th>\n",
       "      <th>embedding_291</th>\n",
       "      <th>embedding_292</th>\n",
       "      <th>embedding_293</th>\n",
       "      <th>embedding_294</th>\n",
       "      <th>embedding_295</th>\n",
       "      <th>embedding_296</th>\n",
       "      <th>embedding_297</th>\n",
       "      <th>embedding_298</th>\n",
       "      <th>embedding_299</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2010-07-21</td>\n",
       "      <td>1.348000</td>\n",
       "      <td>0.7650</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.292</td>\n",
       "      <td>0.708</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.158826</td>\n",
       "      <td>0.229542</td>\n",
       "      <td>0.269480</td>\n",
       "      <td>0.005842</td>\n",
       "      <td>-0.046021</td>\n",
       "      <td>0.262490</td>\n",
       "      <td>-0.183144</td>\n",
       "      <td>-0.153383</td>\n",
       "      <td>-0.046463</td>\n",
       "      <td>0.284340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2010-07-22</td>\n",
       "      <td>1.400000</td>\n",
       "      <td>0.7882</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.225</td>\n",
       "      <td>0.775</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.156490</td>\n",
       "      <td>0.210042</td>\n",
       "      <td>0.253818</td>\n",
       "      <td>0.009496</td>\n",
       "      <td>-0.055705</td>\n",
       "      <td>0.240137</td>\n",
       "      <td>-0.164799</td>\n",
       "      <td>-0.139611</td>\n",
       "      <td>-0.049336</td>\n",
       "      <td>0.274392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2010-07-23</td>\n",
       "      <td>1.419333</td>\n",
       "      <td>-0.4939</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.104</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.896</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.062881</td>\n",
       "      <td>0.269830</td>\n",
       "      <td>0.214982</td>\n",
       "      <td>0.006008</td>\n",
       "      <td>0.210868</td>\n",
       "      <td>0.301262</td>\n",
       "      <td>-0.174867</td>\n",
       "      <td>-0.139968</td>\n",
       "      <td>0.060738</td>\n",
       "      <td>0.081361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2010-07-26</td>\n",
       "      <td>1.396667</td>\n",
       "      <td>0.4215</td>\n",
       "      <td>0.325000</td>\n",
       "      <td>0.275000</td>\n",
       "      <td>0.107</td>\n",
       "      <td>0.142</td>\n",
       "      <td>0.751</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.007634</td>\n",
       "      <td>0.212661</td>\n",
       "      <td>0.187982</td>\n",
       "      <td>0.004289</td>\n",
       "      <td>0.106633</td>\n",
       "      <td>0.238466</td>\n",
       "      <td>-0.152060</td>\n",
       "      <td>-0.122055</td>\n",
       "      <td>0.023708</td>\n",
       "      <td>0.122588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2010-07-27</td>\n",
       "      <td>1.370000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.283333</td>\n",
       "      <td>0.266667</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.031258</td>\n",
       "      <td>0.177633</td>\n",
       "      <td>0.170767</td>\n",
       "      <td>0.002800</td>\n",
       "      <td>0.062727</td>\n",
       "      <td>0.199637</td>\n",
       "      <td>-0.131026</td>\n",
       "      <td>-0.105074</td>\n",
       "      <td>0.006160</td>\n",
       "      <td>0.128132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2600</th>\n",
       "      <td>2600</td>\n",
       "      <td>2024-12-17</td>\n",
       "      <td>479.859985</td>\n",
       "      <td>-0.0772</td>\n",
       "      <td>0.201136</td>\n",
       "      <td>0.084091</td>\n",
       "      <td>0.066</td>\n",
       "      <td>0.081</td>\n",
       "      <td>0.853</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.013713</td>\n",
       "      <td>0.199486</td>\n",
       "      <td>0.170003</td>\n",
       "      <td>0.003270</td>\n",
       "      <td>0.121335</td>\n",
       "      <td>0.220449</td>\n",
       "      <td>-0.136296</td>\n",
       "      <td>-0.110493</td>\n",
       "      <td>0.031577</td>\n",
       "      <td>0.094932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2601</th>\n",
       "      <td>2601</td>\n",
       "      <td>2024-12-18</td>\n",
       "      <td>440.130005</td>\n",
       "      <td>-0.7579</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.289</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.711</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.051852</td>\n",
       "      <td>0.251260</td>\n",
       "      <td>0.198919</td>\n",
       "      <td>0.002590</td>\n",
       "      <td>0.188911</td>\n",
       "      <td>0.276407</td>\n",
       "      <td>-0.167186</td>\n",
       "      <td>-0.135106</td>\n",
       "      <td>0.056094</td>\n",
       "      <td>0.083584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2602</th>\n",
       "      <td>2602</td>\n",
       "      <td>2024-12-19</td>\n",
       "      <td>436.170013</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001963</td>\n",
       "      <td>0.216463</td>\n",
       "      <td>0.190430</td>\n",
       "      <td>0.004641</td>\n",
       "      <td>0.114818</td>\n",
       "      <td>0.241811</td>\n",
       "      <td>-0.150233</td>\n",
       "      <td>-0.122603</td>\n",
       "      <td>0.027486</td>\n",
       "      <td>0.119386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2603</th>\n",
       "      <td>2603</td>\n",
       "      <td>2024-12-20</td>\n",
       "      <td>421.059998</td>\n",
       "      <td>0.4927</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>0.350000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.208</td>\n",
       "      <td>0.792</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.052342</td>\n",
       "      <td>0.198929</td>\n",
       "      <td>0.197446</td>\n",
       "      <td>0.008153</td>\n",
       "      <td>0.051292</td>\n",
       "      <td>0.222081</td>\n",
       "      <td>-0.143618</td>\n",
       "      <td>-0.119524</td>\n",
       "      <td>-0.001072</td>\n",
       "      <td>0.163208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2604</th>\n",
       "      <td>2604</td>\n",
       "      <td>2024-12-23</td>\n",
       "      <td>430.600006</td>\n",
       "      <td>0.3182</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.173</td>\n",
       "      <td>0.827</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.007384</td>\n",
       "      <td>0.182230</td>\n",
       "      <td>0.153247</td>\n",
       "      <td>0.002933</td>\n",
       "      <td>0.104248</td>\n",
       "      <td>0.201332</td>\n",
       "      <td>-0.126602</td>\n",
       "      <td>-0.101144</td>\n",
       "      <td>0.027457</td>\n",
       "      <td>0.090482</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2605 rows × 310 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Unnamed: 0        Date       Close  sentiment_scores  Subjectivity  \\\n",
       "0              0  2010-07-21    1.348000            0.7650      0.000000   \n",
       "1              1  2010-07-22    1.400000            0.7882      0.000000   \n",
       "2              2  2010-07-23    1.419333           -0.4939      0.000000   \n",
       "3              3  2010-07-26    1.396667            0.4215      0.325000   \n",
       "4              4  2010-07-27    1.370000            0.0000      0.283333   \n",
       "...          ...         ...         ...               ...           ...   \n",
       "2600        2600  2024-12-17  479.859985           -0.0772      0.201136   \n",
       "2601        2601  2024-12-18  440.130005           -0.7579      0.000000   \n",
       "2602        2602  2024-12-19  436.170013            0.0000      0.000000   \n",
       "2603        2603  2024-12-20  421.059998            0.4927      0.350000   \n",
       "2604        2604  2024-12-23  430.600006            0.3182      0.500000   \n",
       "\n",
       "      Polarity    neg    pos    neu  label  ...  embedding_290  embedding_291  \\\n",
       "0     0.000000  0.000  0.292  0.708      0  ...      -0.158826       0.229542   \n",
       "1     0.000000  0.000  0.225  0.775      1  ...      -0.156490       0.210042   \n",
       "2     0.000000  0.104  0.000  0.896      1  ...       0.062881       0.269830   \n",
       "3     0.275000  0.107  0.142  0.751      0  ...      -0.007634       0.212661   \n",
       "4     0.266667  0.000  0.000  1.000      0  ...      -0.031258       0.177633   \n",
       "...        ...    ...    ...    ...    ...  ...            ...            ...   \n",
       "2600  0.084091  0.066  0.081  0.853      1  ...       0.013713       0.199486   \n",
       "2601  0.000000  0.289  0.000  0.711      0  ...       0.051852       0.251260   \n",
       "2602  0.000000  0.000  0.000  1.000      0  ...      -0.001963       0.216463   \n",
       "2603  0.350000  0.000  0.208  0.792      0  ...      -0.052342       0.198929   \n",
       "2604  0.300000  0.000  0.173  0.827      1  ...       0.007384       0.182230   \n",
       "\n",
       "      embedding_292  embedding_293  embedding_294  embedding_295  \\\n",
       "0          0.269480       0.005842      -0.046021       0.262490   \n",
       "1          0.253818       0.009496      -0.055705       0.240137   \n",
       "2          0.214982       0.006008       0.210868       0.301262   \n",
       "3          0.187982       0.004289       0.106633       0.238466   \n",
       "4          0.170767       0.002800       0.062727       0.199637   \n",
       "...             ...            ...            ...            ...   \n",
       "2600       0.170003       0.003270       0.121335       0.220449   \n",
       "2601       0.198919       0.002590       0.188911       0.276407   \n",
       "2602       0.190430       0.004641       0.114818       0.241811   \n",
       "2603       0.197446       0.008153       0.051292       0.222081   \n",
       "2604       0.153247       0.002933       0.104248       0.201332   \n",
       "\n",
       "      embedding_296  embedding_297  embedding_298  embedding_299  \n",
       "0         -0.183144      -0.153383      -0.046463       0.284340  \n",
       "1         -0.164799      -0.139611      -0.049336       0.274392  \n",
       "2         -0.174867      -0.139968       0.060738       0.081361  \n",
       "3         -0.152060      -0.122055       0.023708       0.122588  \n",
       "4         -0.131026      -0.105074       0.006160       0.128132  \n",
       "...             ...            ...            ...            ...  \n",
       "2600      -0.136296      -0.110493       0.031577       0.094932  \n",
       "2601      -0.167186      -0.135106       0.056094       0.083584  \n",
       "2602      -0.150233      -0.122603       0.027486       0.119386  \n",
       "2603      -0.143618      -0.119524      -0.001072       0.163208  \n",
       "2604      -0.126602      -0.101144       0.027457       0.090482  \n",
       "\n",
       "[2605 rows x 310 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df=pd.read_csv(\"/kaggle/input/stocks/merged.csv\")\n",
    "merged_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a81e996f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T11:58:17.125830Z",
     "iopub.status.busy": "2025-07-04T11:58:17.125547Z",
     "iopub.status.idle": "2025-07-04T11:58:17.135152Z",
     "shell.execute_reply": "2025-07-04T11:58:17.134544Z"
    },
    "papermill": {
     "duration": 0.017504,
     "end_time": "2025-07-04T11:58:17.136424",
     "exception": false,
     "start_time": "2025-07-04T11:58:17.118920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "merged_df = merged_df.drop(columns=['Unnamed: 0'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5a7e1395",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T11:58:17.148661Z",
     "iopub.status.busy": "2025-07-04T11:58:17.148397Z",
     "iopub.status.idle": "2025-07-04T11:58:17.164026Z",
     "shell.execute_reply": "2025-07-04T11:58:17.163421Z"
    },
    "papermill": {
     "duration": 0.023269,
     "end_time": "2025-07-04T11:58:17.165319",
     "exception": false,
     "start_time": "2025-07-04T11:58:17.142050",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "merged_df['Date'] = pd.to_datetime(merged_df['Date'])\n",
    "X=merged_df.drop(columns=['label'])\n",
    "y=merged_df['label']\n",
    "\n",
    "split=int(0.7*X.shape[0])\n",
    "\n",
    "X_train = X[:split].copy()\n",
    "X_test = X[split:].copy()\n",
    "y_train = y[:split]\n",
    "y_test = y[split:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3693108a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T11:58:17.177543Z",
     "iopub.status.busy": "2025-07-04T11:58:17.177257Z",
     "iopub.status.idle": "2025-07-04T11:58:17.185613Z",
     "shell.execute_reply": "2025-07-04T11:58:17.184981Z"
    },
    "papermill": {
     "duration": 0.015805,
     "end_time": "2025-07-04T11:58:17.186786",
     "exception": false,
     "start_time": "2025-07-04T11:58:17.170981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "date=X_test['Date']\n",
    "adjclose=X_test['Close']\n",
    "X_train.drop(columns=['Date','Close'],inplace=True)\n",
    "X_test.drop(columns=['Date','Close'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "06882245",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T11:58:17.198779Z",
     "iopub.status.busy": "2025-07-04T11:58:17.198528Z",
     "iopub.status.idle": "2025-07-04T11:58:17.383204Z",
     "shell.execute_reply": "2025-07-04T11:58:17.382552Z"
    },
    "papermill": {
     "duration": 0.192261,
     "end_time": "2025-07-04T11:58:17.384646",
     "exception": false,
     "start_time": "2025-07-04T11:58:17.192385",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score,confusion_matrix,precision_score,f1_score,recall_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import MultinomialNB #(commented out, because Word2Vec uses negative values — not suitable)\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import (\n",
    "    RandomForestClassifier,\n",
    "    AdaBoostClassifier,\n",
    "    BaggingClassifier,\n",
    "    ExtraTreesClassifier,\n",
    "    GradientBoostingClassifier,\n",
    ")\n",
    "svc = SVC(kernel='sigmoid', gamma=1.0)  # Support Vector Classifier with sigmoid kernel\n",
    "knc = KNeighborsClassifier()            # KNN\n",
    "#mnb = MultinomialNB()                   non-count data\n",
    "dtc = DecisionTreeClassifier(max_depth=3)\n",
    "lrc = LogisticRegression(solver='liblinear', penalty='l1')\n",
    "rfc = RandomForestClassifier(n_estimators=50, random_state=2)\n",
    "abc = AdaBoostClassifier(n_estimators=50, random_state=2)\n",
    "bc = BaggingClassifier(n_estimators=50, random_state=2)\n",
    "etc = ExtraTreesClassifier(n_estimators=50, random_state=2)\n",
    "gbdt = GradientBoostingClassifier(n_estimators=50, random_state=2)\n",
    "\n",
    "clfs = {\n",
    "    'SVC' : svc,\n",
    "    'KN' : knc,\n",
    "    'DT': dtc,\n",
    "    'LR': lrc,\n",
    "    'RF': rfc,\n",
    "    'AdaBoost': abc,\n",
    "    'BgC': bc,\n",
    "    'ETC': etc,\n",
    "    'GBDT':gbdt,\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3e491136",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T11:58:17.396762Z",
     "iopub.status.busy": "2025-07-04T11:58:17.396495Z",
     "iopub.status.idle": "2025-07-04T11:58:55.268884Z",
     "shell.execute_reply": "2025-07-04T11:58:55.268024Z"
    },
    "papermill": {
     "duration": 37.886541,
     "end_time": "2025-07-04T11:58:55.276806",
     "exception": false,
     "start_time": "2025-07-04T11:58:17.390265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For SVC\n",
      "Recall: 1.0\n",
      "Precision: 0.5268542199488491\n",
      "F1-score: 0.6901172529313232\n",
      "Accuracy: 0.5268542199488491\n",
      "Confusion Matrix:\n",
      "[[  0 370]\n",
      " [  0 412]]\n",
      "************************\n",
      "For KN\n",
      "Recall: 0.5412621359223301\n",
      "Precision: 0.530952380952381\n",
      "F1-score: 0.5360576923076923\n",
      "Accuracy: 0.5063938618925832\n",
      "Confusion Matrix:\n",
      "[[173 197]\n",
      " [189 223]]\n",
      "************************\n",
      "For DT\n",
      "Recall: 0.8956310679611651\n",
      "Precision: 0.5263908701854494\n",
      "F1-score: 0.6630727762803235\n",
      "Accuracy: 0.520460358056266\n",
      "Confusion Matrix:\n",
      "[[ 38 332]\n",
      " [ 43 369]]\n",
      "************************\n",
      "For LR\n",
      "Recall: 0.8349514563106796\n",
      "Precision: 0.5300462249614792\n",
      "F1-score: 0.648444863336475\n",
      "Accuracy: 0.5230179028132992\n",
      "Confusion Matrix:\n",
      "[[ 65 305]\n",
      " [ 68 344]]\n",
      "************************\n",
      "For RF\n",
      "Recall: 0.5169902912621359\n",
      "Precision: 0.5246305418719212\n",
      "F1-score: 0.5207823960880196\n",
      "Accuracy: 0.49872122762148335\n",
      "Confusion Matrix:\n",
      "[[177 193]\n",
      " [199 213]]\n",
      "************************\n",
      "For AdaBoost\n",
      "Recall: 0.5485436893203883\n",
      "Precision: 0.5330188679245284\n",
      "F1-score: 0.5406698564593301\n",
      "Accuracy: 0.5089514066496164\n",
      "Confusion Matrix:\n",
      "[[172 198]\n",
      " [186 226]]\n",
      "************************\n",
      "For BgC\n",
      "Recall: 0.5072815533980582\n",
      "Precision: 0.5318066157760815\n",
      "F1-score: 0.5192546583850932\n",
      "Accuracy: 0.5051150895140665\n",
      "Confusion Matrix:\n",
      "[[186 184]\n",
      " [203 209]]\n",
      "************************\n",
      "For ETC\n",
      "Recall: 0.5364077669902912\n",
      "Precision: 0.5299760191846523\n",
      "F1-score: 0.5331724969843186\n",
      "Accuracy: 0.5051150895140665\n",
      "Confusion Matrix:\n",
      "[[174 196]\n",
      " [191 221]]\n",
      "************************\n",
      "For GBDT\n",
      "Recall: 0.5776699029126213\n",
      "Precision: 0.5129310344827587\n",
      "F1-score: 0.54337899543379\n",
      "Accuracy: 0.4884910485933504\n",
      "Confusion Matrix:\n",
      "[[144 226]\n",
      " [174 238]]\n",
      "************************\n",
      "                   Classifier    Recall  Precision  F1-score  Accuracy  \\\n",
      "0                         SVC  1.000000   0.526854  0.690117  0.526854   \n",
      "1        KNeighborsClassifier  0.541262   0.530952  0.536058  0.506394   \n",
      "2      DecisionTreeClassifier  0.895631   0.526391  0.663073  0.520460   \n",
      "3          LogisticRegression  0.834951   0.530046  0.648445  0.523018   \n",
      "4      RandomForestClassifier  0.516990   0.524631  0.520782  0.498721   \n",
      "5          AdaBoostClassifier  0.548544   0.533019  0.540670  0.508951   \n",
      "6           BaggingClassifier  0.507282   0.531807  0.519255  0.505115   \n",
      "7        ExtraTreesClassifier  0.536408   0.529976  0.533172  0.505115   \n",
      "8  GradientBoostingClassifier  0.577670   0.512931  0.543379  0.488491   \n",
      "\n",
      "           Confusion Matrix  \n",
      "0      [[0, 370], [0, 412]]  \n",
      "1  [[173, 197], [189, 223]]  \n",
      "2    [[38, 332], [43, 369]]  \n",
      "3    [[65, 305], [68, 344]]  \n",
      "4  [[177, 193], [199, 213]]  \n",
      "5  [[172, 198], [186, 226]]  \n",
      "6  [[186, 184], [203, 209]]  \n",
      "7  [[174, 196], [191, 221]]  \n",
      "8  [[144, 226], [174, 238]]  \n"
     ]
    }
   ],
   "source": [
    "def train_classifier(clf, X_train, y_train, X_test, y_test):\n",
    "    # Train the classifier\n",
    "    clf.fit(X_train, y_train)\n",
    "\n",
    "    # Make predictions on the test set\n",
    "    y_pred = clf.predict(X_test)\n",
    "\n",
    "    # Calculate evaluation metrics\n",
    "    recall = recall_score(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred)\n",
    "    f1score = f1_score(y_test, y_pred)\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "    # Calculate the confusion matrix\n",
    "    conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "    # Return a dictionary of results including the confusion matrix\n",
    "    return {\n",
    "        'Classifier': clf.__class__.__name__,\n",
    "        'Recall': recall,\n",
    "        'Precision': precision,\n",
    "        'F1-score': f1score,\n",
    "        'Accuracy': accuracy,\n",
    "        'Confusion Matrix': conf_matrix\n",
    "    }\n",
    "\n",
    "\n",
    "# List to store results\n",
    "results = []\n",
    "\n",
    "# Iterate through classifiers, train, evaluate, and store results\n",
    "for name, clf in clfs.items():\n",
    "    # Train and evaluate the classifier\n",
    "    result = train_classifier(clf, X_train, y_train, X_test, y_test)\n",
    "    results.append(result)\n",
    "\n",
    "    # Print the results for the current classifier\n",
    "    print(f\"For {name}\")\n",
    "    print(f\"Recall: {result['Recall']}\")\n",
    "    print(f\"Precision: {result['Precision']}\")\n",
    "    print(f\"F1-score: {result['F1-score']}\")\n",
    "    print(f\"Accuracy: {result['Accuracy']}\")\n",
    "    print(\"Confusion Matrix:\")\n",
    "    print(result['Confusion Matrix'])\n",
    "    print(\"************************\")\n",
    "\n",
    "# Create a DataFrame from the results list\n",
    "df = pd.DataFrame(results)\n",
    "\n",
    "# Display the DataFrame\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7d8b3617",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T11:58:55.289885Z",
     "iopub.status.busy": "2025-07-04T11:58:55.289608Z",
     "iopub.status.idle": "2025-07-04T11:58:55.293248Z",
     "shell.execute_reply": "2025-07-04T11:58:55.292659Z"
    },
    "papermill": {
     "duration": 0.011583,
     "end_time": "2025-07-04T11:58:55.294487",
     "exception": false,
     "start_time": "2025-07-04T11:58:55.282904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV,GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0c8555be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T11:58:55.307809Z",
     "iopub.status.busy": "2025-07-04T11:58:55.307131Z",
     "iopub.status.idle": "2025-07-04T12:18:40.147481Z",
     "shell.execute_reply": "2025-07-04T12:18:40.146529Z"
    },
    "papermill": {
     "duration": 1184.855788,
     "end_time": "2025-07-04T12:18:40.156293",
     "exception": false,
     "start_time": "2025-07-04T11:58:55.300505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 100 candidates, totalling 500 fits\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=400; total time=   6.4s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=400; total time=  14.6s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=  11.8s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=  10.4s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   5.1s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   4.5s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   3.6s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   3.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   9.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  20.8s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   5.4s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   4.1s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=  20.0s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=  21.0s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   6.8s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  25.6s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=   6.2s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=   6.0s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   2.9s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   6.8s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   5.7s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=400; total time=   6.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   1.7s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   1.6s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  17.5s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=400; total time=   8.4s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   2.5s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   2.6s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   2.5s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   1.3s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   2.7s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   2.8s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=  11.5s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=400; total time=   5.6s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=400; total time=   6.1s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=   6.3s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  13.8s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  15.3s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  21.4s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   5.2s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   5.0s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   8.5s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  13.4s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  12.8s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=   8.7s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=   7.4s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=   5.4s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=   5.4s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   8.1s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   2.5s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   2.5s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  13.4s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   4.9s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   4.2s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=500; total time=  14.8s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   5.2s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   4.2s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=   8.0s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=  14.5s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  17.5s[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=400; total time=   6.2s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=400; total time=  14.5s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=  10.9s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   8.6s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=   7.1s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   5.6s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   3.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=  11.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=  10.8s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  18.5s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   4.3s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=  22.1s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=  12.4s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=  10.6s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   7.1s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  22.2s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=   5.9s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   3.1s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   3.1s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   3.5s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   5.6s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   6.1s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=400; total time=   5.9s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  15.4s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=400; total time=  10.7s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=400; total time=  10.2s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   2.9s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=  12.6s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=400; total time=   6.0s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=400; total time=   5.6s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=   6.1s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  15.5s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   5.8s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   5.5s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  27.0s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   4.1s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   9.6s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   8.4s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  11.8s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   2.6s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   2.6s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=   9.3s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=   7.7s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=   7.2s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=   5.1s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   8.1s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   2.5s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   2.4s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  15.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   5.3s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   5.0s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=500; total time=  13.8s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   5.0s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   4.8s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=   6.8s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=  13.0s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=  14.1s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  13.2s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  14.5s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   4.8s[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=400; total time=   6.6s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=400; total time=  13.9s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=400; total time=  15.2s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=   7.4s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=   7.4s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   5.4s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   3.8s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=   9.5s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  22.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   6.1s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   5.1s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=  17.3s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=  10.9s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=   9.0s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   7.2s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  26.9s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=   6.5s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=   6.4s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=100; total time=   3.0s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   6.7s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=400; total time=   6.4s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=400; total time=   6.5s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  13.1s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  16.2s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   2.6s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   2.6s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   1.3s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   2.7s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=  13.0s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=400; total time=   6.2s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=   7.2s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=   7.6s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  13.0s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   6.2s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   6.2s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  21.5s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   4.8s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   4.1s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=  10.3s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=  10.1s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  11.4s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   2.6s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=   8.7s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=   8.5s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=   7.5s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   9.5s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=  10.1s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  14.1s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   4.1s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=500; total time=  14.3s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=500; total time=  15.5s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=   6.9s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=  11.4s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  15.8s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  16.0s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  14.6s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   4.6s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   4.5s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   6.7s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  15.3s[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=400; total time=   6.1s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=400; total time=   6.5s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=400; total time=  14.0s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   8.7s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=   7.3s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=   7.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=200; total time=   4.5s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   3.4s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=200; total time=  11.9s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  17.9s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  21.8s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=  17.9s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=400; total time=   8.9s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   7.0s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   6.7s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  22.9s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  25.9s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=400; total time=   6.7s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   1.6s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   1.6s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   1.7s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=  13.2s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=400; total time=  10.3s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=400; total time=   8.5s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   1.3s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   1.2s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=100; total time=   1.3s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   2.7s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=  11.1s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=400; total time=  11.8s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=300; total time=   8.2s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=  16.9s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   5.7s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  24.3s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  25.1s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  13.8s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   2.6s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   2.5s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=   8.8s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=300; total time=  10.1s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=   5.4s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=   5.1s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=  10.7s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=200; total time=   2.4s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  14.1s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  14.3s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=500; total time=  14.5s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   4.2s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=   7.6s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=   7.8s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=  12.3s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=300; total time=  13.4s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  14.5s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  15.2s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   4.7s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   7.7s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   8.2s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  14.1s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=   8.4s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=  11.3s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   5.0s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   4.6s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   6.7s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  14.8s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  14.4s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=  12.3s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   5.8s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   5.5s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  14.0s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   3.6s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   3.7s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=  26.2s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=400; total time=  22.5s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   4.9s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   4.0s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  12.6s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  12.5s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   1.5s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   1.5s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   6.5s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   8.1s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   6.5s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  14.1s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=500; total time=  27.1s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=  28.6s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   5.7s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   4.5s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   9.5s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   8.2s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   3.1s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   4.3s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   3.4s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=500; total time=  28.5s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   3.5s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   8.7s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   9.1s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=  12.2s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=400; total time=  15.1s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  13.5s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  13.0s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  14.4s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   2.9s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   2.7s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   2.9s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   3.5s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   9.1s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   7.3s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   6.4s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   8.5s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   2.9s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=  10.4s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=500; total time=  13.8s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=500; total time=  14.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=  13.4s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=   9.5s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  22.7s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   3.3s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   3.3s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   3.1s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  15.0s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   5.7s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   4.9s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   4.8s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   4.5s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=300; total time=   8.6s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  14.7s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=   8.7s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=   8.3s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=  11.2s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   6.0s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   6.0s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  14.1s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   4.2s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=  24.1s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=400; total time=  20.0s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=400; total time=  16.2s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  13.0s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   8.4s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   7.9s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   6.9s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   6.9s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  14.7s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  16.1s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=500; total time=  20.3s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=  22.9s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   5.1s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   4.5s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   5.4s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   8.8s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   3.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   2.9s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   5.6s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   3.6s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   3.4s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=500; total time=  21.8s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=500; total time=  27.0s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=  11.1s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=400; total time=  13.8s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=400; total time=  14.1s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  12.5s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  11.8s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   4.4s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   2.3s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   3.2s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   3.6s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   3.6s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   8.5s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   6.5s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=  10.0s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=  10.4s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   9.1s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=500; total time=  12.9s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=  12.1s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=  11.3s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=   9.3s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  28.9s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   3.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   3.5s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   3.3s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=   9.3s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=300; total time=   9.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=  11.3s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=200; total time=   5.6s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  14.7s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  16.1s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=  20.5s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=400; total time=  16.8s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=400; total time=  20.7s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  11.6s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   6.5s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   1.6s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=100; total time=   1.4s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   7.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   8.9s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   7.5s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  14.1s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=500; total time=  21.1s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=  26.4s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=  27.6s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   9.0s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   4.5s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   3.6s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=100; total time=   3.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=500; total time=  22.7s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   3.7s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   3.7s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   8.4s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   9.3s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=  11.1s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=400; total time=  14.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  12.2s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  10.8s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  12.1s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   4.4s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   5.2s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   3.0s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   3.1s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   3.5s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   8.4s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   7.1s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=   6.2s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   8.5s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   2.7s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   3.1s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   8.8s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=500; total time=  14.2s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=  13.5s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=   9.7s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=   9.3s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  23.1s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   3.2s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   3.1s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   3.3s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=5, n_estimators=200; total time=   3.1s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=   7.8s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=   8.4s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  11.7s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=   8.2s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=  15.7sBest Parameters: {'n_estimators': 500, 'min_samples_split': 10, 'min_samples_leaf': 4, 'max_features': 'sqrt', 'max_depth': 50, 'bootstrap': True}\n",
      "Best Cross-Validation Score: 0.5134517537257264\n",
      "Accuracy: 0.51\n",
      "Precision: 0.53\n",
      "Recall: 0.61\n",
      "F1-score: 0.57\n",
      "[[152 218]\n",
      " [162 250]]\n"
     ]
    }
   ],
   "source": [
    "# RandomForest\n",
    "param_dist = {\n",
    "    'n_estimators': [100, 200, 300, 400, 500],\n",
    "    'max_features': ['sqrt', 'log2'],\n",
    "    'max_depth': [10, 20, 30, 40, 50, None],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4],\n",
    "    'bootstrap': [True, False]\n",
    "}\n",
    "\n",
    "rf = RandomForestClassifier()\n",
    "\n",
    "random_search = RandomizedSearchCV(\n",
    "    estimator=rf,\n",
    "    param_distributions=param_dist,\n",
    "    n_iter=100,  # Number of parameter settings that are sampled\n",
    "    cv=5,  # 5-fold cross-validation\n",
    "    verbose=2,\n",
    "    random_state=42,\n",
    "    n_jobs=-1  # Use all available cores\n",
    ")\n",
    "random_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best parameters and best cross-validation score\n",
    "best_params = random_search.best_params_\n",
    "best_cv_score = random_search.best_score_\n",
    "\n",
    "print(f\"Best Parameters: {best_params}\")\n",
    "print(f\"Best Cross-Validation Score: {best_cv_score}\")\n",
    "\n",
    "best_rf = random_search.best_estimator_\n",
    "y_pred = best_rf.predict(X_test)\n",
    "\n",
    "# Calculate evaluation metrics\n",
    "recall = recall_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "f1score = f1_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "# Calculate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"Accuracy: {:.2f}\".format(accuracy))\n",
    "print(\"Precision: {:.2f}\".format(precision))\n",
    "print(\"Recall: {:.2f}\".format(recall))\n",
    "print(\"F1-score: {:.2f}\".format(f1score))\n",
    "print(conf_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c3dc84aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T12:18:40.172455Z",
     "iopub.status.busy": "2025-07-04T12:18:40.171689Z",
     "iopub.status.idle": "2025-07-04T12:20:02.662272Z",
     "shell.execute_reply": "2025-07-04T12:20:02.661549Z"
    },
    "papermill": {
     "duration": 82.507425,
     "end_time": "2025-07-04T12:20:02.671041",
     "exception": false,
     "start_time": "2025-07-04T12:18:40.163616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 50 candidates, totalling 250 fits\n",
      "\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=  11.3s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  15.1s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   3.6s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   4.1s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=  20.7s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=  25.6s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   4.8s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   4.1s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=sqrt, min_samples_leaf=4, min_samples_split=2, n_estimators=100; total time=   4.8s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=400; total time=  12.5s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   7.4s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   6.7s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   8.7s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   8.1s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=500; total time=  15.4s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=500; total time=  24.3s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=500; total time=  26.0s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=1, min_samples_split=5, n_estimators=500; total time=  22.0s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=300; total time=   9.2s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   3.0s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   2.8s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   5.1s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=100; total time=   5.1s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=500; total time=  26.0s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   3.6s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   3.5s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   9.4s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=  12.2s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=  11.8s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=sqrt, min_samples_leaf=4, min_samples_split=5, n_estimators=400; total time=  14.2s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=500; total time=  10.5s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  14.8s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   5.8s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   5.7s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   2.6s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=100; total time=   2.3s\n",
      "[CV] END bootstrap=True, max_depth=30, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=200; total time=   2.9s\n",
      "[CV] END bootstrap=False, max_depth=10, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=   3.7s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   8.8s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=2, min_samples_split=2, n_estimators=300; total time=   9.5s\n",
      "[CV] END bootstrap=False, max_depth=30, max_features=sqrt, min_samples_leaf=2, min_samples_split=10, n_estimators=200; total time=  10.8s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   3.0s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=200; total time=   3.1s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   9.6s\n",
      "[CV] END bootstrap=False, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=  10.0s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=sqrt, min_samples_leaf=4, min_samples_split=10, n_estimators=500; total time=  13.1s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=  11.2s\n",
      "[CV] END bootstrap=True, max_depth=10, max_features=sqrt, min_samples_leaf=2, min_samples_split=5, n_estimators=400; total time=   9.6s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  26.2s\n",
      "[CV] END bootstrap=False, max_depth=50, max_features=sqrt, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  27.3s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   2.0s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  14.8s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=   6.4s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=   7.7s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=  14.1s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   5.6s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   5.9s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   5.5s\n",
      "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.6s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.8s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.5sBest Parameters: {'C': 10, 'gamma': 1, 'kernel': 'linear'}\n",
      "Best Cross-Validation Score: 0.5211259972903808\n",
      "Accuracy: 0.53\n",
      "Precision: 0.53\n",
      "Recall: 0.93\n",
      "F1-score: 0.68\n",
      "[[ 34 336]\n",
      " [ 29 383]]\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.54      0.09      0.16       370\n",
      "           1       0.53      0.93      0.68       412\n",
      "\n",
      "    accuracy                           0.53       782\n",
      "   macro avg       0.54      0.51      0.42       782\n",
      "weighted avg       0.54      0.53      0.43       782\n",
      "\n"
     ]
    }
   ],
   "source": [
    "param_grid = {\n",
    "    'C': [0.1, 1, 10, 100, 1000],\n",
    "    'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n",
    "    'kernel': ['linear', 'rbf']\n",
    "}\n",
    "\n",
    "# Initialize the SVC\n",
    "svc = SVC()\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=svc,\n",
    "    param_grid=param_grid,\n",
    "    cv=5,  # 5-fold cross-validation\n",
    "    verbose=2,\n",
    "    n_jobs=-1  # Use all available cores\n",
    ")\n",
    "\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "best_params = grid_search.best_params_\n",
    "best_cv_score = grid_search.best_score_\n",
    "print(f\"Best Parameters: {best_params}\")\n",
    "print(f\"Best Cross-Validation Score: {best_cv_score}\")\n",
    "\n",
    "# Apply the best estimator to the test data\n",
    "best_svc1 = grid_search.best_estimator_\n",
    "y_pred = best_svc1.predict(X_test)\n",
    "\n",
    "# Calculate evaluation metrics\n",
    "recall = recall_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "f1score = f1_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "# Calculate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"Accuracy: {:.2f}\".format(accuracy))\n",
    "print(\"Precision: {:.2f}\".format(precision))\n",
    "print(\"Recall: {:.2f}\".format(recall))\n",
    "print(\"F1-score: {:.2f}\".format(f1score))\n",
    "print(conf_matrix)\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a98d0fbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T12:20:02.686538Z",
     "iopub.status.busy": "2025-07-04T12:20:02.686259Z",
     "iopub.status.idle": "2025-07-04T12:20:22.607242Z",
     "shell.execute_reply": "2025-07-04T12:20:22.606303Z"
    },
    "papermill": {
     "duration": 19.930359,
     "end_time": "2025-07-04T12:20:22.608658",
     "exception": false,
     "start_time": "2025-07-04T12:20:02.678299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 25 candidates, totalling 125 fits\n",
      "\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=   7.4s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=   7.4s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  13.3s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=   7.3s\n",
      "[CV] END bootstrap=False, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=300; total time=   6.4s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=  14.9s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   5.9s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   5.7s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   5.5s\n",
      "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.6s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.7s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.5s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.6s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.7s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.5s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.6s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.6s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.8s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.8s\n",
      "[CV] END ....................C=0.1, gamma=0.0001, kernel=rbf; total time=   0.8s\n",
      "[CV] END ....................C=0.1, gamma=0.0001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.6s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.7s\n",
      "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.6s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.7s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.7s\n",
      "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.6s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.7s\n",
      "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.6s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.8s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ...................C=1, gamma=0.0001, kernel=linear; total time=   0.6s\n",
      "[CV] END ......................C=1, gamma=0.0001, kernel=rbf; total time=   0.7s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.6s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.7s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.7s\n",
      "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.6s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.7s\n",
      "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.8s\n",
      "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.7s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   1.0s\n",
      "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.5s\n",
      "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.6s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ..................C=10, gamma=0.0001, kernel=linear; total time=   0.7s\n",
      "[CV] END ..................C=10, gamma=0.0001, kernel=linear; total time=   0.7s\n",
      "[CV] END .....................C=10, gamma=0.0001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   1.0s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   1.1s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   1.1s\n",
      "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   1.0s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.8s\n",
      "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   1.2s\n",
      "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   1.0s\n",
      "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   1.3s\n",
      "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   1.0s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.7s\n",
      "[CV] END .................C=100, gamma=0.0001, kernel=linear; total time=   1.1s\n",
      "[CV] END ....................C=100, gamma=0.0001, kernel=rbf; total time=   0.7s\n",
      "[CV] END .....................C=1000, gamma=1, kernel=linear; total time=   5.0s\n",
      "[CV] END .....................C=1000, gamma=1, kernel=linear; total time=   3.8s\n",
      "[CV] END ........................C=1000, gamma=1, kernel=rbf; total time=   3.0s\n",
      "[CV] END ...................C=1000, gamma=0.1, kernel=linear; total time=   6.5s\n",
      "[CV] END ......................C=1000, gamma=0.1, kernel=rbf; total time=   1.1s\n",
      "[CV] END ..................C=1000, gamma=0.01, kernel=linear; total time=   5.0s\n",
      "[CV] END ..................C=1000, gamma=0.01, kernel=linear; total time=   3.6s\n",
      "[CV] END .................C=1000, gamma=0.001, kernel=linear; total time=   5.8s\n",
      "[CV] END ....................C=1000, gamma=0.001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ................C=1000, gamma=0.0001, kernel=linear; total time=   5.0s\n",
      "[CV] END ...................C=1000, gamma=0.0001, kernel=rbf; total time=   0.6s\n",
      "[CV] END ...................C=1000, gamma=0.0001, kernel=rbf; total time=   0.6s\n",
      "[CV] END ...................C=1000, gamma=0.0001, kernel=rbf; total time=   0.6s\n",
      "[CV] END ...................C=1000, gamma=0.0001, kernel=rbf; total time=   0.5s\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ................C=0.1, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ................C=0.1, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.8s\n",
      "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.5s\n",
      "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.5s\n",
      "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.5s\n",
      "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ..................C=1, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ..................C=1, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .................C=10, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END bootstrap=True, max_depth=50, max_features=log2, min_samples_leaf=4, min_samples_split=2, n_estimators=500; total time=   7.1s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   1.4s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   1.6s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   1.7s\n",
      "[CV] END bootstrap=True, max_depth=40, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=100; total time=   1.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  11.6s\n",
      "[CV] END bootstrap=False, max_depth=None, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=500; total time=  13.7s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=  16.2s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   6.0s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=200; total time=   6.1s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   5.2s\n",
      "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.6s\n",
      "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.6s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.7s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.6s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.7s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.6s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.5s\n",
      "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.6s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.8s\n",
      "[CV] END .................C=0.1, gamma=0.0001, kernel=linear; total time=   0.6s\n",
      "[CV] END .................C=0.1, gamma=0.0001, kernel=linear; total time=   0.7s\n",
      "[CV] END ....................C=0.1, gamma=0.0001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.6s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.7s\n",
      "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.6s\n",
      "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.6s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.7s\n",
      "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.6s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.7s\n",
      "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.7s\n",
      "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.7s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ...................C=1, gamma=0.0001, kernel=linear; total time=   0.6s\n",
      "[CV] END ......................C=1, gamma=0.0001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ......................C=1, gamma=0.0001, kernel=rbf; total time=   0.7s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.7s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.7s\n",
      "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.7s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.8s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.7s\n",
      "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.7s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.7s\n",
      "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   1.1s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   1.0s\n",
      "[CV] END ..................C=10, gamma=0.0001, kernel=linear; total time=   0.8s\n",
      "[CV] END .....................C=10, gamma=0.0001, kernel=rbf; total time=   0.8s\n",
      "[CV] END .....................C=10, gamma=0.0001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   1.0s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   1.0s\n",
      "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   1.5s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.7s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.8s\n",
      "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   1.0s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   1.1s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.7s\n",
      "[CV] END .................C=100, gamma=0.0001, kernel=linear; total time=   1.3s\n",
      "[CV] END .................C=100, gamma=0.0001, kernel=linear; total time=   1.0s\n",
      "[CV] END ....................C=100, gamma=0.0001, kernel=rbf; total time=   0.8s\n",
      "[CV] END .....................C=1000, gamma=1, kernel=linear; total time=   6.0s\n",
      "[CV] END ........................C=1000, gamma=1, kernel=rbf; total time=   3.1s\n",
      "[CV] END ...................C=1000, gamma=0.1, kernel=linear; total time=   5.1s\n",
      "[CV] END ...................C=1000, gamma=0.1, kernel=linear; total time=   4.6s\n",
      "[CV] END ..................C=1000, gamma=0.01, kernel=linear; total time=   5.2s\n",
      "[CV] END .....................C=1000, gamma=0.01, kernel=rbf; total time=   0.7s\n",
      "[CV] END .....................C=1000, gamma=0.01, kernel=rbf; total time=   0.7s\n",
      "[CV] END .....................C=1000, gamma=0.01, kernel=rbf; total time=   0.7s\n",
      "[CV] END .....................C=1000, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END .................C=1000, gamma=0.001, kernel=linear; total time=   7.2s\n",
      "[CV] END ................C=1000, gamma=0.0001, kernel=linear; total time=   5.1s\n",
      "[CV] END ................C=1000, gamma=0.0001, kernel=linear; total time=   3.1s\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ................C=0.1, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.8s\n",
      "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.8s\n",
      "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.9s\n",
      "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ..................C=1, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END .................C=10, gamma=0.0001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END .................C=10, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.7sBest Parameters: {'C': 0.1, 'gamma': 1, 'kernel': 'sigmoid'}\n",
      "Best Cross-Validation Score: 0.5178277886497065\n",
      "Accuracy: 0.53\n",
      "Precision: 0.53\n",
      "Recall: 1.00\n",
      "F1-score: 0.69\n",
      "[[  0 370]\n",
      " [  0 412]]\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00       370\n",
      "           1       0.53      1.00      0.69       412\n",
      "\n",
      "    accuracy                           0.53       782\n",
      "   macro avg       0.26      0.50      0.35       782\n",
      "weighted avg       0.28      0.53      0.36       782\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "param_grid = {\n",
    "    'C': [0.1, 1, 10, 100, 1000],\n",
    "    'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n",
    "    'kernel': ['sigmoid']\n",
    "}\n",
    "\n",
    "# Initialize the SVC\n",
    "svc = SVC()\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=svc,\n",
    "    param_grid=param_grid,\n",
    "    cv=5,  # 5-fold cross-validation\n",
    "    verbose=2,\n",
    "    n_jobs=-1  # Use all available cores\n",
    ")\n",
    "\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "best_params = grid_search.best_params_\n",
    "best_cv_score = grid_search.best_score_\n",
    "print(f\"Best Parameters: {best_params}\")\n",
    "print(f\"Best Cross-Validation Score: {best_cv_score}\")\n",
    "\n",
    "# Apply the best estimator to the test data\n",
    "best_svc1 = grid_search.best_estimator_\n",
    "y_pred = best_svc1.predict(X_test)\n",
    "\n",
    "# Calculate evaluation metrics\n",
    "recall = recall_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "f1score = f1_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "# Calculate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"Accuracy: {:.2f}\".format(accuracy))\n",
    "print(\"Precision: {:.2f}\".format(precision))\n",
    "print(\"Recall: {:.2f}\".format(recall))\n",
    "print(\"F1-score: {:.2f}\".format(f1score))\n",
    "print(conf_matrix)\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "de6248df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T12:20:22.625791Z",
     "iopub.status.busy": "2025-07-04T12:20:22.625336Z",
     "iopub.status.idle": "2025-07-04T14:18:53.090266Z",
     "shell.execute_reply": "2025-07-04T14:18:53.087482Z"
    },
    "papermill": {
     "duration": 7110.484268,
     "end_time": "2025-07-04T14:18:53.101063",
     "exception": false,
     "start_time": "2025-07-04T12:20:22.616795",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 25 candidates, totalling 125 fits\n",
      "\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.6s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.7s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.6s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.6s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.7s\n",
      "[CV] END .................C=0.1, gamma=0.0001, kernel=linear; total time=   0.6s\n",
      "[CV] END ....................C=0.1, gamma=0.0001, kernel=rbf; total time=   0.8s\n",
      "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.6s\n",
      "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.6s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.7s\n",
      "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.6s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.8s\n",
      "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.6s\n",
      "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.6s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.6s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.8s\n",
      "[CV] END ...................C=1, gamma=0.0001, kernel=linear; total time=   0.6s\n",
      "[CV] END ...................C=1, gamma=0.0001, kernel=linear; total time=   0.6s\n",
      "[CV] END ......................C=1, gamma=0.0001, kernel=rbf; total time=   0.7s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.7s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.8s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.7s\n",
      "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.7s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.7s\n",
      "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.7s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.7s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   1.0s\n",
      "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   1.1s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.8s\n",
      "[CV] END ..................C=10, gamma=0.0001, kernel=linear; total time=   0.6s\n",
      "[CV] END .....................C=10, gamma=0.0001, kernel=rbf; total time=   0.8s\n",
      "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   1.6s\n",
      "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   1.0s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   1.0s\n",
      "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   1.0s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.8s\n",
      "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   1.5s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.7s\n",
      "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   1.1s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.7s\n",
      "[CV] END .................C=100, gamma=0.0001, kernel=linear; total time=   1.6s\n",
      "[CV] END ....................C=100, gamma=0.0001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ....................C=100, gamma=0.0001, kernel=rbf; total time=   0.8s\n",
      "[CV] END .....................C=1000, gamma=1, kernel=linear; total time=   7.2s\n",
      "[CV] END ........................C=1000, gamma=1, kernel=rbf; total time=   3.2s\n",
      "[CV] END ...................C=1000, gamma=0.1, kernel=linear; total time=   5.0s\n",
      "[CV] END ......................C=1000, gamma=0.1, kernel=rbf; total time=   1.2s\n",
      "[CV] END ......................C=1000, gamma=0.1, kernel=rbf; total time=   1.1s\n",
      "[CV] END ......................C=1000, gamma=0.1, kernel=rbf; total time=   1.1s\n",
      "[CV] END ......................C=1000, gamma=0.1, kernel=rbf; total time=   1.1s\n",
      "[CV] END ..................C=1000, gamma=0.01, kernel=linear; total time=   5.9s\n",
      "[CV] END .....................C=1000, gamma=0.01, kernel=rbf; total time=   0.7s\n",
      "[CV] END .................C=1000, gamma=0.001, kernel=linear; total time=   5.0s\n",
      "[CV] END ....................C=1000, gamma=0.001, kernel=rbf; total time=   0.6s\n",
      "[CV] END ....................C=1000, gamma=0.001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ....................C=1000, gamma=0.001, kernel=rbf; total time=   0.6s\n",
      "[CV] END ....................C=1000, gamma=0.001, kernel=rbf; total time=   0.8s\n",
      "[CV] END ................C=1000, gamma=0.0001, kernel=linear; total time=   7.2s\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ................C=0.1, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   1.0s\n",
      "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.8s\n",
      "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ..................C=1, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END .................C=10, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ................C=100, gamma=0.0001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ....................C=1000, gamma=1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ....................C=1000, gamma=1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ..................C=1000, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END .................C=1000, gamma=0.01, kernel=sigmoid; total time=   0.5s\n",
      "[CV] END .................C=1000, gamma=0.01, kernel=sigmoid; total time=   0.5s\n",
      "[CV] END ................C=1000, gamma=0.001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ...............C=1000, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   1.1s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.5s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.6s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.6s\n",
      "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.6s\n",
      "[CV] END ...................C=0.1, gamma=0.0001, kernel=poly; total time=   0.6s\n",
      "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   5.8s\n",
      "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.4s\n",
      "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.5s\n",
      "[CV] END bootstrap=True, max_depth=None, max_features=sqrt, min_samples_leaf=1, min_samples_split=10, n_estimators=500; total time=  15.3s\n",
      "[CV] END bootstrap=True, max_depth=20, max_features=log2, min_samples_leaf=4, min_samples_split=10, n_estimators=400; total time=   6.1s\n",
      "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.6s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.7s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.8s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.8s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.8s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.6s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.6s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.8s\n",
      "[CV] END .................C=0.1, gamma=0.0001, kernel=linear; total time=   0.6s\n",
      "[CV] END .................C=0.1, gamma=0.0001, kernel=linear; total time=   0.6s\n",
      "[CV] END ....................C=0.1, gamma=0.0001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.6s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.8s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.7s\n",
      "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.6s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.7s\n",
      "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.6s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.6s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ...................C=1, gamma=0.0001, kernel=linear; total time=   0.6s\n",
      "[CV] END ......................C=1, gamma=0.0001, kernel=rbf; total time=   0.8s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.9s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.8s\n",
      "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.9s\n",
      "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.7s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.8s\n",
      "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.6s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   1.4s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   1.0s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ..................C=10, gamma=0.0001, kernel=linear; total time=   0.7s\n",
      "[CV] END .....................C=10, gamma=0.0001, kernel=rbf; total time=   0.7s\n",
      "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   1.3s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   1.1s\n",
      "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   1.3s\n",
      "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   1.0s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.8s\n",
      "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   1.0s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.8s\n",
      "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   1.6s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.7s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.8s\n",
      "[CV] END .................C=100, gamma=0.0001, kernel=linear; total time=   1.1s\n",
      "[CV] END ....................C=100, gamma=0.0001, kernel=rbf; total time=   0.8s\n",
      "[CV] END .....................C=1000, gamma=1, kernel=linear; total time=   5.2s\n",
      "[CV] END ........................C=1000, gamma=1, kernel=rbf; total time=   3.1s\n",
      "[CV] END ........................C=1000, gamma=1, kernel=rbf; total time=   3.3s\n",
      "[CV] END ...................C=1000, gamma=0.1, kernel=linear; total time=   8.0s\n",
      "[CV] END ..................C=1000, gamma=0.01, kernel=linear; total time=   7.1s\n",
      "[CV] END .................C=1000, gamma=0.001, kernel=linear; total time=   5.1s\n",
      "[CV] END .................C=1000, gamma=0.001, kernel=linear; total time=   3.7s\n",
      "[CV] END ................C=1000, gamma=0.0001, kernel=linear; total time=   5.9s\n",
      "[CV] END ...................C=1000, gamma=0.0001, kernel=rbf; total time=   0.7s\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ................C=0.1, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   0.9s\n",
      "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   0.9s\n",
      "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.9s\n",
      "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ..................C=1, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END .................C=10, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ................C=100, gamma=0.0001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ....................C=1000, gamma=1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ..................C=1000, gamma=0.1, kernel=sigmoid; total time=   0.3s\n",
      "[CV] END ..................C=1000, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END .................C=1000, gamma=0.01, kernel=sigmoid; total time=   0.5s\n",
      "[CV] END ................C=1000, gamma=0.001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ...............C=1000, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.9s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.8s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.6s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.6s\n",
      "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.6s\n",
      "[CV] END ...................C=0.1, gamma=0.0001, kernel=poly; total time=   0.6s\n",
      "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   3.8s\n",
      "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   2.6s\n",
      "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.6s\n",
      "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.6s\n",
      "[CV] END .....................C=1, gamma=0.0001, kernel=poly; total time=   0.6s\n",
      "[CV] END .........................C=10, gamma=1, kernel=poly; total time=  59.5s\n",
      "[CV] END ........................C=100, gamma=1, kernel=poly; total time= 6.9min\n",
      "[CV] END ........................C=100, gamma=1, kernel=poly; total time= 5.2min\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.8s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   1.0s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   1.4s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   1.0s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   0.6s\n",
      "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.4s\n",
      "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.5s\n",
      "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.5s\n",
      "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.4s\n",
      "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   0.5s\n",
      "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.4s\n",
      "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.4s\n",
      "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.7s\n",
      "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.6s\n",
      "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   0.7s\n",
      "[CV] END ...................C=100, gamma=0.0001, kernel=poly; total time=   0.6s\n",
      "[CV] END ...................C=100, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "[CV] END ...................C=100, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "[CV] END ...................C=100, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "[CV] END ...................C=100, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "[CV] END .......................C=1000, gamma=1, kernel=poly; total time=79.0min\n",
      "[CV] END .....................C=1000, gamma=0.1, kernel=poly; total time=   5.8s\n",
      "[CV] END .....................C=1000, gamma=0.1, kernel=poly; total time=   5.5s\n",
      "[CV] END .....................C=1000, gamma=0.1, kernel=poly; total time=   4.2s\n",
      "[CV] END .....................C=1000, gamma=0.1, kernel=poly; total time=   5.0s\n",
      "[CV] END .....................C=1000, gamma=0.1, kernel=poly; total time=   2.7s\n",
      "[CV] END ....................C=1000, gamma=0.01, kernel=poly; total time=   0.5s\n",
      "[CV] END ....................C=1000, gamma=0.01, kernel=poly; total time=   0.5s\n",
      "[CV] END ....................C=1000, gamma=0.01, kernel=poly; total time=   0.4s\n",
      "[CV] END ....................C=1000, gamma=0.01, kernel=poly; total time=   0.5s\n",
      "[CV] END ....................C=1000, gamma=0.01, kernel=poly; total time=   0.4s\n",
      "[CV] END ...................C=1000, gamma=0.001, kernel=poly; total time=   0.4s\n",
      "[CV] END ...................C=1000, gamma=0.001, kernel=poly; total time=   0.4s\n",
      "[CV] END ...................C=1000, gamma=0.001, kernel=poly; total time=   0.4s\n",
      "[CV] END ...................C=1000, gamma=0.001, kernel=poly; total time=   0.4s\n",
      "[CV] END ...................C=1000, gamma=0.001, kernel=poly; total time=   0.4s\n",
      "[CV] END ..................C=1000, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "[CV] END ..................C=1000, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "[CV] END ..................C=1000, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "[CV] END ..................C=1000, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "[CV] END ..................C=1000, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "\n",
      "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ................C=100, gamma=0.0001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ................C=100, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ....................C=1000, gamma=1, kernel=sigmoid; total time=   0.5s\n",
      "[CV] END ..................C=1000, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END .................C=1000, gamma=0.01, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ................C=1000, gamma=0.001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ...............C=1000, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ...............C=1000, gamma=0.0001, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   1.1s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.5s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.6s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.6s\n",
      "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.6s\n",
      "[CV] END ...................C=0.1, gamma=0.0001, kernel=poly; total time=   0.6s\n",
      "[CV] END ...................C=0.1, gamma=0.0001, kernel=poly; total time=   0.6s\n",
      "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   4.7s\n",
      "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.6s\n",
      "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.6s\n",
      "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.6s\n",
      "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.6s\n",
      "[CV] END .....................C=1, gamma=0.0001, kernel=poly; total time=   0.6s\n",
      "[CV] END .........................C=10, gamma=1, kernel=poly; total time=  43.3s\n",
      "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.5s\n",
      "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.5s\n",
      "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.5s\n",
      "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.5s\n",
      "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   0.5s\n",
      "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.4s\n",
      "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.4s\n",
      "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.4s\n",
      "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.5s\n",
      "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   0.4s\n",
      "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.4s\n",
      "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.4s\n",
      "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.4s\n",
      "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.4s\n",
      "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   0.4s\n",
      "[CV] END ....................C=10, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "[CV] END ....................C=10, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "[CV] END ....................C=10, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "[CV] END ....................C=10, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "[CV] END ....................C=10, gamma=0.0001, kernel=poly; total time=   0.4s\n",
      "[CV] END ........................C=100, gamma=1, kernel=poly; total time=12.7min\n",
      "[CV] END .......................C=1000, gamma=1, kernel=poly; total time=82.9min\n",
      "\n",
      "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ................C=100, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ....................C=1000, gamma=1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END ..................C=1000, gamma=0.1, kernel=sigmoid; total time=   0.4s\n",
      "[CV] END .................C=1000, gamma=0.01, kernel=sigmoid; total time=   0.5s\n",
      "[CV] END ................C=1000, gamma=0.001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ................C=1000, gamma=0.001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ...............C=1000, gamma=0.0001, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   1.4s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   0.6s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   0.6s\n",
      "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.6s\n",
      "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   0.6s\n",
      "[CV] END ...................C=0.1, gamma=0.0001, kernel=poly; total time=   0.6s\n",
      "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=   4.2s\n",
      "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.5s\n",
      "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.6s\n",
      "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   0.7s\n",
      "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   0.6s\n",
      "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.6s\n",
      "[CV] END .....................C=1, gamma=0.0001, kernel=poly; total time=   0.6s\n",
      "[CV] END .....................C=1, gamma=0.0001, kernel=poly; total time=   0.5s\n",
      "[CV] END .........................C=10, gamma=1, kernel=poly; total time=  41.5s\n",
      "[CV] END .........................C=10, gamma=1, kernel=poly; total time=  23.1s\n",
      "[CV] END ........................C=100, gamma=1, kernel=poly; total time=12.7min\n",
      "[CV] END .......................C=1000, gamma=1, kernel=poly; total time=84.9min\n",
      "Best Parameters: {'C': 0.1, 'gamma': 1, 'kernel': 'poly'}\n",
      "Best Cross-Validation Score: 0.5227773596266747\n",
      "Accuracy: 0.53\n",
      "Precision: 0.54\n",
      "Recall: 0.80\n",
      "F1-score: 0.64\n",
      "[[ 89 281]\n",
      " [ 83 329]]\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.52      0.24      0.33       370\n",
      "           1       0.54      0.80      0.64       412\n",
      "\n",
      "    accuracy                           0.53       782\n",
      "   macro avg       0.53      0.52      0.49       782\n",
      "weighted avg       0.53      0.53      0.49       782\n",
      "\n"
     ]
    }
   ],
   "source": [
    "param_grid = {\n",
    "    'C': [0.1, 1, 10, 100, 1000],\n",
    "    'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n",
    "    'kernel': ['poly']\n",
    "}\n",
    "\n",
    "# Initialize the SVC\n",
    "svc = SVC()\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=svc,\n",
    "    param_grid=param_grid,\n",
    "    cv=5,  # 5-fold cross-validation\n",
    "    verbose=2,\n",
    "    n_jobs=-1  # Use all available cores\n",
    ")\n",
    "\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "best_params = grid_search.best_params_\n",
    "best_cv_score = grid_search.best_score_\n",
    "print(f\"Best Parameters: {best_params}\")\n",
    "print(f\"Best Cross-Validation Score: {best_cv_score}\")\n",
    "\n",
    "# Apply the best estimator to the test data\n",
    "best_svc1 = grid_search.best_estimator_\n",
    "y_pred = best_svc1.predict(X_test)\n",
    "\n",
    "# Calculate evaluation metrics\n",
    "recall = recall_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "f1score = f1_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "# Calculate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"Accuracy: {:.2f}\".format(accuracy))\n",
    "print(\"Precision: {:.2f}\".format(precision))\n",
    "print(\"Recall: {:.2f}\".format(recall))\n",
    "print(\"F1-score: {:.2f}\".format(f1score))\n",
    "print(conf_matrix)\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7811703b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T14:18:53.122145Z",
     "iopub.status.busy": "2025-07-04T14:18:53.121656Z",
     "iopub.status.idle": "2025-07-04T14:18:58.830969Z",
     "shell.execute_reply": "2025-07-04T14:18:58.830150Z"
    },
    "papermill": {
     "duration": 5.722574,
     "end_time": "2025-07-04T14:18:58.832511",
     "exception": false,
     "start_time": "2025-07-04T14:18:53.109937",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 3 candidates, totalling 15 fits\n",
      "Best Parameters: {'C': 0.1, 'gamma': 1, 'kernel': 'poly'}\n",
      "Best Cross-Validation Score: 0.5227773596266747\n",
      "Accuracy: 0.53\n",
      "Precision: 0.54\n",
      "Recall: 0.80\n",
      "F1-score: 0.64\n",
      "[[ 89 281]\n",
      " [ 83 329]]\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.52      0.24      0.33       370\n",
      "           1       0.54      0.80      0.64       412\n",
      "\n",
      "    accuracy                           0.53       782\n",
      "   macro avg       0.53      0.52      0.49       782\n",
      "weighted avg       0.53      0.53      0.49       782\n",
      "\n"
     ]
    }
   ],
   "source": [
    "param_grid = [\n",
    "    {'C': [0.1], 'gamma': [1], 'kernel': ['sigmoid']},\n",
    "    {'C': [0.1], 'gamma': [1], 'kernel': ['poly']},\n",
    "    {'C': [10], 'gamma': [1], 'kernel': ['linear']}\n",
    "]\n",
    "\n",
    "# Initialize the SVC\n",
    "svc = SVC()\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=svc,\n",
    "    param_grid=param_grid,\n",
    "    cv=5,  # 5-fold cross-validation\n",
    "    verbose=2,\n",
    "    n_jobs=-1  # Use all available cores\n",
    ")\n",
    "\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "best_params = grid_search.best_params_\n",
    "best_cv_score = grid_search.best_score_\n",
    "print(f\"Best Parameters: {best_params}\")\n",
    "print(f\"Best Cross-Validation Score: {best_cv_score}\")\n",
    "\n",
    "# Apply the best estimator to the test data\n",
    "best_svc1 = grid_search.best_estimator_\n",
    "y_pred = best_svc1.predict(X_test)\n",
    "\n",
    "# Calculate evaluation metrics\n",
    "recall = recall_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "f1score = f1_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "# Calculate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"Accuracy: {:.2f}\".format(accuracy))\n",
    "print(\"Precision: {:.2f}\".format(precision))\n",
    "print(\"Recall: {:.2f}\".format(recall))\n",
    "print(\"F1-score: {:.2f}\".format(f1score))\n",
    "print(conf_matrix)\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "63f1d34d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T14:18:58.852553Z",
     "iopub.status.busy": "2025-07-04T14:18:58.852268Z",
     "iopub.status.idle": "2025-07-04T14:30:24.249484Z",
     "shell.execute_reply": "2025-07-04T14:30:24.248520Z"
    },
    "papermill": {
     "duration": 685.418789,
     "end_time": "2025-07-04T14:30:24.260703",
     "exception": false,
     "start_time": "2025-07-04T14:18:58.841914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 40 candidates, totalling 200 fits\n",
      "Best Parameters: {'algorithm': 'SAMME', 'learning_rate': 0.1, 'n_estimators': 100}\n",
      "Best Cross-Validation Score: 0.5233222941442119\n",
      "Accuracy: 0.53\n",
      "Precision: 0.53\n",
      "Recall: 1.00\n",
      "F1-score: 0.69\n",
      "[[  0 370]\n",
      " [  0 412]]\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00       370\n",
      "           1       0.53      1.00      0.69       412\n",
      "\n",
      "    accuracy                           0.53       782\n",
      "   macro avg       0.26      0.50      0.35       782\n",
      "weighted avg       0.28      0.53      0.36       782\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "# Initialize the AdaBoostClassifier\n",
    "ada = AdaBoostClassifier()\n",
    "\n",
    "param_grid = {\n",
    "    'n_estimators': [50, 100, 200, 300],\n",
    "    'learning_rate': [0.001, 0.01, 0.1, 1, 10],\n",
    "    'algorithm': ['SAMME', 'SAMME.R']\n",
    "}\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=ada,\n",
    "    param_grid=param_grid,\n",
    "    cv=5,  # 5-fold cross-validation\n",
    "    verbose=2,\n",
    "    n_jobs=-1  # Use all available cores\n",
    ")\n",
    "\n",
    "# Fit GridSearchCV\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best parameters and best cross-validation score\n",
    "best_params = grid_search.best_params_\n",
    "best_cv_score = grid_search.best_score_\n",
    "\n",
    "print(f\"Best Parameters: {best_params}\")\n",
    "print(f\"Best Cross-Validation Score: {best_cv_score}\")\n",
    "\n",
    "# Apply the best estimator to the test data\n",
    "best_ada = grid_search.best_estimator_\n",
    "y_pred = best_ada.predict(X_test)\n",
    "\n",
    "    # Calculate evaluation metrics\n",
    "recall = recall_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "f1score = f1_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "    # Calculate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"Accuracy: {:.2f}\".format(accuracy))\n",
    "print(\"Precision: {:.2f}\".format(precision))\n",
    "print(\"Recall: {:.2f}\".format(recall))\n",
    "print(\"F1-score: {:.2f}\".format(f1score))\n",
    "print(conf_matrix)\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2eb66dec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T14:30:24.280378Z",
     "iopub.status.busy": "2025-07-04T14:30:24.279766Z",
     "iopub.status.idle": "2025-07-04T14:36:09.776246Z",
     "shell.execute_reply": "2025-07-04T14:36:09.775368Z"
    },
    "papermill": {
     "duration": 345.517488,
     "end_time": "2025-07-04T14:36:09.787154",
     "exception": false,
     "start_time": "2025-07-04T14:30:24.269666",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 20 candidates, totalling 100 fits\n",
      "Best Parameters: {'algorithm': 'SAMME.R', 'learning_rate': 0.01, 'n_estimators': 50}\n",
      "Best Cross-Validation Score: 0.5156420292036731\n",
      "Accuracy: 0.53\n",
      "Precision: 0.53\n",
      "Recall: 1.00\n",
      "F1-score: 0.69\n",
      "[[  0 370]\n",
      " [  0 412]]\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00       370\n",
      "           1       0.53      1.00      0.69       412\n",
      "\n",
      "    accuracy                           0.53       782\n",
      "   macro avg       0.26      0.50      0.35       782\n",
      "weighted avg       0.28      0.53      0.36       782\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "# Initialize the AdaBoostClassifier\n",
    "ada = AdaBoostClassifier()\n",
    "\n",
    "param_grid = {\n",
    "    'n_estimators': [50, 100, 200, 300],\n",
    "    'learning_rate': [0.001, 0.01, 0.1, 1, 10],\n",
    "    'algorithm': ['SAMME.R']\n",
    "}\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=ada,\n",
    "    param_grid=param_grid,\n",
    "    cv=5,  # 5-fold cross-validation\n",
    "    verbose=2,\n",
    "    n_jobs=-1  # Use all available cores\n",
    ")\n",
    "\n",
    "# Fit GridSearchCV\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best parameters and best cross-validation score\n",
    "best_params = grid_search.best_params_\n",
    "best_cv_score = grid_search.best_score_\n",
    "\n",
    "print(f\"Best Parameters: {best_params}\")\n",
    "print(f\"Best Cross-Validation Score: {best_cv_score}\")\n",
    "\n",
    "# Apply the best estimator to the test data\n",
    "best_ada = grid_search.best_estimator_\n",
    "y_pred = best_ada.predict(X_test)\n",
    "\n",
    "    # Calculate evaluation metrics\n",
    "recall = recall_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "f1score = f1_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "    # Calculate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"Accuracy: {:.2f}\".format(accuracy))\n",
    "print(\"Precision: {:.2f}\".format(precision))\n",
    "print(\"Recall: {:.2f}\".format(recall))\n",
    "print(\"F1-score: {:.2f}\".format(f1score))\n",
    "print(conf_matrix)\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2d4e09d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T14:36:09.807565Z",
     "iopub.status.busy": "2025-07-04T14:36:09.807213Z",
     "iopub.status.idle": "2025-07-04T14:39:36.190044Z",
     "shell.execute_reply": "2025-07-04T14:39:36.189155Z"
    },
    "papermill": {
     "duration": 206.406644,
     "end_time": "2025-07-04T14:39:36.203241",
     "exception": false,
     "start_time": "2025-07-04T14:36:09.796597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 90 candidates, totalling 450 fits\n",
      "\n",
      "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.6s\n",
      "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   0.6s\n",
      "[CV] END .....................C=1, gamma=0.0001, kernel=poly; total time=   0.6s\n",
      "[CV] END .........................C=10, gamma=1, kernel=poly; total time= 1.3min\n",
      "[CV] END ........................C=100, gamma=1, kernel=poly; total time=13.2min\n",
      "[CV] END .......................C=1000, gamma=1, kernel=poly; total time=71.6min\n",
      "[CV] END .......................C=1000, gamma=1, kernel=poly; total time=32.1min\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.6s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.8s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   1.0s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.8s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.5s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=200; total time=  16.9s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=300; total time=  24.5s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=100; total time=   8.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=100; total time=   8.8s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=300; total time=  25.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=100; total time=   8.3s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=300; total time=  24.6s\n",
      "[CV] END ..algorithm=SAMME, learning_rate=1, n_estimators=50; total time=   4.0s\n",
      "[CV] END ..algorithm=SAMME, learning_rate=1, n_estimators=50; total time=   4.1s\n",
      "[CV] END ..algorithm=SAMME, learning_rate=1, n_estimators=50; total time=   4.0s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=100; total time=   8.0s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=200; total time=  17.0s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=200; total time=  16.1s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=300; total time=  25.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=100; total time=   8.7s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=200; total time=  16.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=300; total time=  24.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=100; total time=   8.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=200; total time=  16.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=300; total time=  25.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=100; total time=   8.6s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=300; total time=  25.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=300; total time=  25.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=200; total time=  16.4s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=200; total time=  16.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=300; total time=  24.6s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=100; total time=   8.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=200; total time=  16.4s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=300; total time=  25.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=100; total time=   8.8s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=300; total time=  24.6s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=200; total time=  16.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=300; total time=  24.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=300; total time=  24.5s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=200; total time=  17.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=300; total time=  24.7s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=200; total time=  17.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=300; total time=  24.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=300; total time=  24.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=200; total time=  16.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=300; total time=  24.4s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=100; total time=   8.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=200; total time=  16.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=300; total time=  24.5s\n",
      "[CV] END C=0.001, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.2s\n",
      "[CV] END ...C=0.001, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END C=0.001, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ....C=0.001, max_iter=1200, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END ....C=0.001, max_iter=1200, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END ...C=0.001, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ...C=0.001, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ...C=0.001, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   0.8s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.7s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=100; total time=   8.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=200; total time=  16.8s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=200; total time=  16.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=300; total time=  24.9s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=100; total time=   8.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=200; total time=  16.8s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=300; total time=  25.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=100; total time=   8.9s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=300; total time=  25.1s\n",
      "[CV] END ..algorithm=SAMME, learning_rate=1, n_estimators=50; total time=   4.0s\n",
      "[CV] END ..algorithm=SAMME, learning_rate=1, n_estimators=50; total time=   4.1s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=100; total time=   8.1s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=100; total time=   8.4s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=200; total time=  16.1s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=300; total time=  25.0s\n",
      "[CV] END .algorithm=SAMME, learning_rate=10, n_estimators=50; total time=   4.0s\n",
      "[CV] END .algorithm=SAMME, learning_rate=10, n_estimators=50; total time=   4.0s\n",
      "[CV] END .algorithm=SAMME, learning_rate=10, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=200; total time=  16.8s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=300; total time=  25.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=300; total time=  24.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=200; total time=  16.8s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=200; total time=  16.5s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=300; total time=  24.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=100; total time=   8.5s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=300; total time=  25.4s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=100; total time=   8.8s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=100; total time=   8.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=200; total time=  16.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=300; total time=  25.4s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=100; total time=   8.8s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=100; total time=   8.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=200; total time=  16.4s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=300; total time=  25.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=100; total time=   8.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=300; total time=  24.7s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=300; total time=  19.7s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=100; total time=   8.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=200; total time=  17.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=300; total time=  25.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=200; total time=  17.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=300; total time=  24.5s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=300; total time=  24.8s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=100; total time=   8.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=200; total time=  16.7s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=300; total time=  24.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=100; total time=   8.4s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=300; total time=  24.8s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=200; total time=  16.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=300; total time=  22.5s\n",
      "[CV] END C=0.001, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .....C=0.001, max_iter=1200, penalty=l2, solver=sag; total time=   0.1s\n",
      "[CV] END ....C=0.001, max_iter=1200, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END ....C=0.001, max_iter=1200, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END .....C=0.001, max_iter=1500, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END .....C=0.001, max_iter=1500, penalty=l2, solver=sag; total time=   0.1s\n",
      "[CV] END .....C=0.001, max_iter=1500, penalty=l2, solver=sag; total time=   0.1s\n",
      "[CV] END .....C=0.001, max_iter=1500, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END C=0.001, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.0s\n",
      "[CV] END C=0.001, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.0s\n",
      "[CV] END C=0.01, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   1.1s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.6s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=100; total time=   8.3s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=200; total time=  16.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=300; total time=  24.7s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=100; total time=   8.3s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=200; total time=  16.3s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=300; total time=  24.6s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=200; total time=  17.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=300; total time=  25.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=300; total time=  24.3s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=200; total time=  17.1s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=300; total time=  24.9s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=300; total time=  24.2s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=200; total time=  16.9s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=300; total time=  24.5s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=100; total time=   9.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=200; total time=  16.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=300; total time=  25.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=100; total time=   8.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=100; total time=   8.6s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=200; total time=  16.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=300; total time=  25.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=100; total time=   8.5s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=200; total time=  16.4s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=300; total time=  25.4s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=300; total time=  25.5s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=200; total time=  16.4s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=200; total time=  16.6s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=300; total time=  24.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=100; total time=   8.4s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=300; total time=  24.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=200; total time=  16.6s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=300; total time=  25.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=100; total time=   8.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=200; total time=  16.5s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=300; total time=  25.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=100; total time=   8.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=200; total time=  16.5s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=300; total time=  25.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=100; total time=   8.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=200; total time=  16.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=300; total time=  25.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=300; total time=  24.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=200; total time=  16.8s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=300; total time=  25.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=300; total time=  18.9s\n",
      "[CV] END C=0.001, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ...C=0.001, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ...C=0.001, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ...C=0.001, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END .....C=0.001, max_iter=1200, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END .....C=0.001, max_iter=1200, penalty=l2, solver=sag; total time=   0.1s\n",
      "[CV] END ....C=0.001, max_iter=1200, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END C=0.001, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ...C=0.001, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ...C=0.001, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ...C=0.001, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ...C=0.001, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ...C=0.001, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END C=0.001, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .....C=0.001, max_iter=1800, penalty=l2, solver=sag; total time=   0.1s\n",
      "[CV] END .....C=0.001, max_iter=1800, penalty=l2, solver=sag; total time=   0.1s\n",
      "[CV] END .....C=0.001, max_iter=1800, penalty=l2, solver=sag; total time=   0.1s\n",
      "[CV] END ....C=0.01, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   0.7s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   1.4s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.5s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=200; total time=  16.9s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=300; total time=  25.0s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.001, n_estimators=300; total time=  24.3s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=200; total time=  17.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=300; total time=  25.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.01, n_estimators=300; total time=  24.2s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=200; total time=  17.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=200; total time=  16.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=0.1, n_estimators=300; total time=  24.9s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=100; total time=   8.1s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=100; total time=   8.7s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=200; total time=  16.1s\n",
      "[CV] END .algorithm=SAMME, learning_rate=1, n_estimators=300; total time=  24.6s\n",
      "[CV] END .algorithm=SAMME, learning_rate=10, n_estimators=50; total time=   4.0s\n",
      "[CV] END .algorithm=SAMME, learning_rate=10, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=100; total time=   8.4s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=200; total time=  16.2s\n",
      "[CV] END algorithm=SAMME, learning_rate=10, n_estimators=300; total time=  24.8s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=100; total time=   8.4s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=200; total time=  16.7s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=300; total time=  25.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=300; total time=  24.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=200; total time=  16.6s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=200; total time=  16.5s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=300; total time=  24.6s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=100; total time=   9.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=100; total time=   8.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=200; total time=  16.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=300; total time=  24.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=100; total time=   8.5s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=200; total time=  16.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=300; total time=  25.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=300; total time=  24.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=200; total time=  16.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=200; total time=  16.8s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=300; total time=  21.9s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=200; total time=  16.7s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.001, n_estimators=300; total time=  25.2s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=50; total time=   4.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=200; total time=  16.8s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=200; total time=  16.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.01, n_estimators=300; total time=  25.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=200; total time=  16.8s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=200; total time=  16.3s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=0.1, n_estimators=300; total time=  24.6s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=100; total time=   8.4s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=200; total time=  16.5s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=1, n_estimators=300; total time=  25.0s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=50; total time=   4.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=100; total time=   8.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=100; total time=   8.5s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=200; total time=  16.1s\n",
      "[CV] END algorithm=SAMME.R, learning_rate=10, n_estimators=300; total time=  24.9s\n",
      "[CV] END C=0.001, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ...C=0.001, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END C=0.001, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .....C=0.001, max_iter=1200, penalty=l2, solver=sag; total time=   0.1s\n",
      "[CV] END .....C=0.001, max_iter=1200, penalty=l2, solver=sag; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ...C=0.001, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ...C=0.001, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END C=0.001, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.0s\n",
      "[CV] END C=0.001, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.0s\n",
      "[CV] END C=0.001, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.0s\n",
      "[CV] END ....C=0.001, max_iter=1500, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END ....C=0.001, max_iter=1500, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END C=0.001, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.001, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ....C=0.001, max_iter=1800, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END ....C=0.001, max_iter=1800, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END ....C=0.001, max_iter=1800, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END C=0.01, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .....C=0.01, max_iter=1200, penalty=l2, solver=saga; total time=   0.3s\n",
      "[CV] END .....C=0.01, max_iter=1200, penalty=l2, solver=saga; total time=   0.4s\n",
      "[CV] END .....C=0.01, max_iter=1200, penalty=l2, solver=saga; total time=   0.4s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] END ....C=0.01, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ....C=0.01, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ....C=0.01, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END C=0.01, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ......C=0.01, max_iter=1200, penalty=l2, solver=sag; total time=   0.1s\n",
      "[CV] END ......C=0.01, max_iter=1200, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END ....C=0.01, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ....C=0.01, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END C=0.01, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.0s\n",
      "[CV] END C=0.01, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ......C=0.01, max_iter=1500, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END ......C=0.01, max_iter=1500, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END ......C=0.01, max_iter=1500, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END ......C=0.01, max_iter=1500, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END C=0.01, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ....C=0.01, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ....C=0.01, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ....C=0.01, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ....C=0.01, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ....C=0.01, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ......C=0.01, max_iter=1800, penalty=l2, solver=sag; total time=   0.3s\n",
      "[CV] END .....C=0.01, max_iter=1800, penalty=l2, solver=saga; total time=   0.6s\n",
      "[CV] END .....C=0.01, max_iter=1800, penalty=l2, solver=saga; total time=   0.5s\n",
      "[CV] END .....C=0.01, max_iter=1800, penalty=l2, solver=saga; total time=   0.6s\n",
      "[CV] END .C=0.1, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .....C=0.1, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .......C=0.1, max_iter=1500, penalty=l2, solver=sag; total time=   0.3s\n",
      "[CV] END .......C=0.1, max_iter=1500, penalty=l2, solver=sag; total time=   0.3s\n",
      "[CV] END .......C=0.1, max_iter=1500, penalty=l2, solver=sag; total time=   0.3s\n",
      "[CV] END ......C=0.1, max_iter=1500, penalty=l2, solver=saga; total time=   0.9s\n",
      "[CV] END ......C=0.1, max_iter=1800, penalty=l2, solver=saga; total time=   0.9s\n",
      "[CV] END ......C=0.1, max_iter=1800, penalty=l2, solver=saga; total time=   0.8s\n",
      "[CV] END ......C=0.1, max_iter=1800, penalty=l2, solver=saga; total time=   0.5s\n",
      "[CV] END ......C=0.1, max_iter=1800, penalty=l2, solver=saga; total time=   0.7s\n",
      "[CV] END ........C=1, max_iter=1200, penalty=l2, solver=saga; total time=   2.3s\n",
      "[CV] END ...C=1, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .........C=1, max_iter=1500, penalty=l2, solver=sag; total time=   1.0s\n",
      "[CV] END .........C=1, max_iter=1500, penalty=l2, solver=sag; total time=   0.8s\n",
      "[CV] END ........C=1, max_iter=1500, penalty=l2, solver=saga; total time=   2.1s\n",
      "[CV] END ...C=1, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .........C=1, max_iter=1800, penalty=l2, solver=sag; total time=   1.1s\n",
      "[CV] END .........C=1, max_iter=1800, penalty=l2, solver=sag; total time=   0.9s\n",
      "[CV] END ........C=1, max_iter=1800, penalty=l2, solver=saga; total time=   2.1s\n",
      "[CV] END ......C=10, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.2s\n",
      "[CV] END ..C=10, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END ..C=10, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END ........C=10, max_iter=1200, penalty=l2, solver=sag; total time=   7.1s\n",
      "[CV] END .......C=10, max_iter=1200, penalty=l2, solver=saga; total time=  11.9s\n",
      "[CV] END ..C=10, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ......C=10, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ......C=10, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ......C=10, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ......C=10, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END ..C=10, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END ........C=10, max_iter=1500, penalty=l2, solver=sag; total time=   7.7s\n",
      "[CV] END ........C=10, max_iter=1500, penalty=l2, solver=sag; total time=   5.8s\n",
      "[CV] END .......C=10, max_iter=1500, penalty=l2, solver=saga; total time=  14.0s\n",
      "[CV] END ........C=10, max_iter=1800, penalty=l2, solver=sag; total time=   6.0s\n",
      "[CV] END .......C=10, max_iter=1800, penalty=l2, solver=saga; total time=  14.5s\n",
      "[CV] END .C=100, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=100, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=100, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=100, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=100, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .....C=100, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.3s\n",
      "[CV] END .....C=100, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.3s\n",
      "[CV] END .....C=100, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.3s\n",
      "[CV] END .....C=100, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.4s\n",
      "[CV] END .....C=100, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.3s\n",
      "[CV] END .C=100, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.3s\n",
      "[CV] END .C=100, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END .C=100, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END .C=100, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.3s\n",
      "[CV] END .C=100, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.3s\n",
      "[CV] END .......C=100, max_iter=1200, penalty=l2, solver=sag; total time=  10.0s\n",
      "[CV] END .......C=100, max_iter=1200, penalty=l2, solver=sag; total time=   9.3s\n",
      "[CV] END ......C=100, max_iter=1200, penalty=l2, solver=saga; total time=  11.1s\n",
      "[CV] END .......C=100, max_iter=1500, penalty=l2, solver=sag; total time=  12.4s\n",
      "[CV] END ......C=100, max_iter=1500, penalty=l2, solver=saga; total time=  13.8s\n",
      "[CV] END .C=100, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=100, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=100, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=100, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters: {'C': 100, 'max_iter': 1200, 'penalty': 'l2', 'solver': 'saga'}\n",
      "Best Cross-Validation Score: 0.5194806563299714\n",
      "Accuracy: 0.51\n",
      "Precision: 0.53\n",
      "Recall: 0.75\n",
      "F1-score: 0.62\n",
      "[[ 93 277]\n",
      " [104 308]]\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.47      0.25      0.33       370\n",
      "           1       0.53      0.75      0.62       412\n",
      "\n",
      "    accuracy                           0.51       782\n",
      "   macro avg       0.50      0.50      0.47       782\n",
      "weighted avg       0.50      0.51      0.48       782\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "# Initialize the LogisticRegression\n",
    "log_reg = LogisticRegression()\n",
    "\n",
    "param_grid = {\n",
    "    'penalty': ['l2'],\n",
    "    'C': [0.001, 0.01, 0.1, 1,10,100],\n",
    "    'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n",
    "    'max_iter': [1200,1500,1800]\n",
    "}\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=log_reg,\n",
    "    param_grid=param_grid,\n",
    "    cv=5,  # 5-fold cross-validation\n",
    "    verbose=2,\n",
    "    n_jobs=-1  # Use all available cores\n",
    ")\n",
    "\n",
    "# Fit GridSearchCV\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best parameters and best cross-validation score\n",
    "best_params = grid_search.best_params_\n",
    "best_cv_score = grid_search.best_score_\n",
    "\n",
    "print(f\"Best Parameters: {best_params}\")\n",
    "print(f\"Best Cross-Validation Score: {best_cv_score}\")\n",
    "\n",
    "# Apply the best estimator to the test data\n",
    "best_log_reg = grid_search.best_estimator_\n",
    "y_pred = best_log_reg.predict(X_test)\n",
    "\n",
    "    # Calculate evaluation metrics\n",
    "recall = recall_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "f1score = f1_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "    # Calculate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"Accuracy: {:.2f}\".format(accuracy))\n",
    "print(\"Precision: {:.2f}\".format(precision))\n",
    "print(\"Recall: {:.2f}\".format(recall))\n",
    "print(\"F1-score: {:.2f}\".format(f1score))\n",
    "print(conf_matrix)\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4abfe3bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T14:39:36.228306Z",
     "iopub.status.busy": "2025-07-04T14:39:36.227680Z",
     "iopub.status.idle": "2025-07-04T15:32:43.054153Z",
     "shell.execute_reply": "2025-07-04T15:32:43.052739Z"
    },
    "papermill": {
     "duration": 3186.854003,
     "end_time": "2025-07-04T15:32:43.068941",
     "exception": false,
     "start_time": "2025-07-04T14:39:36.214938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 20 candidates, totalling 100 fits\n",
      "\n",
      "[CV] END .....C=0.01, max_iter=1200, penalty=l2, solver=saga; total time=   0.4s\n",
      "[CV] END ......C=0.01, max_iter=1800, penalty=l2, solver=sag; total time=   0.3s\n",
      "[CV] END ......C=0.01, max_iter=1800, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END ......C=0.01, max_iter=1800, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END ......C=0.01, max_iter=1800, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END .....C=0.1, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .....C=0.1, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .....C=0.1, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .....C=0.1, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .......C=0.1, max_iter=1200, penalty=l2, solver=sag; total time=   0.5s\n",
      "[CV] END .......C=0.1, max_iter=1200, penalty=l2, solver=sag; total time=   0.3s\n",
      "[CV] END .......C=0.1, max_iter=1200, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END .....C=0.1, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .....C=0.1, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .....C=0.1, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .....C=0.1, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .......C=0.1, max_iter=1500, penalty=l2, solver=sag; total time=   0.3s\n",
      "[CV] END .......C=0.1, max_iter=1500, penalty=l2, solver=sag; total time=   0.3s\n",
      "[CV] END .C=0.1, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .....C=0.1, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .....C=0.1, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END .C=0.1, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .......C=0.1, max_iter=1800, penalty=l2, solver=sag; total time=   0.3s\n",
      "[CV] END .......C=0.1, max_iter=1800, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END .......C=0.1, max_iter=1800, penalty=l2, solver=sag; total time=   0.3s\n",
      "[CV] END .......C=0.1, max_iter=1800, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END ...C=1, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .........C=1, max_iter=1200, penalty=l2, solver=sag; total time=   1.2s\n",
      "[CV] END ........C=1, max_iter=1200, penalty=l2, solver=saga; total time=   2.1s\n",
      "[CV] END ........C=1, max_iter=1200, penalty=l2, solver=saga; total time=   1.7s\n",
      "[CV] END .........C=1, max_iter=1500, penalty=l2, solver=sag; total time=   1.1s\n",
      "[CV] END ........C=1, max_iter=1500, penalty=l2, solver=saga; total time=   2.0s\n",
      "[CV] END ...C=1, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .........C=1, max_iter=1800, penalty=l2, solver=sag; total time=   1.2s\n",
      "[CV] END ........C=1, max_iter=1800, penalty=l2, solver=saga; total time=   2.3s\n",
      "[CV] END ..C=10, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ......C=10, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ......C=10, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.2s\n",
      "[CV] END ..C=10, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END ........C=10, max_iter=1200, penalty=l2, solver=sag; total time=   7.9s\n",
      "[CV] END .......C=10, max_iter=1200, penalty=l2, solver=saga; total time=  10.6s\n",
      "[CV] END .......C=10, max_iter=1200, penalty=l2, solver=saga; total time=  11.0s\n",
      "[CV] END .......C=10, max_iter=1500, penalty=l2, solver=saga; total time=  13.9s\n",
      "[CV] END ..C=10, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ......C=10, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ......C=10, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ......C=10, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ......C=10, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ......C=10, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END ..C=10, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END ..C=10, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ........C=10, max_iter=1800, penalty=l2, solver=sag; total time=   8.5s\n",
      "[CV] END ........C=10, max_iter=1800, penalty=l2, solver=sag; total time=   5.9s\n",
      "[CV] END .......C=10, max_iter=1800, penalty=l2, solver=saga; total time=  13.2s\n",
      "[CV] END .......C=100, max_iter=1200, penalty=l2, solver=sag; total time=  10.0s\n",
      "[CV] END ......C=100, max_iter=1200, penalty=l2, solver=saga; total time=  11.2s\n",
      "[CV] END ......C=100, max_iter=1200, penalty=l2, solver=saga; total time=  11.2s\n",
      "[CV] END .......C=100, max_iter=1500, penalty=l2, solver=sag; total time=  12.5s\n",
      "[CV] END ......C=100, max_iter=1500, penalty=l2, solver=saga; total time=  13.7s\n",
      "[CV] END .C=100, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.3s\n",
      "[CV] END .......C=100, max_iter=1800, penalty=l2, solver=sag; total time=  14.3s\n",
      "[CV] END .......C=100, max_iter=1800, penalty=l2, solver=sag; total time=  14.0s\n",
      "[CV] END ......C=100, max_iter=1800, penalty=l2, solver=saga; total time=  13.3s\n",
      "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   4.7s\n",
      "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   4.7s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   4.3s\n",
      "[CV] END ........................C=100, gamma=1, kernel=poly; total time=41.2min\n",
      "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   1.8s\n",
      "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   1.9s\n",
      "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   1.4s\n",
      "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   1.9s\n",
      "[CV] END .....................C=100, gamma=1, kernel=sigmoid; total time=   1.6s[CV] END C=0.001, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .....C=0.001, max_iter=1500, penalty=l2, solver=sag; total time=   0.1s\n",
      "[CV] END ....C=0.001, max_iter=1500, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END ....C=0.001, max_iter=1500, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END ....C=0.001, max_iter=1500, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END .....C=0.001, max_iter=1800, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END .....C=0.001, max_iter=1800, penalty=l2, solver=sag; total time=   0.1s\n",
      "[CV] END ....C=0.001, max_iter=1800, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END ....C=0.001, max_iter=1800, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END C=0.01, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ....C=0.01, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ....C=0.01, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END ....C=0.01, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END C=0.01, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ......C=0.01, max_iter=1500, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END .....C=0.01, max_iter=1500, penalty=l2, solver=saga; total time=   0.4s\n",
      "[CV] END .....C=0.01, max_iter=1500, penalty=l2, solver=saga; total time=   0.4s\n",
      "[CV] END .....C=0.01, max_iter=1500, penalty=l2, solver=saga; total time=   0.4s\n",
      "[CV] END .....C=0.01, max_iter=1500, penalty=l2, solver=saga; total time=   0.5s\n",
      "[CV] END .C=0.1, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.2s\n",
      "[CV] END .C=0.1, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .....C=0.1, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END .......C=0.1, max_iter=1200, penalty=l2, solver=sag; total time=   0.5s\n",
      "[CV] END .......C=0.1, max_iter=1200, penalty=l2, solver=sag; total time=   0.4s\n",
      "[CV] END ......C=0.1, max_iter=1200, penalty=l2, solver=saga; total time=   0.9s\n",
      "[CV] END ......C=0.1, max_iter=1200, penalty=l2, solver=saga; total time=   0.8s\n",
      "[CV] END .C=0.1, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .....C=0.1, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .....C=0.1, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .....C=0.1, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .......C=0.1, max_iter=1800, penalty=l2, solver=sag; total time=   0.4s\n",
      "[CV] END ......C=0.1, max_iter=1800, penalty=l2, solver=saga; total time=   0.5s\n",
      "[CV] END ...C=1, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .........C=1, max_iter=1200, penalty=l2, solver=sag; total time=   1.1s\n",
      "[CV] END .........C=1, max_iter=1200, penalty=l2, solver=sag; total time=   1.1s\n",
      "[CV] END ........C=1, max_iter=1200, penalty=l2, solver=saga; total time=   2.1s\n",
      "[CV] END .......C=1, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .........C=1, max_iter=1500, penalty=l2, solver=sag; total time=   1.2s\n",
      "[CV] END ........C=1, max_iter=1500, penalty=l2, solver=saga; total time=   2.3s\n",
      "[CV] END ...C=1, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .........C=1, max_iter=1800, penalty=l2, solver=sag; total time=   1.0s\n",
      "[CV] END ........C=1, max_iter=1800, penalty=l2, solver=saga; total time=   2.1s\n",
      "[CV] END ........C=1, max_iter=1800, penalty=l2, solver=saga; total time=   1.7s\n",
      "[CV] END ........C=10, max_iter=1200, penalty=l2, solver=sag; total time=   8.0s\n",
      "[CV] END .......C=10, max_iter=1200, penalty=l2, solver=saga; total time=  11.7s\n",
      "[CV] END ......C=10, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END ..C=10, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END ........C=10, max_iter=1500, penalty=l2, solver=sag; total time=   5.8s\n",
      "[CV] END ........C=10, max_iter=1500, penalty=l2, solver=sag; total time=   7.9s\n",
      "[CV] END .......C=10, max_iter=1500, penalty=l2, solver=saga; total time=  14.6s\n",
      "[CV] END ........C=10, max_iter=1800, penalty=l2, solver=sag; total time=   7.1s\n",
      "[CV] END .......C=10, max_iter=1800, penalty=l2, solver=saga; total time=  10.0s\n",
      "[CV] END .......C=10, max_iter=1800, penalty=l2, solver=saga; total time=  11.1s\n",
      "[CV] END .......C=100, max_iter=1200, penalty=l2, solver=sag; total time=  10.3s\n",
      "[CV] END ......C=100, max_iter=1200, penalty=l2, solver=saga; total time=  11.2s\n",
      "[CV] END .C=100, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.3s\n",
      "[CV] END .C=100, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.3s\n",
      "[CV] END .C=100, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.3s\n",
      "[CV] END .......C=100, max_iter=1500, penalty=l2, solver=sag; total time=  11.7s\n",
      "[CV] END ......C=100, max_iter=1500, penalty=l2, solver=saga; total time=  14.0s\n",
      "[CV] END ......C=100, max_iter=1500, penalty=l2, solver=saga; total time=  13.8s\n",
      "[CV] END .......C=100, max_iter=1800, penalty=l2, solver=sag; total time=  14.7s\n",
      "[CV] END ......C=100, max_iter=1800, penalty=l2, solver=saga; total time=  16.5s\n",
      "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   5.2s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   4.4s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   4.3s\n",
      "[CV] END ........................C=100, gamma=1, kernel=poly; total time=43.5min\n",
      "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   5.1s\n",
      "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   5.0s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   3.0s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   3.1s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   3.2s\n",
      "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   2.3s\n",
      "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   2.4s\n",
      "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   2.4s\n",
      "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   3.2s\n",
      "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   6.2s\n",
      "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   5.5s\n",
      "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   4.5s\n",
      "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   5.4s\n",
      "[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   4.2s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   3.5s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   3.0s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   3.0s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   3.0s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   3.0s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   4.8s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   4.2s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   5.1s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   5.1s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   3.0s\n",
      "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   1.3s\n",
      "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   1.3s\n",
      "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   1.3s\n",
      "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   1.3s\n",
      "[CV] END ...................C=100, gamma=0.1, kernel=sigmoid; total time=   1.3s\n",
      "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   5.4s\n",
      "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   4.8s\n",
      "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   4.4s\n",
      "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   4.7s\n",
      "[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   5.1s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   2.7s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   2.6s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   2.6s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   2.6s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   2.7s\n",
      "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   1.9s\n",
      "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   1.9s\n",
      "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   1.8s\n",
      "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   2.0s\n",
      "[CV] END .....................C=100, gamma=0.01, kernel=poly; total time=   1.8s\n",
      "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   2.1s\n",
      "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   2.2s\n",
      "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   2.1s\n",
      "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   3.0s\n",
      "[CV] END ..................C=100, gamma=0.01, kernel=sigmoid; total time=   2.2s\n",
      "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   5.9s\n",
      "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   4.8s\n",
      "[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   4.3s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   3.2s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   3.3s\n",
      "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   2.4s\n",
      "[CV] END ....................C=100, gamma=0.001, kernel=poly; total time=   2.5s\n",
      "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   2.9s\n",
      "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   2.7s\n",
      "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   2.2s\n",
      "[CV] END .................C=100, gamma=0.0001, kernel=linear; total time=   5.1s\n",
      "[CV] END .................C=100, gamma=0.0001, kernel=linear; total time=   5.1s\n",
      "[CV] END ....................C=100, gamma=0.0001, kernel=rbf; total time=   2.7s\n",
      "[CV] END ....................C=100, gamma=0.0001, kernel=rbf; total time=   2.7s\n",
      "[CV] END ....................C=100, gamma=0.0001, kernel=rbf; total time=   2.8s\n",
      "[CV] END ...................C=100, gamma=0.0001, kernel=poly; total time=   1.7s\n",
      "[CV] END ...................C=100, gamma=0.0001, kernel=poly; total time=   1.8s\n",
      "[CV] END ...................C=100, gamma=0.0001, kernel=poly; total time=   1.8s\n",
      "[CV] END ................C=100, gamma=0.0001, kernel=sigmoid; total time=   2.2s\n",
      "[CV] END ................C=100, gamma=0.0001, kernel=sigmoid; total time=   2.8s\n",
      "\n",
      "[CV] END .................C=100, gamma=0.001, kernel=sigmoid; total time=   2.2s\n",
      "[CV] END .................C=100, gamma=0.0001, kernel=linear; total time=   5.9s\n",
      "[CV] END .................C=100, gamma=0.0001, kernel=linear; total time=   4.5s\n",
      "[CV] END .................C=100, gamma=0.0001, kernel=linear; total time=   4.4s\n",
      "[CV] END ....................C=100, gamma=0.0001, kernel=rbf; total time=   2.6s\n",
      "[CV] END ....................C=100, gamma=0.0001, kernel=rbf; total time=   2.7s\n",
      "[CV] END ...................C=100, gamma=0.0001, kernel=poly; total time=   1.7s\n",
      "[CV] END ...................C=100, gamma=0.0001, kernel=poly; total time=   1.9s\n",
      "[CV] END ................C=100, gamma=0.0001, kernel=sigmoid; total time=   2.1s\n",
      "[CV] END ................C=100, gamma=0.0001, kernel=sigmoid; total time=   2.2s\n",
      "[CV] END ................C=100, gamma=0.0001, kernel=sigmoid; total time=   2.8s\n",
      "\n",
      "[CV] END .C=100, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .....C=100, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.3s\n",
      "[CV] END .....C=100, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.3s\n",
      "[CV] END .....C=100, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.3s\n",
      "[CV] END .....C=100, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.4s\n",
      "[CV] END .....C=100, max_iter=1800, penalty=l2, solver=lbfgs; total time=   0.3s\n",
      "[CV] END .C=100, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.3s\n",
      "[CV] END .C=100, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END .C=100, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END .C=100, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.3s\n",
      "[CV] END .......C=100, max_iter=1800, penalty=l2, solver=sag; total time=  14.4s\n",
      "[CV] END ......C=100, max_iter=1800, penalty=l2, solver=saga; total time=  16.5s\n",
      "[CV] END ......C=100, max_iter=1800, penalty=l2, solver=saga; total time=  12.6s\n",
      "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   5.4s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   4.4s\n",
      "[CV] END ........................C=100, gamma=1, kernel=poly; total time=44.7min\n",
      "Best Parameters: {'C': 100, 'gamma': 0.1, 'kernel': 'poly'}\n",
      "Best Cross-Validation Score: 0.5227773596266747\n",
      "Accuracy: 0.53\n",
      "Precision: 0.54\n",
      "Recall: 0.80\n",
      "F1-score: 0.64\n",
      "[[ 89 281]\n",
      " [ 83 329]]\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.52      0.24      0.33       370\n",
      "           1       0.54      0.80      0.64       412\n",
      "\n",
      "    accuracy                           0.53       782\n",
      "   macro avg       0.53      0.52      0.49       782\n",
      "weighted avg       0.53      0.53      0.49       782\n",
      "\n"
     ]
    }
   ],
   "source": [
    "param_grid = {\n",
    "    'C': [100],\n",
    "    'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n",
    "    'kernel': ['linear', 'rbf', 'poly', 'sigmoid']\n",
    "}\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=SVC(probability = True),\n",
    "    param_grid=param_grid,\n",
    "    cv=5,  # 5-fold cross-validation\n",
    "    verbose=2,\n",
    "    n_jobs=-1  # Use all available cores\n",
    ")\n",
    "\n",
    "# Fit GridSearchCV\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best parameters and best cross-validation score\n",
    "best_params = grid_search.best_params_\n",
    "best_cv_score = grid_search.best_score_\n",
    "\n",
    "print(f\"Best Parameters: {best_params}\")\n",
    "print(f\"Best Cross-Validation Score: {best_cv_score}\")\n",
    "\n",
    "# Apply the best estimator to the test data\n",
    "best_svc2 = grid_search.best_estimator_\n",
    "y_pred = best_svc2 .predict(X_test)\n",
    "\n",
    "    # Calculate evaluation metrics\n",
    "recall = recall_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "f1score = f1_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "    # Calculate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"Accuracy: {:.2f}\".format(accuracy))\n",
    "print(\"Precision: {:.2f}\".format(precision))\n",
    "print(\"Recall: {:.2f}\".format(recall))\n",
    "print(\"F1-score: {:.2f}\".format(f1score))\n",
    "print(conf_matrix)\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4db8187a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T15:32:43.096727Z",
     "iopub.status.busy": "2025-07-04T15:32:43.095818Z",
     "iopub.status.idle": "2025-07-04T15:41:49.914253Z",
     "shell.execute_reply": "2025-07-04T15:41:49.913315Z"
    },
    "papermill": {
     "duration": 546.846593,
     "end_time": "2025-07-04T15:41:49.928565",
     "exception": false,
     "start_time": "2025-07-04T15:32:43.081972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 60 candidates, totalling 300 fits\n",
      "\n",
      "[CV] END ....C=0.01, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.0s\n",
      "[CV] END C=0.01, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ......C=0.01, max_iter=1200, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END ......C=0.01, max_iter=1200, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END ......C=0.01, max_iter=1200, penalty=l2, solver=sag; total time=   0.2s\n",
      "[CV] END .....C=0.01, max_iter=1200, penalty=l2, solver=saga; total time=   0.4s\n",
      "[CV] END .....C=0.01, max_iter=1500, penalty=l2, solver=saga; total time=   0.3s\n",
      "[CV] END C=0.01, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1800, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END C=0.01, max_iter=1800, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .....C=0.01, max_iter=1800, penalty=l2, solver=saga; total time=   0.4s\n",
      "[CV] END .....C=0.01, max_iter=1800, penalty=l2, solver=saga; total time=   0.2s\n",
      "[CV] END .C=0.1, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .C=0.1, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END ......C=0.1, max_iter=1200, penalty=l2, solver=saga; total time=   0.7s\n",
      "[CV] END ......C=0.1, max_iter=1200, penalty=l2, solver=saga; total time=   0.7s\n",
      "[CV] END ......C=0.1, max_iter=1200, penalty=l2, solver=saga; total time=   0.3s\n",
      "[CV] END .C=0.1, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ......C=0.1, max_iter=1500, penalty=l2, solver=saga; total time=   0.8s\n",
      "[CV] END ......C=0.1, max_iter=1500, penalty=l2, solver=saga; total time=   0.6s\n",
      "[CV] END ......C=0.1, max_iter=1500, penalty=l2, solver=saga; total time=   0.9s\n",
      "[CV] END ......C=0.1, max_iter=1500, penalty=l2, solver=saga; total time=   0.4s\n",
      "[CV] END .........C=1, max_iter=1200, penalty=l2, solver=sag; total time=   1.0s\n",
      "[CV] END .........C=1, max_iter=1200, penalty=l2, solver=sag; total time=   0.8s\n",
      "[CV] END ........C=1, max_iter=1200, penalty=l2, solver=saga; total time=   2.0s\n",
      "[CV] END ...C=1, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END .......C=1, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ...C=1, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.1s\n",
      "[CV] END .........C=1, max_iter=1500, penalty=l2, solver=sag; total time=   1.1s\n",
      "[CV] END ........C=1, max_iter=1500, penalty=l2, solver=saga; total time=   2.1s\n",
      "[CV] END ........C=1, max_iter=1500, penalty=l2, solver=saga; total time=   1.7s\n",
      "[CV] END .........C=1, max_iter=1800, penalty=l2, solver=sag; total time=   1.1s\n",
      "[CV] END ........C=1, max_iter=1800, penalty=l2, solver=saga; total time=   2.0s\n",
      "[CV] END ..C=10, max_iter=1200, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END ......C=10, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ......C=10, max_iter=1200, penalty=l2, solver=lbfgs; total time=   0.1s\n",
      "[CV] END ..C=10, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END ..C=10, max_iter=1200, penalty=l2, solver=liblinear; total time=   0.2s\n",
      "[CV] END ........C=10, max_iter=1200, penalty=l2, solver=sag; total time=   6.0s\n",
      "[CV] END ........C=10, max_iter=1200, penalty=l2, solver=sag; total time=   6.0s\n",
      "[CV] END .......C=10, max_iter=1200, penalty=l2, solver=saga; total time=  12.0s\n",
      "[CV] END ........C=10, max_iter=1500, penalty=l2, solver=sag; total time=   7.3s\n",
      "[CV] END .......C=10, max_iter=1500, penalty=l2, solver=saga; total time=  10.1s\n",
      "[CV] END .......C=10, max_iter=1500, penalty=l2, solver=saga; total time=  11.1s\n",
      "[CV] END ........C=10, max_iter=1800, penalty=l2, solver=sag; total time=   8.0s\n",
      "[CV] END .......C=10, max_iter=1800, penalty=l2, solver=saga; total time=  15.2s\n",
      "[CV] END .......C=100, max_iter=1200, penalty=l2, solver=sag; total time=   9.8s\n",
      "[CV] END ......C=100, max_iter=1200, penalty=l2, solver=saga; total time=  11.1s\n",
      "[CV] END .C=100, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=100, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=100, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=100, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .C=100, max_iter=1500, penalty=l2, solver=newton-cg; total time=   0.1s\n",
      "[CV] END .....C=100, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.3s\n",
      "[CV] END .....C=100, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.3s\n",
      "[CV] END .....C=100, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.4s\n",
      "[CV] END .....C=100, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.4s\n",
      "[CV] END .....C=100, max_iter=1500, penalty=l2, solver=lbfgs; total time=   0.3s\n",
      "[CV] END .C=100, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.3s\n",
      "[CV] END .C=100, max_iter=1500, penalty=l2, solver=liblinear; total time=   0.4s\n",
      "[CV] END .......C=100, max_iter=1500, penalty=l2, solver=sag; total time=  11.8s\n",
      "[CV] END .......C=100, max_iter=1500, penalty=l2, solver=sag; total time=  12.2s\n",
      "[CV] END ......C=100, max_iter=1500, penalty=l2, solver=saga; total time=  13.8s\n",
      "[CV] END .......C=100, max_iter=1800, penalty=l2, solver=sag; total time=  14.7s\n",
      "[CV] END ......C=100, max_iter=1800, penalty=l2, solver=saga; total time=  16.5s\n",
      "[CV] END ......................C=100, gamma=1, kernel=linear; total time=   6.1s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   4.3s\n",
      "[CV] END ........................C=100, gamma=1, kernel=poly; total time=34.6min\n",
      "[CV] END ........................C=100, gamma=1, kernel=poly; total time=18.2min\n",
      "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   2.1s\n",
      "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   2.5s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   3.3s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   6.2s\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   3.1s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   2.5s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   2.5s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   3.3s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   2.6s\n",
      "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   3.0s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   2.3s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   2.5s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   3.0s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   3.2s\n",
      "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   2.9s\n",
      "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   2.3s\n",
      "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   2.5s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   3.1s\n",
      "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   2.5s\n",
      "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   2.7sBest Parameters: {'C': 0.1, 'gamma': 1, 'kernel': 'poly'}\n",
      "Best Cross-Validation Score: 0.5227773596266747\n",
      "Accuracy: 0.53\n",
      "Precision: 0.54\n",
      "Recall: 0.80\n",
      "F1-score: 0.64\n",
      "[[ 89 281]\n",
      " [ 83 329]]\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.52      0.24      0.33       370\n",
      "           1       0.54      0.80      0.64       412\n",
      "\n",
      "    accuracy                           0.53       782\n",
      "   macro avg       0.53      0.52      0.49       782\n",
      "weighted avg       0.53      0.53      0.49       782\n",
      "\n"
     ]
    }
   ],
   "source": [
    "param_grid = {\n",
    "    'C': [0.1, 1, 10],\n",
    "    'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n",
    "    'kernel': ['linear', 'rbf', 'poly', 'sigmoid']\n",
    "}\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=SVC(probability = True),\n",
    "    param_grid=param_grid,\n",
    "    cv=5,  # 5-fold cross-validation\n",
    "    verbose=2,\n",
    "    n_jobs=-1  # Use all available cores\n",
    ")\n",
    "\n",
    "# Fit GridSearchCV\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best parameters and best cross-validation score\n",
    "best_params = grid_search.best_params_\n",
    "best_cv_score = grid_search.best_score_\n",
    "\n",
    "print(f\"Best Parameters: {best_params}\")\n",
    "print(f\"Best Cross-Validation Score: {best_cv_score}\")\n",
    "\n",
    "# Apply the best estimator to the test data\n",
    "best_svc2 = grid_search.best_estimator_\n",
    "y_pred = best_svc2 .predict(X_test)\n",
    "\n",
    "    # Calculate evaluation metrics\n",
    "recall = recall_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "f1score = f1_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "    # Calculate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"Accuracy: {:.2f}\".format(accuracy))\n",
    "print(\"Precision: {:.2f}\".format(precision))\n",
    "print(\"Recall: {:.2f}\".format(recall))\n",
    "print(\"F1-score: {:.2f}\".format(f1score))\n",
    "print(conf_matrix)\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bf749f9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T15:41:49.956261Z",
     "iopub.status.busy": "2025-07-04T15:41:49.955900Z",
     "iopub.status.idle": "2025-07-04T15:42:07.253028Z",
     "shell.execute_reply": "2025-07-04T15:42:07.251937Z"
    },
    "papermill": {
     "duration": 17.313021,
     "end_time": "2025-07-04T15:42:07.254665",
     "exception": false,
     "start_time": "2025-07-04T15:41:49.941644",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 2 candidates, totalling 10 fits\n",
      "Best Parameters: {'C': 100, 'gamma': 0.1, 'kernel': 'poly'}\n",
      "Best Cross-Validation Score: 0.5227773596266747\n",
      "Accuracy: 0.53\n",
      "Precision: 0.54\n",
      "Recall: 0.80\n",
      "F1-score: 0.64\n",
      "[[ 89 281]\n",
      " [ 83 329]]\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.52      0.24      0.33       370\n",
      "           1       0.54      0.80      0.64       412\n",
      "\n",
      "    accuracy                           0.53       782\n",
      "   macro avg       0.53      0.52      0.49       782\n",
      "weighted avg       0.53      0.53      0.49       782\n",
      "\n"
     ]
    }
   ],
   "source": [
    "param_grid = [\n",
    "    {'C': [100], 'gamma': [0.1], 'kernel': ['poly']},\n",
    "    {'C': [0.1], 'gamma': [1], 'kernel': ['poly']}\n",
    "]\n",
    "\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=SVC(probability = True),\n",
    "    param_grid=param_grid,\n",
    "    cv=5,  # 5-fold cross-validation\n",
    "    verbose=2,\n",
    "    n_jobs=-1  # Use all available cores\n",
    ")\n",
    "\n",
    "# Fit GridSearchCV\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best parameters and best cross-validation score\n",
    "best_params = grid_search.best_params_\n",
    "best_cv_score = grid_search.best_score_\n",
    "\n",
    "print(f\"Best Parameters: {best_params}\")\n",
    "print(f\"Best Cross-Validation Score: {best_cv_score}\")\n",
    "\n",
    "# Apply the best estimator to the test data\n",
    "best_svc2 = grid_search.best_estimator_\n",
    "y_pred = best_svc2 .predict(X_test)\n",
    "\n",
    "    # Calculate evaluation metrics\n",
    "recall = recall_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "f1score = f1_score(y_test, y_pred)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "\n",
    "    # Calculate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"Accuracy: {:.2f}\".format(accuracy))\n",
    "print(\"Precision: {:.2f}\".format(precision))\n",
    "print(\"Recall: {:.2f}\".format(recall))\n",
    "print(\"F1-score: {:.2f}\".format(f1score))\n",
    "print(conf_matrix)\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b39628c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T15:42:07.283614Z",
     "iopub.status.busy": "2025-07-04T15:42:07.282603Z",
     "iopub.status.idle": "2025-07-04T15:42:07.292006Z",
     "shell.execute_reply": "2025-07-04T15:42:07.290907Z"
    },
    "papermill": {
     "duration": 0.025361,
     "end_time": "2025-07-04T15:42:07.293418",
     "exception": false,
     "start_time": "2025-07-04T15:42:07.268057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "best_svc = SVC(C=0.1, gamma=1, kernel='poly')\n",
    "best_gbdt = GradientBoostingClassifier(n_estimators=50, random_state=2)\n",
    "best_abc = AdaBoostClassifier(learning_rate=1, n_estimators=300)\n",
    "best_rfc = RandomForestClassifier(n_estimators=200, min_samples_split=5, min_samples_leaf=4,\n",
    "                                  max_features='log2', max_depth=10, bootstrap=False)\n",
    "\n",
    "svc = SVC()\n",
    "rfc = RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fee4ea92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T15:42:07.461800Z",
     "iopub.status.busy": "2025-07-04T15:42:07.461200Z",
     "iopub.status.idle": "2025-07-04T15:45:03.229746Z",
     "shell.execute_reply": "2025-07-04T15:45:03.228235Z"
    },
    "papermill": {
     "duration": 175.936641,
     "end_time": "2025-07-04T15:45:03.244366",
     "exception": false,
     "start_time": "2025-07-04T15:42:07.307725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy 0.5268542199488491\n",
      "Precision 0.5284552845528455\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.50      0.06      0.11       370\n",
      "           1       0.53      0.95      0.68       412\n",
      "\n",
      "    accuracy                           0.53       782\n",
      "   macro avg       0.51      0.50      0.39       782\n",
      "weighted avg       0.51      0.53      0.41       782\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import StackingClassifier\n",
    "stack = StackingClassifier(estimators=[('svc',best_svc), ('adb', best_abc), ('gbdt', best_gbdt),('rfc',best_rfc)], final_estimator = svc)\n",
    "stack.fit(X_train,y_train)\n",
    "y_pred = stack.predict(X_test)\n",
    "print(\"Accuracy\",accuracy_score(y_test,y_pred))\n",
    "print(\"Precision\",precision_score(y_test,y_pred ))\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1980fe69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T15:45:03.273554Z",
     "iopub.status.busy": "2025-07-04T15:45:03.272456Z",
     "iopub.status.idle": "2025-07-04T15:47:58.808546Z",
     "shell.execute_reply": "2025-07-04T15:47:58.807552Z"
    },
    "papermill": {
     "duration": 175.565684,
     "end_time": "2025-07-04T15:47:58.823559",
     "exception": false,
     "start_time": "2025-07-04T15:45:03.257875",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END .................C=0.1, gamma=0.0001, kernel=linear; total time=   2.4s\n",
      "[CV] END ....................C=0.1, gamma=0.0001, kernel=rbf; total time=   3.1s\n",
      "[CV] END ...................C=0.1, gamma=0.0001, kernel=poly; total time=   2.2s\n",
      "[CV] END ...................C=0.1, gamma=0.0001, kernel=poly; total time=   2.4s\n",
      "[CV] END ................C=0.1, gamma=0.0001, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   3.0s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   3.2s\n",
      "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=  30.9s\n",
      "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   2.5s\n",
      "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   2.4s\n",
      "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   2.6s\n",
      "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   2.5s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   3.3s\n",
      "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   2.7s\n",
      "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   2.5s\n",
      "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   2.5s\n",
      "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   2.6s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   3.4s\n",
      "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   3.2s\n",
      "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   2.5s\n",
      "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   2.5s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   3.2s\n",
      "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   2.4s\n",
      "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   2.5s\n",
      "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   2.7s\n",
      "[CV] END ...................C=1, gamma=0.0001, kernel=linear; total time=   2.5s\n",
      "[CV] END ......................C=1, gamma=0.0001, kernel=rbf; total time=   3.2s\n",
      "[CV] END ......................C=1, gamma=0.0001, kernel=rbf; total time=   3.2s\n",
      "[CV] END .....................C=1, gamma=0.0001, kernel=poly; total time=   2.5s\n",
      "[CV] END ..................C=1, gamma=0.0001, kernel=sigmoid; total time=   3.1s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   2.8s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   3.3s\n",
      "[CV] END .........................C=10, gamma=1, kernel=poly; total time= 4.8min\n",
      "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   2.9s\n",
      "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   3.3s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   3.0s\n",
      "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   2.7s\n",
      "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   2.9s\n",
      "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   1.7s\n",
      "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   1.8s\n",
      "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   3.1s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   3.4s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   3.7s\n",
      "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   2.2s\n",
      "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   1.8s\n",
      "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   2.3s\n",
      "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   3.0s\n",
      "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   2.6s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   2.8s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   2.9s\n",
      "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   1.8s\n",
      "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   1.8s\n",
      "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   2.2s\n",
      "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   2.3s\n",
      "[CV] END ..................C=10, gamma=0.0001, kernel=linear; total time=   2.6s\n",
      "[CV] END ..................C=10, gamma=0.0001, kernel=linear; total time=   2.4s\n",
      "[CV] END .....................C=10, gamma=0.0001, kernel=rbf; total time=   3.5s\n",
      "[CV] END .....................C=10, gamma=0.0001, kernel=rbf; total time=   3.2s\n",
      "[CV] END ....................C=10, gamma=0.0001, kernel=poly; total time=   2.7s\n",
      "[CV] END .................C=10, gamma=0.0001, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   5.0s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   5.2s\n",
      "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   2.4s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   3.3s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   3.7s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   4.5s\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   2.9s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   2.5s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   3.1s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   2.5s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   2.4s\n",
      "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   2.4s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   3.3s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   3.6s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   2.8s\n",
      "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   2.5s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   3.0s\n",
      "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   2.4s\n",
      "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   2.3s\n",
      "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END .................C=0.1, gamma=0.0001, kernel=linear; total time=   2.5s\n",
      "[CV] END ....................C=0.1, gamma=0.0001, kernel=rbf; total time=   3.2s\n",
      "[CV] END ....................C=0.1, gamma=0.0001, kernel=rbf; total time=   3.1s\n",
      "[CV] END ................C=0.1, gamma=0.0001, kernel=sigmoid; total time=   2.9s\n",
      "[CV] END ................C=0.1, gamma=0.0001, kernel=sigmoid; total time=   3.5s\n",
      "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   2.6s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   3.1s\n",
      "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=  27.1s\n",
      "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=  12.3s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   3.3s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   3.3s\n",
      "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   2.6s\n",
      "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   2.4s\n",
      "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   2.5s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   3.3s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   3.1s\n",
      "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   2.5s\n",
      "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   2.5s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   3.3s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   3.2s\n",
      "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   2.5s\n",
      "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ...................C=1, gamma=0.0001, kernel=linear; total time=   2.4s\n",
      "[CV] END ......................C=1, gamma=0.0001, kernel=rbf; total time=   3.3s\n",
      "[CV] END .....................C=1, gamma=0.0001, kernel=poly; total time=   2.3s\n",
      "[CV] END .....................C=1, gamma=0.0001, kernel=poly; total time=   2.4s\n",
      "[CV] END ..................C=1, gamma=0.0001, kernel=sigmoid; total time=   3.3s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   3.1s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   2.9s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   2.9s\n",
      "[CV] END .........................C=10, gamma=1, kernel=poly; total time= 4.1min\n",
      "[CV] END .........................C=10, gamma=1, kernel=poly; total time= 1.8min\n",
      "[CV] END ....................C=10, gamma=0.0001, kernel=poly; total time=   2.3s\n",
      "[CV] END ....................C=10, gamma=0.0001, kernel=poly; total time=   2.7s\n",
      "[CV] END .................C=10, gamma=0.0001, kernel=sigmoid; total time=   2.9s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   5.5s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   5.8s\n",
      "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   2.4s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   3.5s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   5.2s\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   2.9s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   2.5s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   3.1s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   3.5s\n",
      "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   2.9s\n",
      "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   3.1s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   2.5s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   3.1s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   2.2s\n",
      "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   2.5s\n",
      "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   2.5s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   3.1s\n",
      "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   2.4s\n",
      "[CV] END ....................C=0.1, gamma=0.001, kernel=poly; total time=   2.3s\n",
      "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END .................C=0.1, gamma=0.0001, kernel=linear; total time=   2.5s\n",
      "[CV] END ....................C=0.1, gamma=0.0001, kernel=rbf; total time=   3.2s\n",
      "[CV] END ...................C=0.1, gamma=0.0001, kernel=poly; total time=   2.4s\n",
      "[CV] END ...................C=0.1, gamma=0.0001, kernel=poly; total time=   2.4s\n",
      "[CV] END ................C=0.1, gamma=0.0001, kernel=sigmoid; total time=   3.3s\n",
      "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   2.9s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   3.1s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   2.8s\n",
      "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=  29.0s\n",
      "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   2.6s\n",
      "[CV] END .......................C=1, gamma=1, kernel=sigmoid; total time=   2.6s\n",
      "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   2.3s\n",
      "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   2.5s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   3.1s\n",
      "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   2.5s\n",
      "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   2.5s\n",
      "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   2.6s\n",
      "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   2.7s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   3.3s\n",
      "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   3.1s\n",
      "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   2.9s\n",
      "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   2.6s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   3.2s\n",
      "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   2.6s\n",
      "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   2.7s\n",
      "[CV] END ...................C=1, gamma=0.0001, kernel=linear; total time=   2.7s\n",
      "[CV] END ......................C=1, gamma=0.0001, kernel=rbf; total time=   3.2s\n",
      "[CV] END .....................C=1, gamma=0.0001, kernel=poly; total time=   2.3s\n",
      "[CV] END ..................C=1, gamma=0.0001, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ..................C=1, gamma=0.0001, kernel=sigmoid; total time=   2.7s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   3.1s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   3.1s\n",
      "[CV] END .........................C=10, gamma=1, kernel=poly; total time= 4.8min\n",
      "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   2.4s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   2.8s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   2.6s\n",
      "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   2.3s\n",
      "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   2.3s\n",
      "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   1.4s\n",
      "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   1.4s\n",
      "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   3.0s\n",
      "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   3.0s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   3.0s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   3.5s\n",
      "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   2.7s\n",
      "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   2.7s\n",
      "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   2.9s\n",
      "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   2.8s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   3.3s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   3.3s\n",
      "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   2.4s\n",
      "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   2.9s\n",
      "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ..................C=10, gamma=0.0001, kernel=linear; total time=   3.2s\n",
      "[CV] END .....................C=10, gamma=0.0001, kernel=rbf; total time=   3.5s\n",
      "[CV] END .....................C=10, gamma=0.0001, kernel=rbf; total time=   3.1s\n",
      "[CV] END ....................C=10, gamma=0.0001, kernel=poly; total time=   2.5s\n",
      "[CV] END .................C=10, gamma=0.0001, kernel=sigmoid; total time=   3.0s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   4.8s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   4.9s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   2.6s\n",
      "[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   2.5s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   3.3s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   4.8s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   3.3s\n",
      "[CV] END .....................C=0.1, gamma=1, kernel=sigmoid; total time=   3.1s\n",
      "[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   2.6s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   3.3s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   2.5s\n",
      "[CV] END ......................C=0.1, gamma=0.1, kernel=poly; total time=   2.3s\n",
      "[CV] END ...................C=0.1, gamma=0.1, kernel=sigmoid; total time=   3.0s\n",
      "[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   2.5s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   3.2s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   2.7s\n",
      "[CV] END .....................C=0.1, gamma=0.01, kernel=poly; total time=   2.8s\n",
      "[CV] END ..................C=0.1, gamma=0.01, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   2.5s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   3.1s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   3.3s\n",
      "[CV] END .................C=0.1, gamma=0.001, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END .................C=0.1, gamma=0.0001, kernel=linear; total time=   2.5s\n",
      "[CV] END .................C=0.1, gamma=0.0001, kernel=linear; total time=   2.4s\n",
      "[CV] END ....................C=0.1, gamma=0.0001, kernel=rbf; total time=   3.1s\n",
      "[CV] END ...................C=0.1, gamma=0.0001, kernel=poly; total time=   2.5s\n",
      "[CV] END ................C=0.1, gamma=0.0001, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   2.6s\n",
      "[CV] END ........................C=1, gamma=1, kernel=linear; total time=   2.8s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   2.9s\n",
      "[CV] END ..........................C=1, gamma=1, kernel=poly; total time=  37.4s\n",
      "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   2.4s\n",
      "[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   2.4s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   3.2s\n",
      "[CV] END ........................C=1, gamma=0.1, kernel=poly; total time=   2.7s\n",
      "[CV] END .....................C=1, gamma=0.1, kernel=sigmoid; total time=   2.5s\n",
      "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   2.7s\n",
      "[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   2.6s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   3.8s\n",
      "[CV] END .......................C=1, gamma=0.01, kernel=poly; total time=   2.7s\n",
      "[CV] END ....................C=1, gamma=0.01, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   2.8s\n",
      "[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   2.5s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   3.1s\n",
      "[CV] END ......................C=1, gamma=0.001, kernel=poly; total time=   2.5s\n",
      "[CV] END ...................C=1, gamma=0.001, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ...................C=1, gamma=0.0001, kernel=linear; total time=   2.7s\n",
      "[CV] END ...................C=1, gamma=0.0001, kernel=linear; total time=   2.5s\n",
      "[CV] END ......................C=1, gamma=0.0001, kernel=rbf; total time=   3.3s\n",
      "[CV] END .....................C=1, gamma=0.0001, kernel=poly; total time=   2.4s\n",
      "[CV] END ..................C=1, gamma=0.0001, kernel=sigmoid; total time=   3.6s\n",
      "[CV] END .......................C=10, gamma=1, kernel=linear; total time=   3.8s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   3.1s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   3.0s\n",
      "[CV] END .........................C=10, gamma=1, kernel=poly; total time= 4.6min\n",
      "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   2.0s\n",
      "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   2.0s\n",
      "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   2.1s\n",
      "[CV] END ......................C=10, gamma=1, kernel=sigmoid; total time=   2.3s\n",
      "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   3.3s\n",
      "[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   3.1s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   3.0s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   3.3s\n",
      "[CV] END .......................C=10, gamma=0.1, kernel=poly; total time=   2.6s\n",
      "[CV] END ....................C=10, gamma=0.1, kernel=sigmoid; total time=   1.7s\n",
      "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   3.1s\n",
      "[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   3.0s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   3.3s\n",
      "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   2.6s\n",
      "[CV] END ......................C=10, gamma=0.01, kernel=poly; total time=   2.1s\n",
      "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   2.7s\n",
      "[CV] END ...................C=10, gamma=0.01, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   3.2s\n",
      "[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   2.8s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   3.2s\n",
      "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   2.3s\n",
      "[CV] END .....................C=10, gamma=0.001, kernel=poly; total time=   2.4s\n",
      "[CV] END ..................C=10, gamma=0.001, kernel=sigmoid; total time=   2.8s\n",
      "[CV] END ..................C=10, gamma=0.0001, kernel=linear; total time=   3.6s\n",
      "[CV] END ..................C=10, gamma=0.0001, kernel=linear; total time=   3.3s\n",
      "[CV] END .....................C=10, gamma=0.0001, kernel=rbf; total time=   3.7s\n",
      "[CV] END ....................C=10, gamma=0.0001, kernel=poly; total time=   2.5s\n",
      "[CV] END .................C=10, gamma=0.0001, kernel=sigmoid; total time=   3.0s\n",
      "[CV] END .................C=10, gamma=0.0001, kernel=sigmoid; total time=   2.0s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   4.6s\n",
      "[CV] END ......................C=100, gamma=0.1, kernel=poly; total time=   3.4s\n",
      "[CV] END ........................C=0.1, gamma=1, kernel=poly; total time=   4.5s\n",
      "Accuracy 0.5063938618925832\n",
      "Precision 0.5323383084577115\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.48      0.49      0.49       370\n",
      "           1       0.53      0.52      0.53       412\n",
      "\n",
      "    accuracy                           0.51       782\n",
      "   macro avg       0.51      0.51      0.51       782\n",
      "weighted avg       0.51      0.51      0.51       782\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import StackingClassifier\n",
    "stack = StackingClassifier(estimators=[('svc',best_svc), ('adb', best_abc), ('gbdt', best_gbdt),('rfc',best_rfc)], final_estimator = rfc)\n",
    "stack.fit(X_train,y_train)\n",
    "y_pred = stack.predict(X_test)\n",
    "print(\"Accuracy\",accuracy_score(y_test,y_pred))\n",
    "print(\"Precision\",precision_score(y_test,y_pred ))\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8bc31d98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T15:47:58.852773Z",
     "iopub.status.busy": "2025-07-04T15:47:58.852424Z",
     "iopub.status.idle": "2025-07-04T15:48:34.750641Z",
     "shell.execute_reply": "2025-07-04T15:48:34.749798Z"
    },
    "papermill": {
     "duration": 35.927639,
     "end_time": "2025-07-04T15:48:34.765313",
     "exception": false,
     "start_time": "2025-07-04T15:47:58.837674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy 0.5127877237851662\n",
      "Precision 0.5359628770301624\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import VotingClassifier\n",
    "voting = VotingClassifier(estimators=[('svc',best_svc), ('adb', best_abc), ('gbdt', best_gbdt),('rfc',best_rfc)],voting='hard')\n",
    "voting.fit(X_train,y_train)\n",
    "y_pred = voting.predict(X_test)\n",
    "print(\"Accuracy\",accuracy_score(y_test,y_pred))\n",
    "print(\"Precision\",precision_score(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "cf5c1f80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T15:48:34.795041Z",
     "iopub.status.busy": "2025-07-04T15:48:34.794731Z",
     "iopub.status.idle": "2025-07-04T15:48:34.809177Z",
     "shell.execute_reply": "2025-07-04T15:48:34.808075Z"
    },
    "papermill": {
     "duration": 0.030966,
     "end_time": "2025-07-04T15:48:34.810698",
     "exception": false,
     "start_time": "2025-07-04T15:48:34.779732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.48      0.46      0.47       370\n",
      "           1       0.54      0.56      0.55       412\n",
      "\n",
      "    accuracy                           0.51       782\n",
      "   macro avg       0.51      0.51      0.51       782\n",
      "weighted avg       0.51      0.51      0.51       782\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6c471c5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T15:48:34.840939Z",
     "iopub.status.busy": "2025-07-04T15:48:34.840626Z",
     "iopub.status.idle": "2025-07-04T15:48:34.876407Z",
     "shell.execute_reply": "2025-07-04T15:48:34.875468Z"
    },
    "papermill": {
     "duration": 0.053265,
     "end_time": "2025-07-04T15:48:34.878486",
     "exception": false,
     "start_time": "2025-07-04T15:48:34.825221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Buy signals indices: [1, 7, 10, 11, 12, 13, 14, 20, 22, 23, 24, 25, 28, 30, 32, 34, 37, 38, 41, 42, 43, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 84, 85, 88, 95, 96, 97, 100, 101, 103, 104, 105, 106, 110, 111, 112, 113, 114, 117, 122, 126, 128, 129, 130, 131, 134, 135, 137, 139, 141, 143, 144, 145, 148, 149, 151, 153, 154, 155, 156, 159, 160, 161, 163, 164, 166, 168, 169, 170, 172, 173, 175, 176, 177, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 195, 196, 197, 199, 202, 203, 204, 205, 206, 209, 210, 212, 214, 215, 219, 221, 223, 225, 226, 227, 228, 230, 232, 236, 241, 245, 246, 247, 250, 251, 252, 254, 255, 258, 260, 261, 264, 265, 269, 271, 273, 276, 277, 283, 284, 285, 286, 287, 290, 291, 293, 294, 299, 300, 304, 305, 306, 307, 308, 311, 313, 314, 315, 316, 318, 319, 321, 324, 325, 328, 331, 334, 336, 340, 341, 342, 347, 348, 349, 351, 353, 355, 357, 358, 359, 367, 368, 370, 374, 379, 380, 381, 382, 385, 386, 387, 389, 392, 393, 394, 395, 396, 397, 398, 401, 402, 404, 406, 407, 408, 411, 412, 413, 414, 418, 419, 420, 421, 422, 423, 426, 427, 431, 432, 436, 437, 438, 439, 441, 444, 446, 448, 449, 452, 453, 454, 455, 456, 458, 460, 464, 465, 466, 467, 468, 469, 471, 473, 475, 480, 481, 483, 491, 492, 493, 494, 497, 498, 499, 501, 502, 503, 504, 505, 508, 509, 510, 513, 514, 515, 516, 517, 519, 520, 521, 524, 528, 533, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 547, 552, 553, 555, 556, 557, 560, 561, 563, 565, 566, 570, 572, 573, 578, 580, 581, 582, 583, 589, 590, 591, 595, 599, 600, 601, 603, 605, 606, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 623, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 639, 640, 641, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 659, 662, 666, 667, 669, 673, 674, 675, 682, 684, 686, 688, 689, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 705, 706, 707, 709, 711, 716, 717, 718, 719, 720, 721, 723, 727, 729, 731, 733, 735, 736, 738, 742, 743, 744, 746, 748, 750, 751, 758, 762, 763, 767, 768, 769, 771, 772, 773, 775, 776, 778, 779, 781]\n",
      "Buy dates: [Timestamp('2020-11-04 00:00:00'), Timestamp('2020-11-17 00:00:00'), Timestamp('2020-11-20 00:00:00'), Timestamp('2020-11-23 00:00:00'), Timestamp('2020-11-24 00:00:00'), Timestamp('2020-11-25 00:00:00'), Timestamp('2020-11-30 00:00:00'), Timestamp('2020-12-09 00:00:00'), Timestamp('2020-12-11 00:00:00'), Timestamp('2020-12-14 00:00:00'), Timestamp('2020-12-15 00:00:00'), Timestamp('2020-12-16 00:00:00'), Timestamp('2020-12-21 00:00:00'), Timestamp('2020-12-23 00:00:00'), Timestamp('2020-12-28 00:00:00'), Timestamp('2021-01-04 00:00:00'), Timestamp('2021-01-07 00:00:00'), Timestamp('2021-01-08 00:00:00'), Timestamp('2021-01-13 00:00:00'), Timestamp('2021-01-14 00:00:00'), Timestamp('2021-01-15 00:00:00'), Timestamp('2021-01-22 00:00:00'), Timestamp('2021-01-25 00:00:00'), Timestamp('2021-01-26 00:00:00'), Timestamp('2021-01-27 00:00:00'), Timestamp('2021-02-02 00:00:00'), Timestamp('2021-02-03 00:00:00'), Timestamp('2021-02-05 00:00:00'), Timestamp('2021-02-08 00:00:00'), Timestamp('2021-02-09 00:00:00'), Timestamp('2021-02-11 00:00:00'), Timestamp('2021-02-16 00:00:00'), Timestamp('2021-02-18 00:00:00'), Timestamp('2021-02-19 00:00:00'), Timestamp('2021-02-23 00:00:00'), Timestamp('2021-02-24 00:00:00'), Timestamp('2021-03-02 00:00:00'), Timestamp('2021-03-03 00:00:00'), Timestamp('2021-03-04 00:00:00'), Timestamp('2021-03-05 00:00:00'), Timestamp('2021-03-09 00:00:00'), Timestamp('2021-03-10 00:00:00'), Timestamp('2021-03-11 00:00:00'), Timestamp('2021-03-12 00:00:00'), Timestamp('2021-03-15 00:00:00'), Timestamp('2021-03-18 00:00:00'), Timestamp('2021-03-19 00:00:00'), Timestamp('2021-03-22 00:00:00'), Timestamp('2021-03-26 00:00:00'), Timestamp('2021-03-29 00:00:00'), Timestamp('2021-04-05 00:00:00'), Timestamp('2021-04-16 00:00:00'), Timestamp('2021-04-19 00:00:00'), Timestamp('2021-04-20 00:00:00'), Timestamp('2021-04-23 00:00:00'), Timestamp('2021-04-26 00:00:00'), Timestamp('2021-04-28 00:00:00'), Timestamp('2021-04-29 00:00:00'), Timestamp('2021-04-30 00:00:00'), Timestamp('2021-05-03 00:00:00'), Timestamp('2021-05-07 00:00:00'), Timestamp('2021-05-10 00:00:00'), Timestamp('2021-05-11 00:00:00'), Timestamp('2021-05-12 00:00:00'), Timestamp('2021-05-13 00:00:00'), Timestamp('2021-05-21 00:00:00'), Timestamp('2021-06-01 00:00:00'), Timestamp('2021-06-07 00:00:00'), Timestamp('2021-06-09 00:00:00'), Timestamp('2021-06-10 00:00:00'), Timestamp('2021-06-11 00:00:00'), Timestamp('2021-06-14 00:00:00'), Timestamp('2021-06-18 00:00:00'), Timestamp('2021-06-21 00:00:00'), Timestamp('2021-06-23 00:00:00'), Timestamp('2021-06-28 00:00:00'), Timestamp('2021-07-01 00:00:00'), Timestamp('2021-07-09 00:00:00'), Timestamp('2021-07-12 00:00:00'), Timestamp('2021-07-14 00:00:00'), Timestamp('2021-07-19 00:00:00'), Timestamp('2021-07-20 00:00:00'), Timestamp('2021-07-22 00:00:00'), Timestamp('2021-07-27 00:00:00'), Timestamp('2021-07-28 00:00:00'), Timestamp('2021-07-29 00:00:00'), Timestamp('2021-07-30 00:00:00'), Timestamp('2021-08-04 00:00:00'), Timestamp('2021-08-05 00:00:00'), Timestamp('2021-08-09 00:00:00'), Timestamp('2021-08-11 00:00:00'), Timestamp('2021-08-12 00:00:00'), Timestamp('2021-08-19 00:00:00'), Timestamp('2021-08-25 00:00:00'), Timestamp('2021-08-26 00:00:00'), Timestamp('2021-08-31 00:00:00'), Timestamp('2021-09-02 00:00:00'), Timestamp('2021-09-03 00:00:00'), Timestamp('2021-09-10 00:00:00'), Timestamp('2021-09-13 00:00:00'), Timestamp('2021-09-14 00:00:00'), Timestamp('2021-09-17 00:00:00'), Timestamp('2021-09-21 00:00:00'), Timestamp('2021-09-22 00:00:00'), Timestamp('2021-09-23 00:00:00'), Timestamp('2021-09-24 00:00:00'), Timestamp('2021-09-27 00:00:00'), Timestamp('2021-09-29 00:00:00'), Timestamp('2021-10-01 00:00:00'), Timestamp('2021-10-04 00:00:00'), Timestamp('2021-10-05 00:00:00'), Timestamp('2021-10-06 00:00:00'), Timestamp('2021-10-07 00:00:00'), Timestamp('2021-10-11 00:00:00'), Timestamp('2021-10-13 00:00:00'), Timestamp('2021-10-14 00:00:00'), Timestamp('2021-10-18 00:00:00'), Timestamp('2021-10-21 00:00:00'), Timestamp('2021-10-22 00:00:00'), Timestamp('2021-10-25 00:00:00'), Timestamp('2021-10-26 00:00:00'), Timestamp('2021-10-27 00:00:00'), Timestamp('2021-11-01 00:00:00'), Timestamp('2021-11-02 00:00:00'), Timestamp('2021-11-04 00:00:00'), Timestamp('2021-11-09 00:00:00'), Timestamp('2021-11-10 00:00:00'), Timestamp('2021-11-18 00:00:00'), Timestamp('2021-11-22 00:00:00'), Timestamp('2021-11-24 00:00:00'), Timestamp('2021-11-30 00:00:00'), Timestamp('2021-12-01 00:00:00'), Timestamp('2021-12-02 00:00:00'), Timestamp('2021-12-03 00:00:00'), Timestamp('2021-12-07 00:00:00'), Timestamp('2021-12-09 00:00:00'), Timestamp('2021-12-16 00:00:00'), Timestamp('2021-12-28 00:00:00'), Timestamp('2022-01-03 00:00:00'), Timestamp('2022-01-06 00:00:00'), Timestamp('2022-01-10 00:00:00'), Timestamp('2022-01-18 00:00:00'), Timestamp('2022-01-19 00:00:00'), Timestamp('2022-01-20 00:00:00'), Timestamp('2022-01-24 00:00:00'), Timestamp('2022-01-25 00:00:00'), Timestamp('2022-01-28 00:00:00'), Timestamp('2022-02-01 00:00:00'), Timestamp('2022-02-02 00:00:00'), Timestamp('2022-02-07 00:00:00'), Timestamp('2022-02-08 00:00:00'), Timestamp('2022-02-14 00:00:00'), Timestamp('2022-02-16 00:00:00'), Timestamp('2022-02-18 00:00:00'), Timestamp('2022-02-25 00:00:00'), Timestamp('2022-02-28 00:00:00'), Timestamp('2022-03-08 00:00:00'), Timestamp('2022-03-09 00:00:00'), Timestamp('2022-03-10 00:00:00'), Timestamp('2022-03-11 00:00:00'), Timestamp('2022-03-14 00:00:00'), Timestamp('2022-03-17 00:00:00'), Timestamp('2022-03-18 00:00:00'), Timestamp('2022-03-22 00:00:00'), Timestamp('2022-03-23 00:00:00'), Timestamp('2022-03-31 00:00:00'), Timestamp('2022-04-01 00:00:00'), Timestamp('2022-04-07 00:00:00'), Timestamp('2022-04-12 00:00:00'), Timestamp('2022-04-13 00:00:00'), Timestamp('2022-04-19 00:00:00'), Timestamp('2022-04-20 00:00:00'), Timestamp('2022-04-27 00:00:00'), Timestamp('2022-04-29 00:00:00'), Timestamp('2022-05-02 00:00:00'), Timestamp('2022-05-04 00:00:00'), Timestamp('2022-05-09 00:00:00'), Timestamp('2022-05-11 00:00:00'), Timestamp('2022-05-12 00:00:00'), Timestamp('2022-05-16 00:00:00'), Timestamp('2022-05-19 00:00:00'), Timestamp('2022-05-20 00:00:00'), Timestamp('2022-05-25 00:00:00'), Timestamp('2022-06-01 00:00:00'), Timestamp('2022-06-07 00:00:00'), Timestamp('2022-06-14 00:00:00'), Timestamp('2022-06-21 00:00:00'), Timestamp('2022-06-22 00:00:00'), Timestamp('2022-06-23 00:00:00'), Timestamp('2022-07-01 00:00:00'), Timestamp('2022-07-07 00:00:00'), Timestamp('2022-07-08 00:00:00'), Timestamp('2022-07-13 00:00:00'), Timestamp('2022-07-18 00:00:00'), Timestamp('2022-07-20 00:00:00'), Timestamp('2022-07-25 00:00:00'), Timestamp('2022-07-26 00:00:00'), Timestamp('2022-07-27 00:00:00'), Timestamp('2022-08-09 00:00:00'), Timestamp('2022-08-10 00:00:00'), Timestamp('2022-08-16 00:00:00'), Timestamp('2022-08-22 00:00:00'), Timestamp('2022-09-01 00:00:00'), Timestamp('2022-09-02 00:00:00'), Timestamp('2022-09-06 00:00:00'), Timestamp('2022-09-07 00:00:00'), Timestamp('2022-09-13 00:00:00'), Timestamp('2022-09-14 00:00:00'), Timestamp('2022-09-15 00:00:00'), Timestamp('2022-09-19 00:00:00'), Timestamp('2022-10-04 00:00:00'), Timestamp('2022-10-06 00:00:00'), Timestamp('2022-10-07 00:00:00'), Timestamp('2022-10-10 00:00:00'), Timestamp('2022-10-11 00:00:00'), Timestamp('2022-10-13 00:00:00'), Timestamp('2022-10-18 00:00:00'), Timestamp('2022-10-24 00:00:00'), Timestamp('2022-10-25 00:00:00'), Timestamp('2022-10-27 00:00:00'), Timestamp('2022-10-31 00:00:00'), Timestamp('2022-11-02 00:00:00'), Timestamp('2022-11-03 00:00:00'), Timestamp('2022-11-09 00:00:00'), Timestamp('2022-11-11 00:00:00'), Timestamp('2022-11-15 00:00:00'), Timestamp('2022-11-16 00:00:00'), Timestamp('2022-11-25 00:00:00'), Timestamp('2022-11-28 00:00:00'), Timestamp('2022-11-29 00:00:00'), Timestamp('2022-12-01 00:00:00'), Timestamp('2022-12-02 00:00:00'), Timestamp('2022-12-05 00:00:00'), Timestamp('2022-12-08 00:00:00'), Timestamp('2022-12-09 00:00:00'), Timestamp('2022-12-15 00:00:00'), Timestamp('2022-12-16 00:00:00'), Timestamp('2022-12-22 00:00:00'), Timestamp('2022-12-23 00:00:00'), Timestamp('2022-12-29 00:00:00'), Timestamp('2022-12-30 00:00:00'), Timestamp('2023-01-04 00:00:00'), Timestamp('2023-01-10 00:00:00'), Timestamp('2023-01-13 00:00:00'), Timestamp('2023-01-20 00:00:00'), Timestamp('2023-01-23 00:00:00'), Timestamp('2023-01-26 00:00:00'), Timestamp('2023-01-27 00:00:00'), Timestamp('2023-01-30 00:00:00'), Timestamp('2023-02-01 00:00:00'), Timestamp('2023-02-02 00:00:00'), Timestamp('2023-02-07 00:00:00'), Timestamp('2023-02-10 00:00:00'), Timestamp('2023-02-22 00:00:00'), Timestamp('2023-02-23 00:00:00'), Timestamp('2023-02-27 00:00:00'), Timestamp('2023-02-28 00:00:00'), Timestamp('2023-03-01 00:00:00'), Timestamp('2023-03-02 00:00:00'), Timestamp('2023-03-06 00:00:00'), Timestamp('2023-03-09 00:00:00'), Timestamp('2023-03-14 00:00:00'), Timestamp('2023-03-23 00:00:00'), Timestamp('2023-03-28 00:00:00'), Timestamp('2023-04-05 00:00:00'), Timestamp('2023-04-24 00:00:00'), Timestamp('2023-04-26 00:00:00'), Timestamp('2023-05-01 00:00:00'), Timestamp('2023-05-02 00:00:00'), Timestamp('2023-05-15 00:00:00'), Timestamp('2023-05-16 00:00:00'), Timestamp('2023-05-17 00:00:00'), Timestamp('2023-05-19 00:00:00'), Timestamp('2023-05-22 00:00:00'), Timestamp('2023-05-24 00:00:00'), Timestamp('2023-05-26 00:00:00'), Timestamp('2023-06-01 00:00:00'), Timestamp('2023-06-06 00:00:00'), Timestamp('2023-06-07 00:00:00'), Timestamp('2023-06-08 00:00:00'), Timestamp('2023-06-16 00:00:00'), Timestamp('2023-06-22 00:00:00'), Timestamp('2023-06-23 00:00:00'), Timestamp('2023-06-26 00:00:00'), Timestamp('2023-06-28 00:00:00'), Timestamp('2023-07-05 00:00:00'), Timestamp('2023-07-06 00:00:00'), Timestamp('2023-07-07 00:00:00'), Timestamp('2023-07-12 00:00:00'), Timestamp('2023-07-18 00:00:00'), Timestamp('2023-07-25 00:00:00'), Timestamp('2023-07-27 00:00:00'), Timestamp('2023-07-28 00:00:00'), Timestamp('2023-08-01 00:00:00'), Timestamp('2023-08-02 00:00:00'), Timestamp('2023-08-07 00:00:00'), Timestamp('2023-08-08 00:00:00'), Timestamp('2023-08-14 00:00:00'), Timestamp('2023-08-16 00:00:00'), Timestamp('2023-08-17 00:00:00'), Timestamp('2023-08-22 00:00:00'), Timestamp('2023-08-28 00:00:00'), Timestamp('2023-09-07 00:00:00'), Timestamp('2023-09-08 00:00:00'), Timestamp('2023-09-12 00:00:00'), Timestamp('2023-09-13 00:00:00'), Timestamp('2023-09-14 00:00:00'), Timestamp('2023-09-26 00:00:00'), Timestamp('2023-09-27 00:00:00'), Timestamp('2023-10-03 00:00:00'), Timestamp('2023-10-12 00:00:00'), Timestamp('2023-10-13 00:00:00'), Timestamp('2023-10-24 00:00:00'), Timestamp('2023-10-26 00:00:00'), Timestamp('2023-10-27 00:00:00'), Timestamp('2023-11-06 00:00:00'), Timestamp('2023-11-08 00:00:00'), Timestamp('2023-11-09 00:00:00'), Timestamp('2023-11-13 00:00:00'), Timestamp('2023-11-14 00:00:00'), Timestamp('2023-12-04 00:00:00'), Timestamp('2023-12-05 00:00:00'), Timestamp('2023-12-06 00:00:00'), Timestamp('2023-12-13 00:00:00'), Timestamp('2023-12-20 00:00:00'), Timestamp('2023-12-22 00:00:00'), Timestamp('2023-12-26 00:00:00'), Timestamp('2024-01-03 00:00:00'), Timestamp('2024-01-08 00:00:00'), Timestamp('2024-01-09 00:00:00'), Timestamp('2024-01-16 00:00:00'), Timestamp('2024-01-18 00:00:00'), Timestamp('2024-01-22 00:00:00'), Timestamp('2024-01-23 00:00:00'), Timestamp('2024-01-24 00:00:00'), Timestamp('2024-01-25 00:00:00'), Timestamp('2024-01-26 00:00:00'), Timestamp('2024-01-29 00:00:00'), Timestamp('2024-01-31 00:00:00'), Timestamp('2024-02-01 00:00:00'), Timestamp('2024-02-07 00:00:00'), Timestamp('2024-02-09 00:00:00'), Timestamp('2024-02-12 00:00:00'), Timestamp('2024-02-13 00:00:00'), Timestamp('2024-02-14 00:00:00'), Timestamp('2024-02-15 00:00:00'), Timestamp('2024-02-21 00:00:00'), Timestamp('2024-02-23 00:00:00'), Timestamp('2024-02-26 00:00:00'), Timestamp('2024-02-27 00:00:00'), Timestamp('2024-02-28 00:00:00'), Timestamp('2024-02-29 00:00:00'), Timestamp('2024-03-01 00:00:00'), Timestamp('2024-03-06 00:00:00'), Timestamp('2024-03-07 00:00:00'), Timestamp('2024-03-08 00:00:00'), Timestamp('2024-03-14 00:00:00'), Timestamp('2024-03-15 00:00:00'), Timestamp('2024-03-20 00:00:00'), Timestamp('2024-03-21 00:00:00'), Timestamp('2024-03-22 00:00:00'), Timestamp('2024-03-25 00:00:00'), Timestamp('2024-03-27 00:00:00'), Timestamp('2024-03-28 00:00:00'), Timestamp('2024-04-01 00:00:00'), Timestamp('2024-04-02 00:00:00'), Timestamp('2024-04-04 00:00:00'), Timestamp('2024-04-12 00:00:00'), Timestamp('2024-04-16 00:00:00'), Timestamp('2024-04-19 00:00:00'), Timestamp('2024-04-26 00:00:00'), Timestamp('2024-04-30 00:00:00'), Timestamp('2024-05-02 00:00:00'), Timestamp('2024-05-09 00:00:00'), Timestamp('2024-05-13 00:00:00'), Timestamp('2024-05-14 00:00:00'), Timestamp('2024-05-30 00:00:00'), Timestamp('2024-06-04 00:00:00'), Timestamp('2024-06-06 00:00:00'), Timestamp('2024-06-10 00:00:00'), Timestamp('2024-06-11 00:00:00'), Timestamp('2024-06-13 00:00:00'), Timestamp('2024-06-18 00:00:00'), Timestamp('2024-06-25 00:00:00'), Timestamp('2024-06-26 00:00:00'), Timestamp('2024-06-27 00:00:00'), Timestamp('2024-07-05 00:00:00'), Timestamp('2024-07-08 00:00:00'), Timestamp('2024-07-09 00:00:00'), Timestamp('2024-07-10 00:00:00'), Timestamp('2024-07-11 00:00:00'), Timestamp('2024-07-18 00:00:00'), Timestamp('2024-07-19 00:00:00'), Timestamp('2024-07-22 00:00:00'), Timestamp('2024-07-24 00:00:00'), Timestamp('2024-07-29 00:00:00'), Timestamp('2024-08-07 00:00:00'), Timestamp('2024-08-08 00:00:00'), Timestamp('2024-08-09 00:00:00'), Timestamp('2024-08-12 00:00:00'), Timestamp('2024-08-13 00:00:00'), Timestamp('2024-08-19 00:00:00'), Timestamp('2024-08-21 00:00:00'), Timestamp('2024-09-04 00:00:00'), Timestamp('2024-09-09 00:00:00'), Timestamp('2024-09-11 00:00:00'), Timestamp('2024-09-17 00:00:00'), Timestamp('2024-09-19 00:00:00'), Timestamp('2024-09-20 00:00:00'), Timestamp('2024-09-24 00:00:00'), Timestamp('2024-10-03 00:00:00'), Timestamp('2024-10-04 00:00:00'), Timestamp('2024-10-09 00:00:00'), Timestamp('2024-10-15 00:00:00'), Timestamp('2024-10-17 00:00:00'), Timestamp('2024-10-24 00:00:00'), Timestamp('2024-10-25 00:00:00'), Timestamp('2024-11-11 00:00:00'), Timestamp('2024-11-15 00:00:00'), Timestamp('2024-11-18 00:00:00'), Timestamp('2024-11-25 00:00:00'), Timestamp('2024-11-26 00:00:00'), Timestamp('2024-11-27 00:00:00'), Timestamp('2024-12-05 00:00:00'), Timestamp('2024-12-06 00:00:00'), Timestamp('2024-12-09 00:00:00'), Timestamp('2024-12-11 00:00:00'), Timestamp('2024-12-12 00:00:00'), Timestamp('2024-12-18 00:00:00'), Timestamp('2024-12-19 00:00:00'), Timestamp('2024-12-23 00:00:00')]\n",
      "Sell signals indices: [0, 2, 3, 4, 5, 6, 8, 9, 15, 16, 17, 18, 19, 21, 26, 27, 29, 31, 33, 35, 36, 39, 40, 44, 45, 46, 51, 54, 58, 60, 62, 67, 77, 78, 82, 83, 86, 87, 89, 90, 91, 92, 93, 94, 98, 99, 102, 107, 108, 109, 115, 116, 118, 119, 120, 121, 123, 124, 125, 127, 132, 133, 136, 138, 140, 142, 146, 147, 150, 152, 157, 158, 162, 165, 167, 171, 174, 178, 179, 186, 188, 194, 198, 200, 201, 207, 208, 211, 213, 216, 217, 218, 220, 222, 224, 229, 231, 233, 234, 235, 237, 238, 239, 240, 242, 243, 244, 248, 249, 253, 256, 257, 259, 262, 263, 266, 267, 268, 270, 272, 274, 275, 278, 279, 280, 281, 282, 288, 289, 292, 295, 296, 297, 298, 301, 302, 303, 309, 310, 312, 317, 320, 322, 323, 326, 327, 329, 330, 332, 333, 335, 337, 338, 339, 343, 344, 345, 346, 350, 352, 354, 356, 360, 361, 362, 363, 364, 365, 366, 369, 371, 372, 373, 375, 376, 377, 378, 383, 384, 388, 390, 391, 399, 400, 403, 405, 409, 410, 415, 416, 417, 424, 425, 428, 429, 430, 433, 434, 435, 440, 442, 443, 445, 447, 450, 451, 457, 459, 461, 462, 463, 470, 472, 474, 476, 477, 478, 479, 482, 484, 485, 486, 487, 488, 489, 490, 495, 496, 500, 506, 507, 511, 512, 518, 522, 523, 525, 526, 527, 529, 530, 531, 532, 534, 539, 546, 548, 549, 550, 551, 554, 558, 559, 562, 564, 567, 568, 569, 571, 574, 575, 576, 577, 579, 584, 585, 586, 587, 588, 592, 593, 594, 596, 597, 598, 602, 604, 607, 609, 619, 620, 622, 628, 630, 637, 638, 642, 645, 655, 656, 658, 660, 661, 663, 664, 665, 668, 670, 671, 672, 676, 677, 678, 679, 680, 681, 683, 685, 687, 690, 696, 697, 703, 704, 708, 710, 712, 713, 714, 715, 722, 724, 725, 726, 728, 730, 732, 734, 737, 739, 740, 741, 745, 747, 749, 752, 753, 754, 755, 756, 757, 759, 760, 761, 764, 765, 766, 770, 774, 777, 780]\n",
      "Sell dates: [Timestamp('2020-11-03 00:00:00'), Timestamp('2020-11-05 00:00:00'), Timestamp('2020-11-10 00:00:00'), Timestamp('2020-11-11 00:00:00'), Timestamp('2020-11-13 00:00:00'), Timestamp('2020-11-16 00:00:00'), Timestamp('2020-11-18 00:00:00'), Timestamp('2020-11-19 00:00:00'), Timestamp('2020-12-01 00:00:00'), Timestamp('2020-12-02 00:00:00'), Timestamp('2020-12-03 00:00:00'), Timestamp('2020-12-04 00:00:00'), Timestamp('2020-12-08 00:00:00'), Timestamp('2020-12-10 00:00:00'), Timestamp('2020-12-17 00:00:00'), Timestamp('2020-12-18 00:00:00'), Timestamp('2020-12-22 00:00:00'), Timestamp('2020-12-24 00:00:00'), Timestamp('2020-12-31 00:00:00'), Timestamp('2021-01-05 00:00:00'), Timestamp('2021-01-06 00:00:00'), Timestamp('2021-01-11 00:00:00'), Timestamp('2021-01-12 00:00:00'), Timestamp('2021-01-19 00:00:00'), Timestamp('2021-01-20 00:00:00'), Timestamp('2021-01-21 00:00:00'), Timestamp('2021-01-28 00:00:00'), Timestamp('2021-02-04 00:00:00'), Timestamp('2021-02-10 00:00:00'), Timestamp('2021-02-12 00:00:00'), Timestamp('2021-02-17 00:00:00'), Timestamp('2021-02-25 00:00:00'), Timestamp('2021-03-16 00:00:00'), Timestamp('2021-03-17 00:00:00'), Timestamp('2021-03-23 00:00:00'), Timestamp('2021-03-25 00:00:00'), Timestamp('2021-03-30 00:00:00'), Timestamp('2021-03-31 00:00:00'), Timestamp('2021-04-06 00:00:00'), Timestamp('2021-04-07 00:00:00'), Timestamp('2021-04-08 00:00:00'), Timestamp('2021-04-12 00:00:00'), Timestamp('2021-04-14 00:00:00'), Timestamp('2021-04-15 00:00:00'), Timestamp('2021-04-21 00:00:00'), Timestamp('2021-04-22 00:00:00'), Timestamp('2021-04-27 00:00:00'), Timestamp('2021-05-04 00:00:00'), Timestamp('2021-05-05 00:00:00'), Timestamp('2021-05-06 00:00:00'), Timestamp('2021-05-14 00:00:00'), Timestamp('2021-05-19 00:00:00'), Timestamp('2021-05-25 00:00:00'), Timestamp('2021-05-26 00:00:00'), Timestamp('2021-05-27 00:00:00'), Timestamp('2021-05-28 00:00:00'), Timestamp('2021-06-02 00:00:00'), Timestamp('2021-06-03 00:00:00'), Timestamp('2021-06-04 00:00:00'), Timestamp('2021-06-08 00:00:00'), Timestamp('2021-06-16 00:00:00'), Timestamp('2021-06-17 00:00:00'), Timestamp('2021-06-22 00:00:00'), Timestamp('2021-06-24 00:00:00'), Timestamp('2021-06-29 00:00:00'), Timestamp('2021-07-08 00:00:00'), Timestamp('2021-07-15 00:00:00'), Timestamp('2021-07-16 00:00:00'), Timestamp('2021-07-21 00:00:00'), Timestamp('2021-07-23 00:00:00'), Timestamp('2021-08-02 00:00:00'), Timestamp('2021-08-03 00:00:00'), Timestamp('2021-08-10 00:00:00'), Timestamp('2021-08-18 00:00:00'), Timestamp('2021-08-20 00:00:00'), Timestamp('2021-09-01 00:00:00'), Timestamp('2021-09-09 00:00:00'), Timestamp('2021-09-15 00:00:00'), Timestamp('2021-09-16 00:00:00'), Timestamp('2021-09-28 00:00:00'), Timestamp('2021-09-30 00:00:00'), Timestamp('2021-10-08 00:00:00'), Timestamp('2021-10-15 00:00:00'), Timestamp('2021-10-19 00:00:00'), Timestamp('2021-10-20 00:00:00'), Timestamp('2021-10-28 00:00:00'), Timestamp('2021-10-29 00:00:00'), Timestamp('2021-11-03 00:00:00'), Timestamp('2021-11-05 00:00:00'), Timestamp('2021-11-11 00:00:00'), Timestamp('2021-11-15 00:00:00'), Timestamp('2021-11-16 00:00:00'), Timestamp('2021-11-19 00:00:00'), Timestamp('2021-11-23 00:00:00'), Timestamp('2021-11-26 00:00:00'), Timestamp('2021-12-06 00:00:00'), Timestamp('2021-12-08 00:00:00'), Timestamp('2021-12-13 00:00:00'), Timestamp('2021-12-14 00:00:00'), Timestamp('2021-12-15 00:00:00'), Timestamp('2021-12-17 00:00:00'), Timestamp('2021-12-20 00:00:00'), Timestamp('2021-12-22 00:00:00'), Timestamp('2021-12-23 00:00:00'), Timestamp('2021-12-29 00:00:00'), Timestamp('2021-12-30 00:00:00'), Timestamp('2021-12-31 00:00:00'), Timestamp('2022-01-11 00:00:00'), Timestamp('2022-01-14 00:00:00'), Timestamp('2022-01-21 00:00:00'), Timestamp('2022-01-26 00:00:00'), Timestamp('2022-01-27 00:00:00'), Timestamp('2022-01-31 00:00:00'), Timestamp('2022-02-03 00:00:00'), Timestamp('2022-02-04 00:00:00'), Timestamp('2022-02-09 00:00:00'), Timestamp('2022-02-10 00:00:00'), Timestamp('2022-02-11 00:00:00'), Timestamp('2022-02-15 00:00:00'), Timestamp('2022-02-17 00:00:00'), Timestamp('2022-02-22 00:00:00'), Timestamp('2022-02-24 00:00:00'), Timestamp('2022-03-01 00:00:00'), Timestamp('2022-03-02 00:00:00'), Timestamp('2022-03-03 00:00:00'), Timestamp('2022-03-04 00:00:00'), Timestamp('2022-03-07 00:00:00'), Timestamp('2022-03-15 00:00:00'), Timestamp('2022-03-16 00:00:00'), Timestamp('2022-03-21 00:00:00'), Timestamp('2022-03-25 00:00:00'), Timestamp('2022-03-28 00:00:00'), Timestamp('2022-03-29 00:00:00'), Timestamp('2022-03-30 00:00:00'), Timestamp('2022-04-04 00:00:00'), Timestamp('2022-04-05 00:00:00'), Timestamp('2022-04-06 00:00:00'), Timestamp('2022-04-25 00:00:00'), Timestamp('2022-04-26 00:00:00'), Timestamp('2022-04-28 00:00:00'), Timestamp('2022-05-10 00:00:00'), Timestamp('2022-05-13 00:00:00'), Timestamp('2022-05-17 00:00:00'), Timestamp('2022-05-18 00:00:00'), Timestamp('2022-05-23 00:00:00'), Timestamp('2022-05-24 00:00:00'), Timestamp('2022-05-26 00:00:00'), Timestamp('2022-05-27 00:00:00'), Timestamp('2022-06-02 00:00:00'), Timestamp('2022-06-06 00:00:00'), Timestamp('2022-06-08 00:00:00'), Timestamp('2022-06-15 00:00:00'), Timestamp('2022-06-16 00:00:00'), Timestamp('2022-06-17 00:00:00'), Timestamp('2022-06-24 00:00:00'), Timestamp('2022-06-27 00:00:00'), Timestamp('2022-06-28 00:00:00'), Timestamp('2022-06-30 00:00:00'), Timestamp('2022-07-12 00:00:00'), Timestamp('2022-07-14 00:00:00'), Timestamp('2022-07-19 00:00:00'), Timestamp('2022-07-21 00:00:00'), Timestamp('2022-07-28 00:00:00'), Timestamp('2022-07-29 00:00:00'), Timestamp('2022-08-01 00:00:00'), Timestamp('2022-08-02 00:00:00'), Timestamp('2022-08-03 00:00:00'), Timestamp('2022-08-04 00:00:00'), Timestamp('2022-08-05 00:00:00'), Timestamp('2022-08-11 00:00:00'), Timestamp('2022-08-17 00:00:00'), Timestamp('2022-08-18 00:00:00'), Timestamp('2022-08-19 00:00:00'), Timestamp('2022-08-23 00:00:00'), Timestamp('2022-08-24 00:00:00'), Timestamp('2022-08-25 00:00:00'), Timestamp('2022-08-30 00:00:00'), Timestamp('2022-09-09 00:00:00'), Timestamp('2022-09-12 00:00:00'), Timestamp('2022-09-16 00:00:00'), Timestamp('2022-09-27 00:00:00'), Timestamp('2022-09-29 00:00:00'), Timestamp('2022-10-19 00:00:00'), Timestamp('2022-10-21 00:00:00'), Timestamp('2022-10-26 00:00:00'), Timestamp('2022-10-28 00:00:00'), Timestamp('2022-11-07 00:00:00'), Timestamp('2022-11-08 00:00:00'), Timestamp('2022-11-17 00:00:00'), Timestamp('2022-11-18 00:00:00'), Timestamp('2022-11-23 00:00:00'), Timestamp('2022-12-06 00:00:00'), Timestamp('2022-12-07 00:00:00'), Timestamp('2022-12-12 00:00:00'), Timestamp('2022-12-13 00:00:00'), Timestamp('2022-12-14 00:00:00'), Timestamp('2022-12-19 00:00:00'), Timestamp('2022-12-20 00:00:00'), Timestamp('2022-12-21 00:00:00'), Timestamp('2023-01-03 00:00:00'), Timestamp('2023-01-06 00:00:00'), Timestamp('2023-01-09 00:00:00'), Timestamp('2023-01-11 00:00:00'), Timestamp('2023-01-18 00:00:00'), Timestamp('2023-01-24 00:00:00'), Timestamp('2023-01-25 00:00:00'), Timestamp('2023-02-03 00:00:00'), Timestamp('2023-02-08 00:00:00'), Timestamp('2023-02-15 00:00:00'), Timestamp('2023-02-16 00:00:00'), Timestamp('2023-02-21 00:00:00'), Timestamp('2023-03-03 00:00:00'), Timestamp('2023-03-07 00:00:00'), Timestamp('2023-03-10 00:00:00'), Timestamp('2023-03-16 00:00:00'), Timestamp('2023-03-17 00:00:00'), Timestamp('2023-03-20 00:00:00'), Timestamp('2023-03-21 00:00:00'), Timestamp('2023-03-29 00:00:00'), Timestamp('2023-04-10 00:00:00'), Timestamp('2023-04-11 00:00:00'), Timestamp('2023-04-12 00:00:00'), Timestamp('2023-04-13 00:00:00'), Timestamp('2023-04-18 00:00:00'), Timestamp('2023-04-19 00:00:00'), Timestamp('2023-04-20 00:00:00'), Timestamp('2023-05-03 00:00:00'), Timestamp('2023-05-04 00:00:00'), Timestamp('2023-05-18 00:00:00'), Timestamp('2023-06-02 00:00:00'), Timestamp('2023-06-05 00:00:00'), Timestamp('2023-06-14 00:00:00'), Timestamp('2023-06-15 00:00:00'), Timestamp('2023-06-30 00:00:00'), Timestamp('2023-07-10 00:00:00'), Timestamp('2023-07-11 00:00:00'), Timestamp('2023-07-13 00:00:00'), Timestamp('2023-07-14 00:00:00'), Timestamp('2023-07-17 00:00:00'), Timestamp('2023-07-19 00:00:00'), Timestamp('2023-07-20 00:00:00'), Timestamp('2023-07-21 00:00:00'), Timestamp('2023-07-24 00:00:00'), Timestamp('2023-07-26 00:00:00'), Timestamp('2023-08-03 00:00:00'), Timestamp('2023-08-24 00:00:00'), Timestamp('2023-08-29 00:00:00'), Timestamp('2023-09-01 00:00:00'), Timestamp('2023-09-05 00:00:00'), Timestamp('2023-09-06 00:00:00'), Timestamp('2023-09-11 00:00:00'), Timestamp('2023-09-15 00:00:00'), Timestamp('2023-09-25 00:00:00'), Timestamp('2023-09-29 00:00:00'), Timestamp('2023-10-06 00:00:00'), Timestamp('2023-10-16 00:00:00'), Timestamp('2023-10-17 00:00:00'), Timestamp('2023-10-18 00:00:00'), Timestamp('2023-10-25 00:00:00'), Timestamp('2023-10-30 00:00:00'), Timestamp('2023-10-31 00:00:00'), Timestamp('2023-11-01 00:00:00'), Timestamp('2023-11-02 00:00:00'), Timestamp('2023-11-07 00:00:00'), Timestamp('2023-11-16 00:00:00'), Timestamp('2023-11-22 00:00:00'), Timestamp('2023-11-27 00:00:00'), Timestamp('2023-11-29 00:00:00'), Timestamp('2023-12-01 00:00:00'), Timestamp('2023-12-07 00:00:00'), Timestamp('2023-12-08 00:00:00'), Timestamp('2023-12-12 00:00:00'), Timestamp('2023-12-14 00:00:00'), Timestamp('2023-12-15 00:00:00'), Timestamp('2023-12-19 00:00:00'), Timestamp('2023-12-27 00:00:00'), Timestamp('2024-01-05 00:00:00'), Timestamp('2024-01-11 00:00:00'), Timestamp('2024-01-17 00:00:00'), Timestamp('2024-02-02 00:00:00'), Timestamp('2024-02-06 00:00:00'), Timestamp('2024-02-08 00:00:00'), Timestamp('2024-02-16 00:00:00'), Timestamp('2024-02-22 00:00:00'), Timestamp('2024-03-04 00:00:00'), Timestamp('2024-03-05 00:00:00'), Timestamp('2024-03-12 00:00:00'), Timestamp('2024-03-19 00:00:00'), Timestamp('2024-04-09 00:00:00'), Timestamp('2024-04-11 00:00:00'), Timestamp('2024-04-15 00:00:00'), Timestamp('2024-04-17 00:00:00'), Timestamp('2024-04-18 00:00:00'), Timestamp('2024-04-22 00:00:00'), Timestamp('2024-04-23 00:00:00'), Timestamp('2024-04-24 00:00:00'), Timestamp('2024-05-01 00:00:00'), Timestamp('2024-05-03 00:00:00'), Timestamp('2024-05-07 00:00:00'), Timestamp('2024-05-08 00:00:00'), Timestamp('2024-05-16 00:00:00'), Timestamp('2024-05-21 00:00:00'), Timestamp('2024-05-22 00:00:00'), Timestamp('2024-05-24 00:00:00'), Timestamp('2024-05-28 00:00:00'), Timestamp('2024-05-29 00:00:00'), Timestamp('2024-06-03 00:00:00'), Timestamp('2024-06-05 00:00:00'), Timestamp('2024-06-07 00:00:00'), Timestamp('2024-06-12 00:00:00'), Timestamp('2024-07-01 00:00:00'), Timestamp('2024-07-03 00:00:00'), Timestamp('2024-07-12 00:00:00'), Timestamp('2024-07-16 00:00:00'), Timestamp('2024-07-23 00:00:00'), Timestamp('2024-07-26 00:00:00'), Timestamp('2024-07-30 00:00:00'), Timestamp('2024-08-01 00:00:00'), Timestamp('2024-08-05 00:00:00'), Timestamp('2024-08-06 00:00:00'), Timestamp('2024-08-20 00:00:00'), Timestamp('2024-08-26 00:00:00'), Timestamp('2024-08-28 00:00:00'), Timestamp('2024-09-03 00:00:00'), Timestamp('2024-09-06 00:00:00'), Timestamp('2024-09-10 00:00:00'), Timestamp('2024-09-12 00:00:00'), Timestamp('2024-09-18 00:00:00'), Timestamp('2024-09-23 00:00:00'), Timestamp('2024-09-25 00:00:00'), Timestamp('2024-09-27 00:00:00'), Timestamp('2024-10-01 00:00:00'), Timestamp('2024-10-11 00:00:00'), Timestamp('2024-10-16 00:00:00'), Timestamp('2024-10-22 00:00:00'), Timestamp('2024-10-28 00:00:00'), Timestamp('2024-10-30 00:00:00'), Timestamp('2024-11-01 00:00:00'), Timestamp('2024-11-05 00:00:00'), Timestamp('2024-11-06 00:00:00'), Timestamp('2024-11-08 00:00:00'), Timestamp('2024-11-12 00:00:00'), Timestamp('2024-11-13 00:00:00'), Timestamp('2024-11-14 00:00:00'), Timestamp('2024-11-20 00:00:00'), Timestamp('2024-11-21 00:00:00'), Timestamp('2024-11-22 00:00:00'), Timestamp('2024-12-04 00:00:00'), Timestamp('2024-12-10 00:00:00'), Timestamp('2024-12-17 00:00:00'), Timestamp('2024-12-20 00:00:00')]\n",
      "[Timestamp('2020-11-03 00:00:00'), Timestamp('2020-11-04 00:00:00'), Timestamp('2020-11-05 00:00:00'), Timestamp('2020-11-10 00:00:00'), Timestamp('2020-11-11 00:00:00'), Timestamp('2020-11-13 00:00:00'), Timestamp('2020-11-16 00:00:00'), Timestamp('2020-11-17 00:00:00'), Timestamp('2020-11-18 00:00:00'), Timestamp('2020-11-19 00:00:00'), Timestamp('2020-11-20 00:00:00'), Timestamp('2020-11-23 00:00:00'), Timestamp('2020-11-24 00:00:00'), Timestamp('2020-11-25 00:00:00'), Timestamp('2020-11-30 00:00:00'), Timestamp('2020-12-01 00:00:00'), Timestamp('2020-12-02 00:00:00'), Timestamp('2020-12-03 00:00:00'), Timestamp('2020-12-04 00:00:00'), Timestamp('2020-12-08 00:00:00'), Timestamp('2020-12-09 00:00:00'), Timestamp('2020-12-10 00:00:00'), Timestamp('2020-12-11 00:00:00'), Timestamp('2020-12-14 00:00:00'), Timestamp('2020-12-15 00:00:00'), Timestamp('2020-12-16 00:00:00'), Timestamp('2020-12-17 00:00:00'), Timestamp('2020-12-18 00:00:00'), Timestamp('2020-12-21 00:00:00'), Timestamp('2020-12-22 00:00:00'), Timestamp('2020-12-23 00:00:00'), Timestamp('2020-12-24 00:00:00'), Timestamp('2020-12-28 00:00:00'), Timestamp('2020-12-31 00:00:00'), Timestamp('2021-01-04 00:00:00'), Timestamp('2021-01-05 00:00:00'), Timestamp('2021-01-06 00:00:00'), Timestamp('2021-01-07 00:00:00'), Timestamp('2021-01-08 00:00:00'), Timestamp('2021-01-11 00:00:00'), Timestamp('2021-01-12 00:00:00'), Timestamp('2021-01-13 00:00:00'), Timestamp('2021-01-14 00:00:00'), Timestamp('2021-01-15 00:00:00'), Timestamp('2021-01-19 00:00:00'), Timestamp('2021-01-20 00:00:00'), Timestamp('2021-01-21 00:00:00'), Timestamp('2021-01-22 00:00:00'), Timestamp('2021-01-25 00:00:00'), Timestamp('2021-01-26 00:00:00'), Timestamp('2021-01-27 00:00:00'), Timestamp('2021-01-28 00:00:00'), Timestamp('2021-02-02 00:00:00'), Timestamp('2021-02-03 00:00:00'), Timestamp('2021-02-04 00:00:00'), Timestamp('2021-02-05 00:00:00'), Timestamp('2021-02-08 00:00:00'), Timestamp('2021-02-09 00:00:00'), Timestamp('2021-02-10 00:00:00'), Timestamp('2021-02-11 00:00:00'), Timestamp('2021-02-12 00:00:00'), Timestamp('2021-02-16 00:00:00'), Timestamp('2021-02-17 00:00:00'), Timestamp('2021-02-18 00:00:00'), Timestamp('2021-02-19 00:00:00'), Timestamp('2021-02-23 00:00:00'), Timestamp('2021-02-24 00:00:00'), Timestamp('2021-02-25 00:00:00'), Timestamp('2021-03-02 00:00:00'), Timestamp('2021-03-03 00:00:00'), Timestamp('2021-03-04 00:00:00'), Timestamp('2021-03-05 00:00:00'), Timestamp('2021-03-09 00:00:00'), Timestamp('2021-03-10 00:00:00'), Timestamp('2021-03-11 00:00:00'), Timestamp('2021-03-12 00:00:00'), Timestamp('2021-03-15 00:00:00'), Timestamp('2021-03-16 00:00:00'), Timestamp('2021-03-17 00:00:00'), Timestamp('2021-03-18 00:00:00'), Timestamp('2021-03-19 00:00:00'), Timestamp('2021-03-22 00:00:00'), Timestamp('2021-03-23 00:00:00'), Timestamp('2021-03-25 00:00:00'), Timestamp('2021-03-26 00:00:00'), Timestamp('2021-03-29 00:00:00'), Timestamp('2021-03-30 00:00:00'), Timestamp('2021-03-31 00:00:00'), Timestamp('2021-04-05 00:00:00'), Timestamp('2021-04-06 00:00:00'), Timestamp('2021-04-07 00:00:00'), Timestamp('2021-04-08 00:00:00'), Timestamp('2021-04-12 00:00:00'), Timestamp('2021-04-14 00:00:00'), Timestamp('2021-04-15 00:00:00'), Timestamp('2021-04-16 00:00:00'), Timestamp('2021-04-19 00:00:00'), Timestamp('2021-04-20 00:00:00'), Timestamp('2021-04-21 00:00:00'), Timestamp('2021-04-22 00:00:00'), Timestamp('2021-04-23 00:00:00'), Timestamp('2021-04-26 00:00:00'), Timestamp('2021-04-27 00:00:00'), Timestamp('2021-04-28 00:00:00'), Timestamp('2021-04-29 00:00:00'), Timestamp('2021-04-30 00:00:00'), Timestamp('2021-05-03 00:00:00'), Timestamp('2021-05-04 00:00:00'), Timestamp('2021-05-05 00:00:00'), Timestamp('2021-05-06 00:00:00'), Timestamp('2021-05-07 00:00:00'), Timestamp('2021-05-10 00:00:00'), Timestamp('2021-05-11 00:00:00'), Timestamp('2021-05-12 00:00:00'), Timestamp('2021-05-13 00:00:00'), Timestamp('2021-05-14 00:00:00'), Timestamp('2021-05-19 00:00:00'), Timestamp('2021-05-21 00:00:00'), Timestamp('2021-05-25 00:00:00'), Timestamp('2021-05-26 00:00:00'), Timestamp('2021-05-27 00:00:00'), Timestamp('2021-05-28 00:00:00'), Timestamp('2021-06-01 00:00:00'), Timestamp('2021-06-02 00:00:00'), Timestamp('2021-06-03 00:00:00'), Timestamp('2021-06-04 00:00:00'), Timestamp('2021-06-07 00:00:00'), Timestamp('2021-06-08 00:00:00'), Timestamp('2021-06-09 00:00:00'), Timestamp('2021-06-10 00:00:00'), Timestamp('2021-06-11 00:00:00'), Timestamp('2021-06-14 00:00:00'), Timestamp('2021-06-16 00:00:00'), Timestamp('2021-06-17 00:00:00'), Timestamp('2021-06-18 00:00:00'), Timestamp('2021-06-21 00:00:00'), Timestamp('2021-06-22 00:00:00'), Timestamp('2021-06-23 00:00:00'), Timestamp('2021-06-24 00:00:00'), Timestamp('2021-06-28 00:00:00'), Timestamp('2021-06-29 00:00:00'), Timestamp('2021-07-01 00:00:00'), Timestamp('2021-07-08 00:00:00'), Timestamp('2021-07-09 00:00:00'), Timestamp('2021-07-12 00:00:00'), Timestamp('2021-07-14 00:00:00'), Timestamp('2021-07-15 00:00:00'), Timestamp('2021-07-16 00:00:00'), Timestamp('2021-07-19 00:00:00'), Timestamp('2021-07-20 00:00:00'), Timestamp('2021-07-21 00:00:00'), Timestamp('2021-07-22 00:00:00'), Timestamp('2021-07-23 00:00:00'), Timestamp('2021-07-27 00:00:00'), Timestamp('2021-07-28 00:00:00'), Timestamp('2021-07-29 00:00:00'), Timestamp('2021-07-30 00:00:00'), Timestamp('2021-08-02 00:00:00'), Timestamp('2021-08-03 00:00:00'), Timestamp('2021-08-04 00:00:00'), Timestamp('2021-08-05 00:00:00'), Timestamp('2021-08-09 00:00:00'), Timestamp('2021-08-10 00:00:00'), Timestamp('2021-08-11 00:00:00'), Timestamp('2021-08-12 00:00:00'), Timestamp('2021-08-18 00:00:00'), Timestamp('2021-08-19 00:00:00'), Timestamp('2021-08-20 00:00:00'), Timestamp('2021-08-25 00:00:00'), Timestamp('2021-08-26 00:00:00'), Timestamp('2021-08-31 00:00:00'), Timestamp('2021-09-01 00:00:00'), Timestamp('2021-09-02 00:00:00'), Timestamp('2021-09-03 00:00:00'), Timestamp('2021-09-09 00:00:00'), Timestamp('2021-09-10 00:00:00'), Timestamp('2021-09-13 00:00:00'), Timestamp('2021-09-14 00:00:00'), Timestamp('2021-09-15 00:00:00'), Timestamp('2021-09-16 00:00:00'), Timestamp('2021-09-17 00:00:00'), Timestamp('2021-09-21 00:00:00'), Timestamp('2021-09-22 00:00:00'), Timestamp('2021-09-23 00:00:00'), Timestamp('2021-09-24 00:00:00'), Timestamp('2021-09-27 00:00:00'), Timestamp('2021-09-28 00:00:00'), Timestamp('2021-09-29 00:00:00'), Timestamp('2021-09-30 00:00:00'), Timestamp('2021-10-01 00:00:00'), Timestamp('2021-10-04 00:00:00'), Timestamp('2021-10-05 00:00:00'), Timestamp('2021-10-06 00:00:00'), Timestamp('2021-10-07 00:00:00'), Timestamp('2021-10-08 00:00:00'), Timestamp('2021-10-11 00:00:00'), Timestamp('2021-10-13 00:00:00'), Timestamp('2021-10-14 00:00:00'), Timestamp('2021-10-15 00:00:00'), Timestamp('2021-10-18 00:00:00'), Timestamp('2021-10-19 00:00:00'), Timestamp('2021-10-20 00:00:00'), Timestamp('2021-10-21 00:00:00'), Timestamp('2021-10-22 00:00:00'), Timestamp('2021-10-25 00:00:00'), Timestamp('2021-10-26 00:00:00'), Timestamp('2021-10-27 00:00:00'), Timestamp('2021-10-28 00:00:00'), Timestamp('2021-10-29 00:00:00'), Timestamp('2021-11-01 00:00:00'), Timestamp('2021-11-02 00:00:00'), Timestamp('2021-11-03 00:00:00'), Timestamp('2021-11-04 00:00:00'), Timestamp('2021-11-05 00:00:00'), Timestamp('2021-11-09 00:00:00'), Timestamp('2021-11-10 00:00:00'), Timestamp('2021-11-11 00:00:00'), Timestamp('2021-11-15 00:00:00'), Timestamp('2021-11-16 00:00:00'), Timestamp('2021-11-18 00:00:00'), Timestamp('2021-11-19 00:00:00'), Timestamp('2021-11-22 00:00:00'), Timestamp('2021-11-23 00:00:00'), Timestamp('2021-11-24 00:00:00'), Timestamp('2021-11-26 00:00:00'), Timestamp('2021-11-30 00:00:00'), Timestamp('2021-12-01 00:00:00'), Timestamp('2021-12-02 00:00:00'), Timestamp('2021-12-03 00:00:00'), Timestamp('2021-12-06 00:00:00'), Timestamp('2021-12-07 00:00:00'), Timestamp('2021-12-08 00:00:00'), Timestamp('2021-12-09 00:00:00'), Timestamp('2021-12-13 00:00:00'), Timestamp('2021-12-14 00:00:00'), Timestamp('2021-12-15 00:00:00'), Timestamp('2021-12-16 00:00:00'), Timestamp('2021-12-17 00:00:00'), Timestamp('2021-12-20 00:00:00'), Timestamp('2021-12-22 00:00:00'), Timestamp('2021-12-23 00:00:00'), Timestamp('2021-12-28 00:00:00'), Timestamp('2021-12-29 00:00:00'), Timestamp('2021-12-30 00:00:00'), Timestamp('2021-12-31 00:00:00'), Timestamp('2022-01-03 00:00:00'), Timestamp('2022-01-06 00:00:00'), Timestamp('2022-01-10 00:00:00'), Timestamp('2022-01-11 00:00:00'), Timestamp('2022-01-14 00:00:00'), Timestamp('2022-01-18 00:00:00'), Timestamp('2022-01-19 00:00:00'), Timestamp('2022-01-20 00:00:00'), Timestamp('2022-01-21 00:00:00'), Timestamp('2022-01-24 00:00:00'), Timestamp('2022-01-25 00:00:00'), Timestamp('2022-01-26 00:00:00'), Timestamp('2022-01-27 00:00:00'), Timestamp('2022-01-28 00:00:00'), Timestamp('2022-01-31 00:00:00'), Timestamp('2022-02-01 00:00:00'), Timestamp('2022-02-02 00:00:00'), Timestamp('2022-02-03 00:00:00'), Timestamp('2022-02-04 00:00:00'), Timestamp('2022-02-07 00:00:00'), Timestamp('2022-02-08 00:00:00'), Timestamp('2022-02-09 00:00:00'), Timestamp('2022-02-10 00:00:00'), Timestamp('2022-02-11 00:00:00'), Timestamp('2022-02-14 00:00:00'), Timestamp('2022-02-15 00:00:00'), Timestamp('2022-02-16 00:00:00'), Timestamp('2022-02-17 00:00:00'), Timestamp('2022-02-18 00:00:00'), Timestamp('2022-02-22 00:00:00'), Timestamp('2022-02-24 00:00:00'), Timestamp('2022-02-25 00:00:00'), Timestamp('2022-02-28 00:00:00'), Timestamp('2022-03-01 00:00:00'), Timestamp('2022-03-02 00:00:00'), Timestamp('2022-03-03 00:00:00'), Timestamp('2022-03-04 00:00:00'), Timestamp('2022-03-07 00:00:00'), Timestamp('2022-03-08 00:00:00'), Timestamp('2022-03-09 00:00:00'), Timestamp('2022-03-10 00:00:00'), Timestamp('2022-03-11 00:00:00'), Timestamp('2022-03-14 00:00:00'), Timestamp('2022-03-15 00:00:00'), Timestamp('2022-03-16 00:00:00'), Timestamp('2022-03-17 00:00:00'), Timestamp('2022-03-18 00:00:00'), Timestamp('2022-03-21 00:00:00'), Timestamp('2022-03-22 00:00:00'), Timestamp('2022-03-23 00:00:00'), Timestamp('2022-03-25 00:00:00'), Timestamp('2022-03-28 00:00:00'), Timestamp('2022-03-29 00:00:00'), Timestamp('2022-03-30 00:00:00'), Timestamp('2022-03-31 00:00:00'), Timestamp('2022-04-01 00:00:00'), Timestamp('2022-04-04 00:00:00'), Timestamp('2022-04-05 00:00:00'), Timestamp('2022-04-06 00:00:00'), Timestamp('2022-04-07 00:00:00'), Timestamp('2022-04-12 00:00:00'), Timestamp('2022-04-13 00:00:00'), Timestamp('2022-04-19 00:00:00'), Timestamp('2022-04-20 00:00:00'), Timestamp('2022-04-25 00:00:00'), Timestamp('2022-04-26 00:00:00'), Timestamp('2022-04-27 00:00:00'), Timestamp('2022-04-28 00:00:00'), Timestamp('2022-04-29 00:00:00'), Timestamp('2022-05-02 00:00:00'), Timestamp('2022-05-04 00:00:00'), Timestamp('2022-05-09 00:00:00'), Timestamp('2022-05-10 00:00:00'), Timestamp('2022-05-11 00:00:00'), Timestamp('2022-05-12 00:00:00'), Timestamp('2022-05-13 00:00:00'), Timestamp('2022-05-16 00:00:00'), Timestamp('2022-05-17 00:00:00'), Timestamp('2022-05-18 00:00:00'), Timestamp('2022-05-19 00:00:00'), Timestamp('2022-05-20 00:00:00'), Timestamp('2022-05-23 00:00:00'), Timestamp('2022-05-24 00:00:00'), Timestamp('2022-05-25 00:00:00'), Timestamp('2022-05-26 00:00:00'), Timestamp('2022-05-27 00:00:00'), Timestamp('2022-06-01 00:00:00'), Timestamp('2022-06-02 00:00:00'), Timestamp('2022-06-06 00:00:00'), Timestamp('2022-06-07 00:00:00'), Timestamp('2022-06-08 00:00:00'), Timestamp('2022-06-14 00:00:00'), Timestamp('2022-06-15 00:00:00'), Timestamp('2022-06-16 00:00:00'), Timestamp('2022-06-17 00:00:00'), Timestamp('2022-06-21 00:00:00'), Timestamp('2022-06-22 00:00:00'), Timestamp('2022-06-23 00:00:00'), Timestamp('2022-06-24 00:00:00'), Timestamp('2022-06-27 00:00:00'), Timestamp('2022-06-28 00:00:00'), Timestamp('2022-06-30 00:00:00'), Timestamp('2022-07-01 00:00:00'), Timestamp('2022-07-07 00:00:00'), Timestamp('2022-07-08 00:00:00'), Timestamp('2022-07-12 00:00:00'), Timestamp('2022-07-13 00:00:00'), Timestamp('2022-07-14 00:00:00'), Timestamp('2022-07-18 00:00:00'), Timestamp('2022-07-19 00:00:00'), Timestamp('2022-07-20 00:00:00'), Timestamp('2022-07-21 00:00:00'), Timestamp('2022-07-25 00:00:00'), Timestamp('2022-07-26 00:00:00'), Timestamp('2022-07-27 00:00:00'), Timestamp('2022-07-28 00:00:00'), Timestamp('2022-07-29 00:00:00'), Timestamp('2022-08-01 00:00:00'), Timestamp('2022-08-02 00:00:00'), Timestamp('2022-08-03 00:00:00'), Timestamp('2022-08-04 00:00:00'), Timestamp('2022-08-05 00:00:00'), Timestamp('2022-08-09 00:00:00'), Timestamp('2022-08-10 00:00:00'), Timestamp('2022-08-11 00:00:00'), Timestamp('2022-08-16 00:00:00'), Timestamp('2022-08-17 00:00:00'), Timestamp('2022-08-18 00:00:00'), Timestamp('2022-08-19 00:00:00'), Timestamp('2022-08-22 00:00:00'), Timestamp('2022-08-23 00:00:00'), Timestamp('2022-08-24 00:00:00'), Timestamp('2022-08-25 00:00:00'), Timestamp('2022-08-30 00:00:00'), Timestamp('2022-09-01 00:00:00'), Timestamp('2022-09-02 00:00:00'), Timestamp('2022-09-06 00:00:00'), Timestamp('2022-09-07 00:00:00'), Timestamp('2022-09-09 00:00:00'), Timestamp('2022-09-12 00:00:00'), Timestamp('2022-09-13 00:00:00'), Timestamp('2022-09-14 00:00:00'), Timestamp('2022-09-15 00:00:00'), Timestamp('2022-09-16 00:00:00'), Timestamp('2022-09-19 00:00:00'), Timestamp('2022-09-27 00:00:00'), Timestamp('2022-09-29 00:00:00'), Timestamp('2022-10-04 00:00:00'), Timestamp('2022-10-06 00:00:00'), Timestamp('2022-10-07 00:00:00'), Timestamp('2022-10-10 00:00:00'), Timestamp('2022-10-11 00:00:00'), Timestamp('2022-10-13 00:00:00'), Timestamp('2022-10-18 00:00:00'), Timestamp('2022-10-19 00:00:00'), Timestamp('2022-10-21 00:00:00'), Timestamp('2022-10-24 00:00:00'), Timestamp('2022-10-25 00:00:00'), Timestamp('2022-10-26 00:00:00'), Timestamp('2022-10-27 00:00:00'), Timestamp('2022-10-28 00:00:00'), Timestamp('2022-10-31 00:00:00'), Timestamp('2022-11-02 00:00:00'), Timestamp('2022-11-03 00:00:00'), Timestamp('2022-11-07 00:00:00'), Timestamp('2022-11-08 00:00:00'), Timestamp('2022-11-09 00:00:00'), Timestamp('2022-11-11 00:00:00'), Timestamp('2022-11-15 00:00:00'), Timestamp('2022-11-16 00:00:00'), Timestamp('2022-11-17 00:00:00'), Timestamp('2022-11-18 00:00:00'), Timestamp('2022-11-23 00:00:00'), Timestamp('2022-11-25 00:00:00'), Timestamp('2022-11-28 00:00:00'), Timestamp('2022-11-29 00:00:00'), Timestamp('2022-12-01 00:00:00'), Timestamp('2022-12-02 00:00:00'), Timestamp('2022-12-05 00:00:00'), Timestamp('2022-12-06 00:00:00'), Timestamp('2022-12-07 00:00:00'), Timestamp('2022-12-08 00:00:00'), Timestamp('2022-12-09 00:00:00'), Timestamp('2022-12-12 00:00:00'), Timestamp('2022-12-13 00:00:00'), Timestamp('2022-12-14 00:00:00'), Timestamp('2022-12-15 00:00:00'), Timestamp('2022-12-16 00:00:00'), Timestamp('2022-12-19 00:00:00'), Timestamp('2022-12-20 00:00:00'), Timestamp('2022-12-21 00:00:00'), Timestamp('2022-12-22 00:00:00'), Timestamp('2022-12-23 00:00:00'), Timestamp('2022-12-29 00:00:00'), Timestamp('2022-12-30 00:00:00'), Timestamp('2023-01-03 00:00:00'), Timestamp('2023-01-04 00:00:00'), Timestamp('2023-01-06 00:00:00'), Timestamp('2023-01-09 00:00:00'), Timestamp('2023-01-10 00:00:00'), Timestamp('2023-01-11 00:00:00'), Timestamp('2023-01-13 00:00:00'), Timestamp('2023-01-18 00:00:00'), Timestamp('2023-01-20 00:00:00'), Timestamp('2023-01-23 00:00:00'), Timestamp('2023-01-24 00:00:00'), Timestamp('2023-01-25 00:00:00'), Timestamp('2023-01-26 00:00:00'), Timestamp('2023-01-27 00:00:00'), Timestamp('2023-01-30 00:00:00'), Timestamp('2023-02-01 00:00:00'), Timestamp('2023-02-02 00:00:00'), Timestamp('2023-02-03 00:00:00'), Timestamp('2023-02-07 00:00:00'), Timestamp('2023-02-08 00:00:00'), Timestamp('2023-02-10 00:00:00'), Timestamp('2023-02-15 00:00:00'), Timestamp('2023-02-16 00:00:00'), Timestamp('2023-02-21 00:00:00'), Timestamp('2023-02-22 00:00:00'), Timestamp('2023-02-23 00:00:00'), Timestamp('2023-02-27 00:00:00'), Timestamp('2023-02-28 00:00:00'), Timestamp('2023-03-01 00:00:00'), Timestamp('2023-03-02 00:00:00'), Timestamp('2023-03-03 00:00:00'), Timestamp('2023-03-06 00:00:00'), Timestamp('2023-03-07 00:00:00'), Timestamp('2023-03-09 00:00:00'), Timestamp('2023-03-10 00:00:00'), Timestamp('2023-03-14 00:00:00'), Timestamp('2023-03-16 00:00:00'), Timestamp('2023-03-17 00:00:00'), Timestamp('2023-03-20 00:00:00'), Timestamp('2023-03-21 00:00:00'), Timestamp('2023-03-23 00:00:00'), Timestamp('2023-03-28 00:00:00'), Timestamp('2023-03-29 00:00:00'), Timestamp('2023-04-05 00:00:00'), Timestamp('2023-04-10 00:00:00'), Timestamp('2023-04-11 00:00:00'), Timestamp('2023-04-12 00:00:00'), Timestamp('2023-04-13 00:00:00'), Timestamp('2023-04-18 00:00:00'), Timestamp('2023-04-19 00:00:00'), Timestamp('2023-04-20 00:00:00'), Timestamp('2023-04-24 00:00:00'), Timestamp('2023-04-26 00:00:00'), Timestamp('2023-05-01 00:00:00'), Timestamp('2023-05-02 00:00:00'), Timestamp('2023-05-03 00:00:00'), Timestamp('2023-05-04 00:00:00'), Timestamp('2023-05-15 00:00:00'), Timestamp('2023-05-16 00:00:00'), Timestamp('2023-05-17 00:00:00'), Timestamp('2023-05-18 00:00:00'), Timestamp('2023-05-19 00:00:00'), Timestamp('2023-05-22 00:00:00'), Timestamp('2023-05-24 00:00:00'), Timestamp('2023-05-26 00:00:00'), Timestamp('2023-06-01 00:00:00'), Timestamp('2023-06-02 00:00:00'), Timestamp('2023-06-05 00:00:00'), Timestamp('2023-06-06 00:00:00'), Timestamp('2023-06-07 00:00:00'), Timestamp('2023-06-08 00:00:00'), Timestamp('2023-06-14 00:00:00'), Timestamp('2023-06-15 00:00:00'), Timestamp('2023-06-16 00:00:00'), Timestamp('2023-06-22 00:00:00'), Timestamp('2023-06-23 00:00:00'), Timestamp('2023-06-26 00:00:00'), Timestamp('2023-06-28 00:00:00'), Timestamp('2023-06-30 00:00:00'), Timestamp('2023-07-05 00:00:00'), Timestamp('2023-07-06 00:00:00'), Timestamp('2023-07-07 00:00:00'), Timestamp('2023-07-10 00:00:00'), Timestamp('2023-07-11 00:00:00'), Timestamp('2023-07-12 00:00:00'), Timestamp('2023-07-13 00:00:00'), Timestamp('2023-07-14 00:00:00'), Timestamp('2023-07-17 00:00:00'), Timestamp('2023-07-18 00:00:00'), Timestamp('2023-07-19 00:00:00'), Timestamp('2023-07-20 00:00:00'), Timestamp('2023-07-21 00:00:00'), Timestamp('2023-07-24 00:00:00'), Timestamp('2023-07-25 00:00:00'), Timestamp('2023-07-26 00:00:00'), Timestamp('2023-07-27 00:00:00'), Timestamp('2023-07-28 00:00:00'), Timestamp('2023-08-01 00:00:00'), Timestamp('2023-08-02 00:00:00'), Timestamp('2023-08-03 00:00:00'), Timestamp('2023-08-07 00:00:00'), Timestamp('2023-08-08 00:00:00'), Timestamp('2023-08-14 00:00:00'), Timestamp('2023-08-16 00:00:00'), Timestamp('2023-08-17 00:00:00'), Timestamp('2023-08-22 00:00:00'), Timestamp('2023-08-24 00:00:00'), Timestamp('2023-08-28 00:00:00'), Timestamp('2023-08-29 00:00:00'), Timestamp('2023-09-01 00:00:00'), Timestamp('2023-09-05 00:00:00'), Timestamp('2023-09-06 00:00:00'), Timestamp('2023-09-07 00:00:00'), Timestamp('2023-09-08 00:00:00'), Timestamp('2023-09-11 00:00:00'), Timestamp('2023-09-12 00:00:00'), Timestamp('2023-09-13 00:00:00'), Timestamp('2023-09-14 00:00:00'), Timestamp('2023-09-15 00:00:00'), Timestamp('2023-09-25 00:00:00'), Timestamp('2023-09-26 00:00:00'), Timestamp('2023-09-27 00:00:00'), Timestamp('2023-09-29 00:00:00'), Timestamp('2023-10-03 00:00:00'), Timestamp('2023-10-06 00:00:00'), Timestamp('2023-10-12 00:00:00'), Timestamp('2023-10-13 00:00:00'), Timestamp('2023-10-16 00:00:00'), Timestamp('2023-10-17 00:00:00'), Timestamp('2023-10-18 00:00:00'), Timestamp('2023-10-24 00:00:00'), Timestamp('2023-10-25 00:00:00'), Timestamp('2023-10-26 00:00:00'), Timestamp('2023-10-27 00:00:00'), Timestamp('2023-10-30 00:00:00'), Timestamp('2023-10-31 00:00:00'), Timestamp('2023-11-01 00:00:00'), Timestamp('2023-11-02 00:00:00'), Timestamp('2023-11-06 00:00:00'), Timestamp('2023-11-07 00:00:00'), Timestamp('2023-11-08 00:00:00'), Timestamp('2023-11-09 00:00:00'), Timestamp('2023-11-13 00:00:00'), Timestamp('2023-11-14 00:00:00'), Timestamp('2023-11-16 00:00:00'), Timestamp('2023-11-22 00:00:00'), Timestamp('2023-11-27 00:00:00'), Timestamp('2023-11-29 00:00:00'), Timestamp('2023-12-01 00:00:00'), Timestamp('2023-12-04 00:00:00'), Timestamp('2023-12-05 00:00:00'), Timestamp('2023-12-06 00:00:00'), Timestamp('2023-12-07 00:00:00'), Timestamp('2023-12-08 00:00:00'), Timestamp('2023-12-12 00:00:00'), Timestamp('2023-12-13 00:00:00'), Timestamp('2023-12-14 00:00:00'), Timestamp('2023-12-15 00:00:00'), Timestamp('2023-12-19 00:00:00'), Timestamp('2023-12-20 00:00:00'), Timestamp('2023-12-22 00:00:00'), Timestamp('2023-12-26 00:00:00'), Timestamp('2023-12-27 00:00:00'), Timestamp('2024-01-03 00:00:00'), Timestamp('2024-01-05 00:00:00'), Timestamp('2024-01-08 00:00:00'), Timestamp('2024-01-09 00:00:00'), Timestamp('2024-01-11 00:00:00'), Timestamp('2024-01-16 00:00:00'), Timestamp('2024-01-17 00:00:00'), Timestamp('2024-01-18 00:00:00'), Timestamp('2024-01-22 00:00:00'), Timestamp('2024-01-23 00:00:00'), Timestamp('2024-01-24 00:00:00'), Timestamp('2024-01-25 00:00:00'), Timestamp('2024-01-26 00:00:00'), Timestamp('2024-01-29 00:00:00'), Timestamp('2024-01-31 00:00:00'), Timestamp('2024-02-01 00:00:00'), Timestamp('2024-02-02 00:00:00'), Timestamp('2024-02-06 00:00:00'), Timestamp('2024-02-07 00:00:00'), Timestamp('2024-02-08 00:00:00'), Timestamp('2024-02-09 00:00:00'), Timestamp('2024-02-12 00:00:00'), Timestamp('2024-02-13 00:00:00'), Timestamp('2024-02-14 00:00:00'), Timestamp('2024-02-15 00:00:00'), Timestamp('2024-02-16 00:00:00'), Timestamp('2024-02-21 00:00:00'), Timestamp('2024-02-22 00:00:00'), Timestamp('2024-02-23 00:00:00'), Timestamp('2024-02-26 00:00:00'), Timestamp('2024-02-27 00:00:00'), Timestamp('2024-02-28 00:00:00'), Timestamp('2024-02-29 00:00:00'), Timestamp('2024-03-01 00:00:00'), Timestamp('2024-03-04 00:00:00'), Timestamp('2024-03-05 00:00:00'), Timestamp('2024-03-06 00:00:00'), Timestamp('2024-03-07 00:00:00'), Timestamp('2024-03-08 00:00:00'), Timestamp('2024-03-12 00:00:00'), Timestamp('2024-03-14 00:00:00'), Timestamp('2024-03-15 00:00:00'), Timestamp('2024-03-19 00:00:00'), Timestamp('2024-03-20 00:00:00'), Timestamp('2024-03-21 00:00:00'), Timestamp('2024-03-22 00:00:00'), Timestamp('2024-03-25 00:00:00'), Timestamp('2024-03-27 00:00:00'), Timestamp('2024-03-28 00:00:00'), Timestamp('2024-04-01 00:00:00'), Timestamp('2024-04-02 00:00:00'), Timestamp('2024-04-04 00:00:00'), Timestamp('2024-04-09 00:00:00'), Timestamp('2024-04-11 00:00:00'), Timestamp('2024-04-12 00:00:00'), Timestamp('2024-04-15 00:00:00'), Timestamp('2024-04-16 00:00:00'), Timestamp('2024-04-17 00:00:00'), Timestamp('2024-04-18 00:00:00'), Timestamp('2024-04-19 00:00:00'), Timestamp('2024-04-22 00:00:00'), Timestamp('2024-04-23 00:00:00'), Timestamp('2024-04-24 00:00:00'), Timestamp('2024-04-26 00:00:00'), Timestamp('2024-04-30 00:00:00'), Timestamp('2024-05-01 00:00:00'), Timestamp('2024-05-02 00:00:00'), Timestamp('2024-05-03 00:00:00'), Timestamp('2024-05-07 00:00:00'), Timestamp('2024-05-08 00:00:00'), Timestamp('2024-05-09 00:00:00'), Timestamp('2024-05-13 00:00:00'), Timestamp('2024-05-14 00:00:00'), Timestamp('2024-05-16 00:00:00'), Timestamp('2024-05-21 00:00:00'), Timestamp('2024-05-22 00:00:00'), Timestamp('2024-05-24 00:00:00'), Timestamp('2024-05-28 00:00:00'), Timestamp('2024-05-29 00:00:00'), Timestamp('2024-05-30 00:00:00'), Timestamp('2024-06-03 00:00:00'), Timestamp('2024-06-04 00:00:00'), Timestamp('2024-06-05 00:00:00'), Timestamp('2024-06-06 00:00:00'), Timestamp('2024-06-07 00:00:00'), Timestamp('2024-06-10 00:00:00'), Timestamp('2024-06-11 00:00:00'), Timestamp('2024-06-12 00:00:00'), Timestamp('2024-06-13 00:00:00'), Timestamp('2024-06-18 00:00:00'), Timestamp('2024-06-25 00:00:00'), Timestamp('2024-06-26 00:00:00'), Timestamp('2024-06-27 00:00:00'), Timestamp('2024-07-01 00:00:00'), Timestamp('2024-07-03 00:00:00'), Timestamp('2024-07-05 00:00:00'), Timestamp('2024-07-08 00:00:00'), Timestamp('2024-07-09 00:00:00'), Timestamp('2024-07-10 00:00:00'), Timestamp('2024-07-11 00:00:00'), Timestamp('2024-07-12 00:00:00'), Timestamp('2024-07-16 00:00:00'), Timestamp('2024-07-18 00:00:00'), Timestamp('2024-07-19 00:00:00'), Timestamp('2024-07-22 00:00:00'), Timestamp('2024-07-23 00:00:00'), Timestamp('2024-07-24 00:00:00'), Timestamp('2024-07-26 00:00:00'), Timestamp('2024-07-29 00:00:00'), Timestamp('2024-07-30 00:00:00'), Timestamp('2024-08-01 00:00:00'), Timestamp('2024-08-05 00:00:00'), Timestamp('2024-08-06 00:00:00'), Timestamp('2024-08-07 00:00:00'), Timestamp('2024-08-08 00:00:00'), Timestamp('2024-08-09 00:00:00'), Timestamp('2024-08-12 00:00:00'), Timestamp('2024-08-13 00:00:00'), Timestamp('2024-08-19 00:00:00'), Timestamp('2024-08-20 00:00:00'), Timestamp('2024-08-21 00:00:00'), Timestamp('2024-08-26 00:00:00'), Timestamp('2024-08-28 00:00:00'), Timestamp('2024-09-03 00:00:00'), Timestamp('2024-09-04 00:00:00'), Timestamp('2024-09-06 00:00:00'), Timestamp('2024-09-09 00:00:00'), Timestamp('2024-09-10 00:00:00'), Timestamp('2024-09-11 00:00:00'), Timestamp('2024-09-12 00:00:00'), Timestamp('2024-09-17 00:00:00'), Timestamp('2024-09-18 00:00:00'), Timestamp('2024-09-19 00:00:00'), Timestamp('2024-09-20 00:00:00'), Timestamp('2024-09-23 00:00:00'), Timestamp('2024-09-24 00:00:00'), Timestamp('2024-09-25 00:00:00'), Timestamp('2024-09-27 00:00:00'), Timestamp('2024-10-01 00:00:00'), Timestamp('2024-10-03 00:00:00'), Timestamp('2024-10-04 00:00:00'), Timestamp('2024-10-09 00:00:00'), Timestamp('2024-10-11 00:00:00'), Timestamp('2024-10-15 00:00:00'), Timestamp('2024-10-16 00:00:00'), Timestamp('2024-10-17 00:00:00'), Timestamp('2024-10-22 00:00:00'), Timestamp('2024-10-24 00:00:00'), Timestamp('2024-10-25 00:00:00'), Timestamp('2024-10-28 00:00:00'), Timestamp('2024-10-30 00:00:00'), Timestamp('2024-11-01 00:00:00'), Timestamp('2024-11-05 00:00:00'), Timestamp('2024-11-06 00:00:00'), Timestamp('2024-11-08 00:00:00'), Timestamp('2024-11-11 00:00:00'), Timestamp('2024-11-12 00:00:00'), Timestamp('2024-11-13 00:00:00'), Timestamp('2024-11-14 00:00:00'), Timestamp('2024-11-15 00:00:00'), Timestamp('2024-11-18 00:00:00'), Timestamp('2024-11-20 00:00:00'), Timestamp('2024-11-21 00:00:00'), Timestamp('2024-11-22 00:00:00'), Timestamp('2024-11-25 00:00:00'), Timestamp('2024-11-26 00:00:00'), Timestamp('2024-11-27 00:00:00'), Timestamp('2024-12-04 00:00:00'), Timestamp('2024-12-05 00:00:00'), Timestamp('2024-12-06 00:00:00'), Timestamp('2024-12-09 00:00:00'), Timestamp('2024-12-10 00:00:00'), Timestamp('2024-12-11 00:00:00'), Timestamp('2024-12-12 00:00:00'), Timestamp('2024-12-17 00:00:00'), Timestamp('2024-12-18 00:00:00'), Timestamp('2024-12-19 00:00:00'), Timestamp('2024-12-20 00:00:00'), Timestamp('2024-12-23 00:00:00')]\n"
     ]
    }
   ],
   "source": [
    "stock_final_prices = adjclose.tolist()\n",
    "date=date.tolist()\n",
    "\n",
    "buy_signals = []\n",
    "buy_dates = []\n",
    "sell_signals = []\n",
    "sell_dates=[]\n",
    "\n",
    "for i in range(len(y_pred)):\n",
    "    if y_pred[i] == 1:\n",
    "        buy_signals.append(i)\n",
    "        buy_dates.append(date[i])\n",
    "    else :\n",
    "      sell_signals.append(i)\n",
    "      sell_dates.append(date[i])\n",
    "buy_df = pd.DataFrame({\n",
    "    'Signal': 'Buy',\n",
    "    'Date': buy_dates,\n",
    "    'Index': buy_signals\n",
    "})\n",
    "\n",
    "sell_df = pd.DataFrame({\n",
    "    'Signal': 'Sell',\n",
    "    'Date': sell_dates,\n",
    "    'Index': sell_signals\n",
    "})\n",
    "\n",
    "# Concatenate buy and sell DataFrames\n",
    "trading = pd.concat([buy_df, sell_df])\n",
    "\n",
    "# Sort by date\n",
    "trading = trading.sort_values(by='Date').reset_index(drop=True)\n",
    "\n",
    "# Print the trading DataFrame\n",
    "print(\"Buy signals indices:\", buy_signals)\n",
    "print(\"Buy dates:\", buy_dates)\n",
    "print(\"Sell signals indices:\", sell_signals)\n",
    "print(\"Sell dates:\", sell_dates)\n",
    "print(date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "de07caec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T15:48:34.910638Z",
     "iopub.status.busy": "2025-07-04T15:48:34.910213Z",
     "iopub.status.idle": "2025-07-04T15:48:34.915313Z",
     "shell.execute_reply": "2025-07-04T15:48:34.914404Z"
    },
    "papermill": {
     "duration": 0.022558,
     "end_time": "2025-07-04T15:48:34.916874",
     "exception": false,
     "start_time": "2025-07-04T15:48:34.894316",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "782\n",
      "431\n",
      "351\n"
     ]
    }
   ],
   "source": [
    "print(len(date))\n",
    "print(len(buy_dates))\n",
    "print(len(sell_dates))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b5497856",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T15:48:34.949338Z",
     "iopub.status.busy": "2025-07-04T15:48:34.948622Z",
     "iopub.status.idle": "2025-07-04T15:48:34.986398Z",
     "shell.execute_reply": "2025-07-04T15:48:34.985477Z"
    },
    "papermill": {
     "duration": 0.056437,
     "end_time": "2025-07-04T15:48:34.988808",
     "exception": false,
     "start_time": "2025-07-04T15:48:34.932371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Buying at 140.32666015625 on date 2020-11-04 00:00:00\n",
      "Selling at 146.02999877929688 on date 2020-11-05 00:00:00\n",
      "Buying at 147.20333862304688 on date 2020-11-17 00:00:00\n",
      "Selling at 162.2133331298828 on date 2020-11-18 00:00:00\n",
      "Buying at 163.20333862304688 on date 2020-11-20 00:00:00\n",
      "Selling at 194.9199981689453 on date 2020-12-01 00:00:00\n",
      "Buying at 201.4933319091797 on date 2020-12-09 00:00:00\n",
      "Selling at 209.02333068847656 on date 2020-12-10 00:00:00\n",
      "Buying at 203.3300018310547 on date 2020-12-11 00:00:00\n",
      "Selling at 218.63333129882807 on date 2020-12-17 00:00:00\n",
      "Buying at 216.6199951171875 on date 2020-12-21 00:00:00\n",
      "Selling at 213.44667053222656 on date 2020-12-22 00:00:00\n",
      "Buying at 215.32666015625 on date 2020-12-23 00:00:00\n",
      "Selling at 220.58999633789065 on date 2020-12-24 00:00:00\n",
      "Buying at 221.22999572753903 on date 2020-12-28 00:00:00\n",
      "Selling at 235.22332763671875 on date 2020-12-31 00:00:00\n",
      "Buying at 243.2566680908203 on date 2021-01-04 00:00:00\n",
      "Selling at 245.0366668701172 on date 2021-01-05 00:00:00\n",
      "Buying at 272.0133361816406 on date 2021-01-07 00:00:00\n",
      "Selling at 270.39666748046875 on date 2021-01-11 00:00:00\n",
      "Buying at 284.8033447265625 on date 2021-01-13 00:00:00\n",
      "Selling at 281.51666259765625 on date 2021-01-19 00:00:00\n",
      "Buying at 282.2133178710937 on date 2021-01-22 00:00:00\n",
      "Selling at 278.4766540527344 on date 2021-01-28 00:00:00\n",
      "Buying at 290.92999267578125 on date 2021-02-02 00:00:00\n",
      "Selling at 283.3299865722656 on date 2021-02-04 00:00:00\n",
      "Buying at 284.07666015625 on date 2021-02-05 00:00:00\n",
      "Selling at 268.2733459472656 on date 2021-02-10 00:00:00\n",
      "Buying at 270.5533447265625 on date 2021-02-11 00:00:00\n",
      "Selling at 272.0400085449219 on date 2021-02-12 00:00:00\n",
      "Buying at 265.4066772460937 on date 2021-02-16 00:00:00\n",
      "Selling at 266.04998779296875 on date 2021-02-17 00:00:00\n",
      "Buying at 262.4599914550781 on date 2021-02-18 00:00:00\n",
      "Selling at 227.4066619873047 on date 2021-02-25 00:00:00\n",
      "Buying at 228.81333923339844 on date 2021-03-02 00:00:00\n",
      "Selling at 225.6266632080078 on date 2021-03-16 00:00:00\n",
      "Buying at 217.72000122070312 on date 2021-03-18 00:00:00\n",
      "Selling at 220.72000122070312 on date 2021-03-23 00:00:00\n",
      "Buying at 206.23666381835932 on date 2021-03-26 00:00:00\n",
      "Selling at 211.8733367919922 on date 2021-03-30 00:00:00\n",
      "Buying at 230.3500061035156 on date 2021-04-05 00:00:00\n",
      "Selling at 230.5399932861328 on date 2021-04-06 00:00:00\n",
      "Buying at 246.5933380126953 on date 2021-04-16 00:00:00\n",
      "Selling at 248.0399932861328 on date 2021-04-21 00:00:00\n",
      "Buying at 243.13333129882807 on date 2021-04-23 00:00:00\n",
      "Selling at 234.913330078125 on date 2021-04-27 00:00:00\n",
      "Buying at 231.46665954589844 on date 2021-04-28 00:00:00\n",
      "Selling at 224.5333404541016 on date 2021-05-04 00:00:00\n",
      "Buying at 224.1233367919922 on date 2021-05-07 00:00:00\n",
      "Selling at 196.5800018310547 on date 2021-05-14 00:00:00\n",
      "Buying at 193.6266632080078 on date 2021-05-21 00:00:00\n",
      "Selling at 201.56333923339844 on date 2021-05-25 00:00:00\n",
      "Buying at 207.96665954589844 on date 2021-06-01 00:00:00\n",
      "Selling at 201.7066650390625 on date 2021-06-02 00:00:00\n",
      "Buying at 201.7100067138672 on date 2021-06-07 00:00:00\n",
      "Selling at 201.19667053222656 on date 2021-06-08 00:00:00\n",
      "Buying at 199.5933380126953 on date 2021-06-09 00:00:00\n",
      "Selling at 201.6233367919922 on date 2021-06-16 00:00:00\n",
      "Buying at 207.7700042724609 on date 2021-06-18 00:00:00\n",
      "Selling at 207.90333557128903 on date 2021-06-22 00:00:00\n",
      "Buying at 218.856674194336 on date 2021-06-23 00:00:00\n",
      "Selling at 226.606674194336 on date 2021-06-24 00:00:00\n",
      "Buying at 229.5733337402344 on date 2021-06-28 00:00:00\n",
      "Selling at 226.9199981689453 on date 2021-06-29 00:00:00\n",
      "Buying at 225.97332763671875 on date 2021-07-01 00:00:00\n",
      "Selling at 217.60333251953125 on date 2021-07-08 00:00:00\n",
      "Buying at 218.9833374023437 on date 2021-07-09 00:00:00\n",
      "Selling at 216.86666870117188 on date 2021-07-15 00:00:00\n",
      "Buying at 215.4066619873047 on date 2021-07-19 00:00:00\n",
      "Selling at 218.42999267578125 on date 2021-07-21 00:00:00\n",
      "Buying at 216.4199981689453 on date 2021-07-22 00:00:00\n",
      "Selling at 214.4600067138672 on date 2021-07-23 00:00:00\n",
      "Buying at 214.9266662597656 on date 2021-07-27 00:00:00\n",
      "Selling at 236.55667114257807 on date 2021-08-02 00:00:00\n",
      "Buying at 236.97332763671875 on date 2021-08-04 00:00:00\n",
      "Selling at 236.663330078125 on date 2021-08-10 00:00:00\n",
      "Buying at 235.94000244140625 on date 2021-08-11 00:00:00\n",
      "Selling at 229.663330078125 on date 2021-08-18 00:00:00\n",
      "Buying at 224.4900054931641 on date 2021-08-19 00:00:00\n",
      "Selling at 226.7533264160156 on date 2021-08-20 00:00:00\n",
      "Buying at 237.0666656494141 on date 2021-08-25 00:00:00\n",
      "Selling at 244.69667053222656 on date 2021-09-01 00:00:00\n",
      "Buying at 244.1300048828125 on date 2021-09-02 00:00:00\n",
      "Selling at 251.6199951171875 on date 2021-09-09 00:00:00\n",
      "Buying at 245.42333984375 on date 2021-09-10 00:00:00\n",
      "Selling at 251.94332885742188 on date 2021-09-15 00:00:00\n",
      "Buying at 253.163330078125 on date 2021-09-17 00:00:00\n",
      "Selling at 259.1866760253906 on date 2021-09-28 00:00:00\n",
      "Buying at 260.4366760253906 on date 2021-09-29 00:00:00\n",
      "Selling at 258.49334716796875 on date 2021-09-30 00:00:00\n",
      "Buying at 258.4066772460937 on date 2021-10-01 00:00:00\n",
      "Selling at 261.8299865722656 on date 2021-10-08 00:00:00\n",
      "Buying at 263.9800109863281 on date 2021-10-11 00:00:00\n",
      "Selling at 281.010009765625 on date 2021-10-15 00:00:00\n",
      "Buying at 290.03668212890625 on date 2021-10-18 00:00:00\n",
      "Selling at 288.0899963378906 on date 2021-10-19 00:00:00\n",
      "Buying at 298.0 on date 2021-10-21 00:00:00\n",
      "Selling at 359.0133361816406 on date 2021-10-28 00:00:00\n",
      "Buying at 402.86334228515625 on date 2021-11-01 00:00:00\n",
      "Selling at 404.6199951171875 on date 2021-11-03 00:00:00\n",
      "Buying at 409.9700012207031 on date 2021-11-04 00:00:00\n",
      "Selling at 407.36334228515625 on date 2021-11-05 00:00:00\n",
      "Buying at 341.1666564941406 on date 2021-11-09 00:00:00\n",
      "Selling at 354.5033264160156 on date 2021-11-11 00:00:00\n",
      "Buying at 365.4599914550781 on date 2021-11-18 00:00:00\n",
      "Selling at 379.0199890136719 on date 2021-11-19 00:00:00\n",
      "Buying at 385.6233215332031 on date 2021-11-22 00:00:00\n",
      "Selling at 369.6766662597656 on date 2021-11-23 00:00:00\n",
      "Buying at 372.0 on date 2021-11-24 00:00:00\n",
      "Selling at 360.6400146484375 on date 2021-11-26 00:00:00\n",
      "Buying at 381.586669921875 on date 2021-11-30 00:00:00\n",
      "Selling at 336.336669921875 on date 2021-12-06 00:00:00\n",
      "Buying at 350.5833435058594 on date 2021-12-07 00:00:00\n",
      "Selling at 356.32000732421875 on date 2021-12-08 00:00:00\n",
      "Buying at 334.6000061035156 on date 2021-12-09 00:00:00\n",
      "Selling at 322.1366577148437 on date 2021-12-13 00:00:00\n",
      "Buying at 308.97332763671875 on date 2021-12-16 00:00:00\n",
      "Selling at 310.8566589355469 on date 2021-12-17 00:00:00\n",
      "Buying at 362.8233337402344 on date 2021-12-28 00:00:00\n",
      "Selling at 362.0633239746094 on date 2021-12-29 00:00:00\n",
      "Buying at 399.9266662597656 on date 2022-01-03 00:00:00\n",
      "Selling at 354.79998779296875 on date 2022-01-11 00:00:00\n",
      "Buying at 343.5033264160156 on date 2022-01-18 00:00:00\n",
      "Selling at 314.6333312988281 on date 2022-01-21 00:00:00\n",
      "Buying at 310.0 on date 2022-01-24 00:00:00\n",
      "Selling at 312.4700012207031 on date 2022-01-26 00:00:00\n",
      "Buying at 282.1166687011719 on date 2022-01-28 00:00:00\n",
      "Selling at 312.239990234375 on date 2022-01-31 00:00:00\n",
      "Buying at 310.4166564941406 on date 2022-02-01 00:00:00\n",
      "Selling at 297.0466613769531 on date 2022-02-03 00:00:00\n",
      "Buying at 302.4466552734375 on date 2022-02-07 00:00:00\n",
      "Selling at 310.6666564941406 on date 2022-02-09 00:00:00\n",
      "Buying at 291.9200134277344 on date 2022-02-14 00:00:00\n",
      "Selling at 307.4766540527344 on date 2022-02-15 00:00:00\n",
      "Buying at 307.7966613769531 on date 2022-02-16 00:00:00\n",
      "Selling at 292.1166687011719 on date 2022-02-17 00:00:00\n",
      "Buying at 285.6600036621094 on date 2022-02-18 00:00:00\n",
      "Selling at 273.84332275390625 on date 2022-02-22 00:00:00\n",
      "Buying at 269.9566650390625 on date 2022-02-25 00:00:00\n",
      "Selling at 288.1233215332031 on date 2022-03-01 00:00:00\n",
      "Buying at 274.79998779296875 on date 2022-03-08 00:00:00\n",
      "Selling at 267.2966613769531 on date 2022-03-15 00:00:00\n",
      "Buying at 290.5333251953125 on date 2022-03-17 00:00:00\n",
      "Selling at 307.0533447265625 on date 2022-03-21 00:00:00\n",
      "Buying at 331.32666015625 on date 2022-03-22 00:00:00\n",
      "Selling at 336.8800048828125 on date 2022-03-25 00:00:00\n",
      "Buying at 359.20001220703125 on date 2022-03-31 00:00:00\n",
      "Selling at 381.8166809082031 on date 2022-04-04 00:00:00\n",
      "Buying at 352.4200134277344 on date 2022-04-07 00:00:00\n",
      "Selling at 332.67333984375 on date 2022-04-25 00:00:00\n",
      "Buying at 293.836669921875 on date 2022-04-27 00:00:00\n",
      "Selling at 292.5033264160156 on date 2022-04-28 00:00:00\n",
      "Buying at 290.2533264160156 on date 2022-04-29 00:00:00\n",
      "Selling at 266.67999267578125 on date 2022-05-10 00:00:00\n",
      "Buying at 244.6666717529297 on date 2022-05-11 00:00:00\n",
      "Selling at 256.5299987792969 on date 2022-05-13 00:00:00\n",
      "Buying at 241.4566650390625 on date 2022-05-16 00:00:00\n",
      "Selling at 253.8699951171875 on date 2022-05-17 00:00:00\n",
      "Buying at 236.47332763671875 on date 2022-05-19 00:00:00\n",
      "Selling at 224.96665954589844 on date 2022-05-23 00:00:00\n",
      "Buying at 219.6000061035156 on date 2022-05-25 00:00:00\n",
      "Selling at 235.91000366210932 on date 2022-05-26 00:00:00\n",
      "Buying at 246.7899932861328 on date 2022-06-01 00:00:00\n",
      "Selling at 258.3333435058594 on date 2022-06-02 00:00:00\n",
      "Buying at 238.8866729736328 on date 2022-06-07 00:00:00\n",
      "Selling at 241.86666870117188 on date 2022-06-08 00:00:00\n",
      "Buying at 220.88999938964844 on date 2022-06-14 00:00:00\n",
      "Selling at 233.0 on date 2022-06-15 00:00:00\n",
      "Buying at 237.0366668701172 on date 2022-06-21 00:00:00\n",
      "Selling at 245.7066650390625 on date 2022-06-24 00:00:00\n",
      "Buying at 227.26333618164065 on date 2022-07-01 00:00:00\n",
      "Selling at 233.07000732421875 on date 2022-07-12 00:00:00\n",
      "Buying at 237.0399932861328 on date 2022-07-13 00:00:00\n",
      "Selling at 238.31333923339844 on date 2022-07-14 00:00:00\n",
      "Buying at 240.54666137695312 on date 2022-07-18 00:00:00\n",
      "Selling at 245.52999877929688 on date 2022-07-19 00:00:00\n",
      "Buying at 247.5 on date 2022-07-20 00:00:00\n",
      "Selling at 271.7066650390625 on date 2022-07-21 00:00:00\n",
      "Buying at 268.4333190917969 on date 2022-07-25 00:00:00\n",
      "Selling at 280.8999938964844 on date 2022-07-28 00:00:00\n",
      "Buying at 283.3333435058594 on date 2022-08-09 00:00:00\n",
      "Selling at 286.6300048828125 on date 2022-08-11 00:00:00\n",
      "Buying at 306.5633239746094 on date 2022-08-16 00:00:00\n",
      "Selling at 303.9966735839844 on date 2022-08-17 00:00:00\n",
      "Buying at 289.913330078125 on date 2022-08-22 00:00:00\n",
      "Selling at 296.4533386230469 on date 2022-08-23 00:00:00\n",
      "Buying at 277.1600036621094 on date 2022-09-01 00:00:00\n",
      "Selling at 299.67999267578125 on date 2022-09-09 00:00:00\n",
      "Buying at 292.1300048828125 on date 2022-09-13 00:00:00\n",
      "Selling at 303.3500061035156 on date 2022-09-16 00:00:00\n",
      "Buying at 309.07000732421875 on date 2022-09-19 00:00:00\n",
      "Selling at 282.94000244140625 on date 2022-09-27 00:00:00\n",
      "Buying at 249.44000244140625 on date 2022-10-04 00:00:00\n",
      "Selling at 222.0399932861328 on date 2022-10-19 00:00:00\n",
      "Buying at 211.25 on date 2022-10-24 00:00:00\n",
      "Selling at 224.63999938964844 on date 2022-10-26 00:00:00\n",
      "Buying at 225.08999633789065 on date 2022-10-27 00:00:00\n",
      "Selling at 228.5200042724609 on date 2022-10-28 00:00:00\n",
      "Buying at 227.5399932861328 on date 2022-10-31 00:00:00\n",
      "Selling at 197.0800018310547 on date 2022-11-07 00:00:00\n",
      "Buying at 177.58999633789062 on date 2022-11-09 00:00:00\n",
      "Selling at 183.1699981689453 on date 2022-11-17 00:00:00\n",
      "Buying at 182.8600006103516 on date 2022-11-25 00:00:00\n",
      "Selling at 179.82000732421875 on date 2022-12-06 00:00:00\n",
      "Buying at 173.44000244140625 on date 2022-12-08 00:00:00\n",
      "Selling at 167.82000732421875 on date 2022-12-12 00:00:00\n",
      "Buying at 157.6699981689453 on date 2022-12-15 00:00:00\n",
      "Selling at 149.8699951171875 on date 2022-12-19 00:00:00\n",
      "Buying at 125.3499984741211 on date 2022-12-22 00:00:00\n",
      "Selling at 108.0999984741211 on date 2023-01-03 00:00:00\n",
      "Buying at 113.63999938964844 on date 2023-01-04 00:00:00\n",
      "Selling at 113.05999755859376 on date 2023-01-06 00:00:00\n",
      "Buying at 118.8499984741211 on date 2023-01-10 00:00:00\n",
      "Selling at 123.22000122070312 on date 2023-01-11 00:00:00\n",
      "Buying at 122.4000015258789 on date 2023-01-13 00:00:00\n",
      "Selling at 128.77999877929688 on date 2023-01-18 00:00:00\n",
      "Buying at 133.4199981689453 on date 2023-01-20 00:00:00\n",
      "Selling at 143.88999938964844 on date 2023-01-24 00:00:00\n",
      "Buying at 160.27000427246094 on date 2023-01-26 00:00:00\n",
      "Selling at 189.97999572753903 on date 2023-02-03 00:00:00\n",
      "Buying at 196.8099975585937 on date 2023-02-07 00:00:00\n",
      "Selling at 201.2899932861328 on date 2023-02-08 00:00:00\n",
      "Buying at 196.88999938964844 on date 2023-02-10 00:00:00\n",
      "Selling at 214.2400054931641 on date 2023-02-15 00:00:00\n",
      "Buying at 200.8600006103516 on date 2023-02-22 00:00:00\n",
      "Selling at 197.7899932861328 on date 2023-03-03 00:00:00\n",
      "Buying at 193.8099975585937 on date 2023-03-06 00:00:00\n",
      "Selling at 187.7100067138672 on date 2023-03-07 00:00:00\n",
      "Buying at 172.9199981689453 on date 2023-03-09 00:00:00\n",
      "Selling at 173.44000244140625 on date 2023-03-10 00:00:00\n",
      "Buying at 183.259994506836 on date 2023-03-14 00:00:00\n",
      "Selling at 184.1300048828125 on date 2023-03-16 00:00:00\n",
      "Buying at 192.22000122070312 on date 2023-03-23 00:00:00\n",
      "Selling at 193.8800048828125 on date 2023-03-29 00:00:00\n",
      "Buying at 185.5200042724609 on date 2023-04-05 00:00:00\n",
      "Selling at 184.509994506836 on date 2023-04-10 00:00:00\n",
      "Buying at 162.5500030517578 on date 2023-04-24 00:00:00\n",
      "Selling at 160.61000061035156 on date 2023-05-03 00:00:00\n",
      "Buying at 166.35000610351562 on date 2023-05-15 00:00:00\n",
      "Selling at 176.88999938964844 on date 2023-05-18 00:00:00\n",
      "Buying at 180.13999938964844 on date 2023-05-19 00:00:00\n",
      "Selling at 213.97000122070312 on date 2023-06-02 00:00:00\n",
      "Buying at 221.3099975585937 on date 2023-06-06 00:00:00\n",
      "Selling at 256.7900085449219 on date 2023-06-14 00:00:00\n",
      "Buying at 260.5400085449219 on date 2023-06-16 00:00:00\n",
      "Selling at 261.7699890136719 on date 2023-06-30 00:00:00\n",
      "Buying at 282.4800109863281 on date 2023-07-05 00:00:00\n",
      "Selling at 269.6099853515625 on date 2023-07-10 00:00:00\n",
      "Buying at 271.989990234375 on date 2023-07-12 00:00:00\n",
      "Selling at 277.8999938964844 on date 2023-07-13 00:00:00\n",
      "Buying at 293.3399963378906 on date 2023-07-18 00:00:00\n",
      "Selling at 291.260009765625 on date 2023-07-19 00:00:00\n",
      "Buying at 265.2799987792969 on date 2023-07-25 00:00:00\n",
      "Selling at 264.3500061035156 on date 2023-07-26 00:00:00\n",
      "Buying at 255.7100067138672 on date 2023-07-27 00:00:00\n",
      "Selling at 259.32000732421875 on date 2023-08-03 00:00:00\n",
      "Buying at 251.4499969482422 on date 2023-08-07 00:00:00\n",
      "Selling at 230.0399932861328 on date 2023-08-24 00:00:00\n",
      "Buying at 238.82000732421875 on date 2023-08-28 00:00:00\n",
      "Selling at 257.17999267578125 on date 2023-08-29 00:00:00\n",
      "Buying at 251.4900054931641 on date 2023-09-07 00:00:00\n",
      "Selling at 273.5799865722656 on date 2023-09-11 00:00:00\n",
      "Buying at 267.4800109863281 on date 2023-09-12 00:00:00\n",
      "Selling at 274.3900146484375 on date 2023-09-15 00:00:00\n",
      "Buying at 244.1199951171875 on date 2023-09-26 00:00:00\n",
      "Selling at 250.22000122070312 on date 2023-09-29 00:00:00\n",
      "Buying at 246.52999877929688 on date 2023-10-03 00:00:00\n",
      "Selling at 260.5299987792969 on date 2023-10-06 00:00:00\n",
      "Buying at 258.8699951171875 on date 2023-10-12 00:00:00\n",
      "Selling at 253.9199981689453 on date 2023-10-16 00:00:00\n",
      "Buying at 216.5200042724609 on date 2023-10-24 00:00:00\n",
      "Selling at 212.4199981689453 on date 2023-10-25 00:00:00\n",
      "Buying at 205.759994506836 on date 2023-10-26 00:00:00\n",
      "Selling at 197.3600006103516 on date 2023-10-30 00:00:00\n",
      "Buying at 219.2700042724609 on date 2023-11-06 00:00:00\n",
      "Selling at 222.17999267578125 on date 2023-11-07 00:00:00\n",
      "Buying at 222.1100006103516 on date 2023-11-08 00:00:00\n",
      "Selling at 233.58999633789065 on date 2023-11-16 00:00:00\n",
      "Buying at 235.5800018310547 on date 2023-12-04 00:00:00\n",
      "Selling at 242.63999938964844 on date 2023-12-07 00:00:00\n",
      "Buying at 239.2899932861328 on date 2023-12-13 00:00:00\n",
      "Selling at 251.0500030517578 on date 2023-12-14 00:00:00\n",
      "Buying at 247.13999938964844 on date 2023-12-20 00:00:00\n",
      "Selling at 261.44000244140625 on date 2023-12-27 00:00:00\n",
      "Buying at 238.4499969482422 on date 2024-01-03 00:00:00\n",
      "Selling at 237.4900054931641 on date 2024-01-05 00:00:00\n",
      "Buying at 240.4499969482422 on date 2024-01-08 00:00:00\n",
      "Selling at 227.22000122070312 on date 2024-01-11 00:00:00\n",
      "Buying at 219.91000366210932 on date 2024-01-16 00:00:00\n",
      "Selling at 215.5500030517578 on date 2024-01-17 00:00:00\n",
      "Buying at 211.8800048828125 on date 2024-01-18 00:00:00\n",
      "Selling at 187.91000366210932 on date 2024-02-02 00:00:00\n",
      "Buying at 187.5800018310547 on date 2024-02-07 00:00:00\n",
      "Selling at 189.5599975585937 on date 2024-02-08 00:00:00\n",
      "Buying at 193.57000732421875 on date 2024-02-09 00:00:00\n",
      "Selling at 199.9499969482422 on date 2024-02-16 00:00:00\n",
      "Buying at 194.7700042724609 on date 2024-02-21 00:00:00\n",
      "Selling at 197.41000366210932 on date 2024-02-22 00:00:00\n",
      "Buying at 191.97000122070312 on date 2024-02-23 00:00:00\n",
      "Selling at 188.13999938964844 on date 2024-03-04 00:00:00\n",
      "Buying at 176.5399932861328 on date 2024-03-06 00:00:00\n",
      "Selling at 177.5399932861328 on date 2024-03-12 00:00:00\n",
      "Buying at 162.5 on date 2024-03-14 00:00:00\n",
      "Selling at 171.32000732421875 on date 2024-03-19 00:00:00\n",
      "Buying at 175.66000366210938 on date 2024-03-20 00:00:00\n",
      "Selling at 176.8800048828125 on date 2024-04-09 00:00:00\n",
      "Buying at 171.0500030517578 on date 2024-04-12 00:00:00\n",
      "Selling at 161.47999572753906 on date 2024-04-15 00:00:00\n",
      "Buying at 157.11000061035156 on date 2024-04-16 00:00:00\n",
      "Selling at 155.4499969482422 on date 2024-04-17 00:00:00\n",
      "Buying at 147.0500030517578 on date 2024-04-19 00:00:00\n",
      "Selling at 142.0500030517578 on date 2024-04-22 00:00:00\n",
      "Buying at 168.2899932861328 on date 2024-04-26 00:00:00\n",
      "Selling at 179.99000549316406 on date 2024-05-01 00:00:00\n",
      "Buying at 180.00999450683594 on date 2024-05-02 00:00:00\n",
      "Selling at 181.19000244140625 on date 2024-05-03 00:00:00\n",
      "Buying at 171.97000122070312 on date 2024-05-09 00:00:00\n",
      "Selling at 174.83999633789062 on date 2024-05-16 00:00:00\n",
      "Buying at 178.7899932861328 on date 2024-05-30 00:00:00\n",
      "Selling at 176.2899932861328 on date 2024-06-03 00:00:00\n",
      "Buying at 174.77000427246094 on date 2024-06-04 00:00:00\n",
      "Selling at 175.0 on date 2024-06-05 00:00:00\n",
      "Buying at 177.94000244140625 on date 2024-06-06 00:00:00\n",
      "Selling at 177.47999572753906 on date 2024-06-07 00:00:00\n",
      "Buying at 173.7899932861328 on date 2024-06-10 00:00:00\n",
      "Selling at 177.2899932861328 on date 2024-06-12 00:00:00\n",
      "Buying at 182.47000122070312 on date 2024-06-13 00:00:00\n",
      "Selling at 209.8600006103516 on date 2024-07-01 00:00:00\n",
      "Buying at 251.5200042724609 on date 2024-07-05 00:00:00\n",
      "Selling at 248.22999572753903 on date 2024-07-12 00:00:00\n",
      "Buying at 249.22999572753903 on date 2024-07-18 00:00:00\n",
      "Selling at 246.3800048828125 on date 2024-07-23 00:00:00\n",
      "Buying at 215.9900054931641 on date 2024-07-24 00:00:00\n",
      "Selling at 219.8000030517578 on date 2024-07-26 00:00:00\n",
      "Buying at 232.1000061035156 on date 2024-07-29 00:00:00\n",
      "Selling at 222.6199951171875 on date 2024-07-30 00:00:00\n",
      "Buying at 191.759994506836 on date 2024-08-07 00:00:00\n",
      "Selling at 221.1000061035156 on date 2024-08-20 00:00:00\n",
      "Buying at 223.2700042724609 on date 2024-08-21 00:00:00\n",
      "Selling at 213.2100067138672 on date 2024-08-26 00:00:00\n",
      "Buying at 219.41000366210932 on date 2024-09-04 00:00:00\n",
      "Selling at 210.72999572753903 on date 2024-09-06 00:00:00\n",
      "Buying at 216.2700042724609 on date 2024-09-09 00:00:00\n",
      "Selling at 226.1699981689453 on date 2024-09-10 00:00:00\n",
      "Buying at 228.1300048828125 on date 2024-09-11 00:00:00\n",
      "Selling at 229.8099975585937 on date 2024-09-12 00:00:00\n",
      "Buying at 227.8699951171875 on date 2024-09-17 00:00:00\n",
      "Selling at 227.1999969482422 on date 2024-09-18 00:00:00\n",
      "Buying at 243.9199981689453 on date 2024-09-19 00:00:00\n",
      "Selling at 250.0 on date 2024-09-23 00:00:00\n",
      "Buying at 254.2700042724609 on date 2024-09-24 00:00:00\n",
      "Selling at 257.0199890136719 on date 2024-09-25 00:00:00\n",
      "Buying at 240.66000366210932 on date 2024-10-03 00:00:00\n",
      "Selling at 217.8000030517578 on date 2024-10-11 00:00:00\n",
      "Buying at 219.57000732421875 on date 2024-10-15 00:00:00\n",
      "Selling at 221.3300018310547 on date 2024-10-16 00:00:00\n",
      "Buying at 220.88999938964844 on date 2024-10-17 00:00:00\n",
      "Selling at 217.97000122070312 on date 2024-10-22 00:00:00\n",
      "Buying at 260.4800109863281 on date 2024-10-24 00:00:00\n",
      "Selling at 262.510009765625 on date 2024-10-28 00:00:00\n",
      "Buying at 350.0 on date 2024-11-11 00:00:00\n",
      "Selling at 328.489990234375 on date 2024-11-12 00:00:00\n",
      "Buying at 320.7200012207031 on date 2024-11-15 00:00:00\n",
      "Selling at 342.0299987792969 on date 2024-11-20 00:00:00\n",
      "Buying at 338.5899963378906 on date 2024-11-25 00:00:00\n",
      "Selling at 357.92999267578125 on date 2024-12-04 00:00:00\n",
      "Buying at 369.489990234375 on date 2024-12-05 00:00:00\n",
      "Selling at 400.989990234375 on date 2024-12-10 00:00:00\n",
      "Buying at 424.7699890136719 on date 2024-12-11 00:00:00\n",
      "Selling at 479.8599853515625 on date 2024-12-17 00:00:00\n",
      "Buying at 440.1300048828125 on date 2024-12-18 00:00:00\n",
      "Selling at 421.05999755859375 on date 2024-12-20 00:00:00\n",
      "Buying at 430.6000061035156 on date 2024-12-23 00:00:00\n",
      "Final Portfolio Value: $2577.27\n",
      "Sharpe Ratio: 0.08\n",
      "Maximum Drawdown: -40.50%\n",
      "Number of Trades Executed: 373\n",
      "Win Ratio: 29.22%\n"
     ]
    }
   ],
   "source": [
    "initial_cash = 500  # Starting with $500\n",
    "cash = initial_cash\n",
    "portfolio_value = []\n",
    "positions = 0  # Number of shares currently held\n",
    "buy_price = 0 # Price at which shares were bought\n",
    "buy_rate=[]\n",
    "sell_rate=[]\n",
    "buy_time=[]\n",
    "sell_time=[]\n",
    "\n",
    "num_trades = 0\n",
    "wins = 0\n",
    "\n",
    "# Metrics\n",
    "daily_returns = []\n",
    "peak_value = initial_cash\n",
    "max_drawdown = 0.0\n",
    "\n",
    "for i, price in enumerate(stock_final_prices):\n",
    "    if date[i] in buy_dates and cash > 0:\n",
    "        buy_price = price\n",
    "        buy_rate.append(price)\n",
    "        buy_time.append(date[i])\n",
    "        positions = cash / buy_price\n",
    "        cash = 0\n",
    "        num_trades =num_trades +1\n",
    "        print(f\"Buying at {buy_price} on date {date[i]}\")\n",
    "\n",
    "    elif date[i] in sell_dates and positions > 0:\n",
    "        sell_price = price\n",
    "        sell_rate.append(price)\n",
    "        sell_time.append(date[i])\n",
    "        cash = sell_price * positions\n",
    "        positions = 0\n",
    "        num_trades =num_trades +1\n",
    "        print(f\"Selling at {sell_price} on date {date[i]}\")\n",
    "        if sell_price > buy_price:\n",
    "            wins += 1\n",
    "\n",
    "    # Calculate current portfolio value\n",
    "    current_value = cash + positions * price\n",
    "    portfolio_value.append(current_value)\n",
    "\n",
    "    # Calculate daily return\n",
    "    if len(portfolio_value) > 1:\n",
    "        daily_return = (portfolio_value[-1] - portfolio_value[-2]) / portfolio_value[-2]\n",
    "        daily_returns.append(daily_return)\n",
    "\n",
    "    # Update peak value and calculate drawdown\n",
    "    if current_value > peak_value:\n",
    "        peak_value = current_value\n",
    "    drawdown = (current_value - peak_value) / peak_value\n",
    "    if drawdown < max_drawdown:\n",
    "        max_drawdown = drawdown\n",
    "\n",
    "# Calculate Sharpe Ratio\n",
    "risk_free_rate = 0.0  # Assuming risk-free rate is 0%\n",
    "average_daily_return = np.mean(daily_returns)\n",
    "std_daily_return = np.std(daily_returns)\n",
    "sharpe_ratio = (average_daily_return - risk_free_rate) / std_daily_return if std_daily_return != 0 else np.nan\n",
    "\n",
    "# Calculate Win Ratio\n",
    "win_ratio = wins / num_trades if num_trades > 0 else 0.0\n",
    "\n",
    "# Output results\n",
    "print(f\"Final Portfolio Value: ${portfolio_value[-1]:.2f}\")\n",
    "print(f\"Sharpe Ratio: {sharpe_ratio:.2f}\")\n",
    "print(f\"Maximum Drawdown: {max_drawdown:.2%}\")\n",
    "print(f\"Number of Trades Executed: {num_trades}\")\n",
    "print(f\"Win Ratio: {win_ratio:.2%}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "d429d1c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T15:48:35.022870Z",
     "iopub.status.busy": "2025-07-04T15:48:35.022552Z",
     "iopub.status.idle": "2025-07-04T15:48:35.819574Z",
     "shell.execute_reply": "2025-07-04T15:48:35.818507Z"
    },
    "papermill": {
     "duration": 0.815459,
     "end_time": "2025-07-04T15:48:35.821586",
     "exception": false,
     "start_time": "2025-07-04T15:48:35.006127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.figure(figsize=(14, 10))\n",
    "\n",
    "# Portfolio Value over Time\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(date, portfolio_value, label='Portfolio Value')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Portfolio Value')\n",
    "plt.title('Portfolio Value Over Time')\n",
    "plt.legend()\n",
    "\n",
    "# Daily Returns\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(date[1:], daily_returns, label='Daily Returns')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Daily Return')\n",
    "plt.title('Daily Returns Over Time')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "30678f44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-04T15:48:35.859619Z",
     "iopub.status.busy": "2025-07-04T15:48:35.859301Z",
     "iopub.status.idle": "2025-07-04T15:48:36.179009Z",
     "shell.execute_reply": "2025-07-04T15:48:36.178143Z"
    },
    "papermill": {
     "duration": 0.340202,
     "end_time": "2025-07-04T15:48:36.180587",
     "exception": false,
     "start_time": "2025-07-04T15:48:35.840385",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,7))\n",
    "plt.plot(date,stock_final_prices,color=\"yellow\",label=\"stock price\")\n",
    "plt.scatter(buy_time,buy_rate,color='r',label='Buy Dates')\n",
    "plt.scatter(sell_time,sell_rate,color='g',label='Sell Dates')\n",
    "plt.xticks(rotation='vertical')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 7794207,
     "sourceId": 12362187,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13838.952688,
   "end_time": "2025-07-04T15:48:38.833823",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-04T11:57:59.881135",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
